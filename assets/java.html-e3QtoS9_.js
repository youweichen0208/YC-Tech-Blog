import{_ as n,o as a,c as s,e}from"./app--pQxNpRM.js";const t={},i=e(`<h1 id="java-interview-questions" tabindex="-1"><a class="header-anchor" href="#java-interview-questions" aria-hidden="true">#</a> Java Interview Questions</h1><h2 id="_1-compare-jdk-vs-jvm-vs-jre" tabindex="-1"><a class="header-anchor" href="#_1-compare-jdk-vs-jvm-vs-jre" aria-hidden="true">#</a> 1. Compare JDK vs. JVM vs. JRE</h2><h3 id="jvm-java-virtual-machine" tabindex="-1"><a class="header-anchor" href="#jvm-java-virtual-machine" aria-hidden="true">#</a> JVM (Java Virtual Machine)</h3><p>This is the heart of the Java Platform. It is a virtual machine that interprets Java bytecode and executes it as native code on the host machine. JVM is a part of the Java Runtime Environment.</p><h3 id="jre-java-runtime-environment" tabindex="-1"><a class="header-anchor" href="#jre-java-runtime-environment" aria-hidden="true">#</a> JRE (Java Runtime Environment)</h3><p>JRE is the environment where Java programs run. This is the system that takes our Java code, and combines it with the necessary libraries, and starts the JVM to execute it. JRE is a part of the Java Development Kit</p><h3 id="jdk-java-development-kit" tabindex="-1"><a class="header-anchor" href="#jdk-java-development-kit" aria-hidden="true">#</a> JDK (Java Development Kit)</h3><p>This is the tool necessary to compile, document, and package Java programs. It includes JRE.</p><h2 id="_2-differences-between-c-vs-java" tabindex="-1"><a class="header-anchor" href="#_2-differences-between-c-vs-java" aria-hidden="true">#</a> 2. Differences between C++ vs. Java</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C++</h3><ul><li>Memory management is manual, developers are responsible for creating and destroying objects.</li><li>Supports multiple inheritance.</li><li>Supports pointers.</li><li>Generates platform-dependent code (code that is written for a specific operating system. For example, a C++ program compiled on a Windows system cannot run on a Linux or Mac system without being recompiled on those systems).</li></ul><h2 id="_3-wrapper-class" tabindex="-1"><a class="header-anchor" href="#_3-wrapper-class" aria-hidden="true">#</a> 3. Wrapper class</h2><ul><li>Used to convert primitive data types into objects.</li><li>Eight primitive types and their corresponding wrapper classes: <ul><li><code>byte</code> - <code>Byte</code></li><li><code>short</code> - <code>Short</code></li><li><code>int</code> - <code>Integer</code></li><li><code>long</code> - <code>Long</code></li><li><code>float</code> - <code>Float</code></li><li><code>double</code> - <code>Double</code></li><li><code>char</code> - <code>Character</code></li><li><code>boolean</code> - <code>Boolean</code></li></ul></li><li>Useful when you want to use a primitive type in a data structure that requires objects.</li></ul><h2 id="_4-string-stringbuffer-and-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_4-string-stringbuffer-and-stringbuilder" aria-hidden="true">#</a> 4. String, StringBuffer, and StringBuilder</h2><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><ul><li>Immutable class, once a <code>String</code> object is created, it cannot be changed.</li><li>If you try to alter their values, another object gets created.</li></ul><h3 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer" aria-hidden="true">#</a> StringBuffer</h3><ul><li>Mutable class, <code>StringBuffer</code> objects can be modified.</li><li>It is thread-safe, meaning it is synchronized.</li></ul><h3 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder" aria-hidden="true">#</a> StringBuilder</h3><ul><li>Mutable class, <code>StringBuilder</code> objects can be modified.</li><li>It is not thread-safe.</li><li>Faster than <code>StringBuffer</code> because it is not synchronized.</li></ul><h2 id="_5-thread-safety-and-synchronization" tabindex="-1"><a class="header-anchor" href="#_5-thread-safety-and-synchronization" aria-hidden="true">#</a> 5. Thread Safety and Synchronization</h2><h3 id="thread-safety" tabindex="-1"><a class="header-anchor" href="#thread-safety" aria-hidden="true">#</a> Thread Safety:</h3><ul><li>The property of an object that guarantees safe execution by multiple threads at the same time.</li></ul><h3 id="synchronization" tabindex="-1"><a class="header-anchor" href="#synchronization" aria-hidden="true">#</a> Synchronization:</h3><ul><li>A method to achieve thread safety in Java.</li><li>Controls access by multiple threads to shared resources.</li><li>Ensures that only one thread can access the resource at a time, preventing race conditions.</li></ul><p>Example of a synchronized method in Java:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-object-basics" tabindex="-1"><a class="header-anchor" href="#_6-object-basics" aria-hidden="true">#</a> 6. Object Basics</h2><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><ul><li>A blueprint or template for creating objects.</li><li>Contains fields (variables) and methods to describe the behavior of an object.</li></ul><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><ul><li>An instance of a class.</li><li>Has state and behavior.</li><li>The state is stored in fields, while methods display the object&#39;s behavior.</li></ul><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h3><ul><li>Created by the values assigned to the variables of an object.</li><li>Example: A <code>Dog</code> class might have state variables like <code>color</code>, <code>name</code>, <code>breed</code>.</li></ul><h3 id="behavior" tabindex="-1"><a class="header-anchor" href="#behavior" aria-hidden="true">#</a> Behavior</h3><ul><li>Exposed through methods.</li><li>Example: A <code>Dog</code> class might have methods like <code>bark()</code>, <code>eat()</code>, and <code>sleep()</code>.</li></ul><h2 id="_7-tostring-method" tabindex="-1"><a class="header-anchor" href="#_7-tostring-method" aria-hidden="true">#</a> 7. toString method</h2><ul><li>Used to get a string representation of an object.</li><li>Defined in the <code>Object</code> class, can be overridden in any class.</li><li>By default, returns a string that includes the name of the object&#39;s class and its hash code.</li><li>Common to override <code>toString()</code> to provide a more meaningful string representation of your objects.</li></ul><p>Example of overriding the <code>toString()</code> method:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> breed<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Dog{&quot;</span> <span class="token operator">+</span>
               <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
               <span class="token string">&quot;, breed=&#39;&quot;</span> <span class="token operator">+</span> breed <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
               <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-equals-and-hashcode-methods-in-java" tabindex="-1"><a class="header-anchor" href="#_8-equals-and-hashcode-methods-in-java" aria-hidden="true">#</a> 8. equals() and hashCode() methods in Java</h2><h3 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals()</h3><ul><li>Checks if two objects are equal.</li><li>By default, checks for reference equality (it returns true if two references point to the same object).</li><li>Can be overridden to check for logical equality based on the state of the objects.</li></ul><h3 id="hashcode" tabindex="-1"><a class="header-anchor" href="#hashcode" aria-hidden="true">#</a> hashCode()</h3><ul><li>Returns an integer value, generated by a hashing algorithm.</li><li>Objects that are equal (according to their <code>equals()</code> method) should return the same hash code.</li><li>Used in collections like <code>HashSet</code>, <code>HashMap</code>, etc., to find objects more efficiently.</li></ul><p><strong>while equal objects must have equal hash codes, unequal objects can also have equal hash codes. It&#39;s a one-way relationship.</strong></p><p>Example of overriding these methods:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> breed<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
               <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>breed<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>breed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> breed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-inheritance-method-overloading-and-method-overriding" tabindex="-1"><a class="header-anchor" href="#_9-inheritance-method-overloading-and-method-overriding" aria-hidden="true">#</a> 9. Inheritance, Method Overloading, and Method Overriding</h2><h3 id="inheritance" tabindex="-1"><a class="header-anchor" href="#inheritance" aria-hidden="true">#</a> Inheritance</h3><ul><li>a mechanism in which one class acquires the property of another class.</li><li>in Java, classes can be derived from other classes, thereby inheriting fields and methods from those clases.</li></ul><h3 id="method-overloading" tabindex="-1"><a class="header-anchor" href="#method-overloading" aria-hidden="true">#</a> Method Overloading</h3><ul><li>a feature in Java that allows a class to have more than one method having the same name, if their argument lists are different.</li><li>polymorphism</li><li>the arugment list could differ in number of parameters, types of parameters, or both.</li></ul><h3 id="method-overriding" tabindex="-1"><a class="header-anchor" href="#method-overriding" aria-hidden="true">#</a> Method Overriding</h3><ul><li>a feature that allows a subclass to provide a specific implementation of a method that is already provided by its superclass.</li></ul><h2 id="_10-interface" tabindex="-1"><a class="header-anchor" href="#_10-interface" aria-hidden="true">#</a> 10. Interface</h2><ul><li>interfaces are used to achieve abstraction and multiple inheritance in Java.</li><li>a class can implement any number of interfaces</li><li>Interfaces are declared using the <code>interface</code> keyword.</li><li>Classes implement interfaces using the <code>implements</code> keyword.</li><li>All methods in an interface are implicitly public and abstract.</li><li>All fields in an interface are implicitly public, static, and final.</li><li>Prior to Java 8, interfaces could only contain method signatures(abstract methods) and constants(public static final variables). However, starting from Java 8, interfaces can contain default methods and static methods, both of which can have a body.</li></ul><p>Example of an interface and a class that implements the interface:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Declare an interface</span>
<span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Implement the interface</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Dog is eating&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-abstract-class-in-java" tabindex="-1"><a class="header-anchor" href="#_11-abstract-class-in-java" aria-hidden="true">#</a> 11. Abstract Class in Java</h2><ul><li>A class that cannot be instantiated.</li><li>Used to declare common characteristics of subclasses.</li><li>Can have fields, constructors, and methods (including abstract methods).</li></ul><h3 id="key-points" tabindex="-1"><a class="header-anchor" href="#key-points" aria-hidden="true">#</a> Key Points</h3><ul><li>Abstract classes are declared using the <code>abstract</code> keyword.</li><li>An abstract class can contain abstract methods — methods that are declared without an implementation.</li><li>An abstract class can also contain non-abstract methods (methods with an implementation).</li><li>You cannot create an instance of an abstract class. You can only create instances of its subclasses.</li></ul><p>Example of an abstract class and a class that extends the abstract class:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Declare an abstract class</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Animal is sleeping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Extend the abstract class</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Dog is eating&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-constructors-this-and-super" tabindex="-1"><a class="header-anchor" href="#_12-constructors-this-and-super" aria-hidden="true">#</a> 12. Constructors - this() and super()</h2><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this()</h3><ul><li>Used to call a constructor from another constructor within the same class.</li><li>Typically used when you have multiple constructors, and you want to call one constructor from another to avoid code duplication.</li></ul><h3 id="super" tabindex="-1"><a class="header-anchor" href="#super" aria-hidden="true">#</a> super()</h3><ul><li>Used to call the parent class&#39;s constructor from a child class.</li><li>Typically the first statement in a subclass constructor.</li><li>If you don&#39;t explicitly call a superclass constructor, Java will automatically insert a call to the no-argument constructor of the superclass.</li></ul><p>Example of using <code>this()</code> and <code>super()</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> breed<span class="token punctuation">;</span>

    <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> breed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Call the superclass constructor</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> breed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">,</span> breed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Call the other constructor in this class</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-polymorphism-and-instanceof" tabindex="-1"><a class="header-anchor" href="#_13-polymorphism-and-instanceof" aria-hidden="true">#</a> 13. Polymorphism and instanceof</h2><h3 id="polymorphism" tabindex="-1"><a class="header-anchor" href="#polymorphism" aria-hidden="true">#</a> Polymorphism</h3><ul><li>a fundamental concept in Object-Oriented Programming.</li><li>it describes a class&#39;s ability to take on many forms.</li><li>most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class obect. <ul><li>For example, consider an Animal class and a Dog class that extends Animal. If we define a method in Animal, we can use it in Dog as well, but it can perform different actions based on the object type.</li></ul></li></ul><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3><ul><li>the <code>instanceof</code> keyword is a binary operator used to test if an object(instance) is a subtype of a given type.</li><li>It&#39;s usually used for type checking and to avoid <code>ClassCastException</code> at runtime.</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Animal is eating...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Dog is eating...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Animal</span> myAnimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myAnimal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs &quot;Dog is eating...&quot;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>myAnimal <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;myAnimal is an instance of Dog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-what-is-coupling" tabindex="-1"><a class="header-anchor" href="#_14-what-is-coupling" aria-hidden="true">#</a> 14. What is Coupling</h2><ul><li>coupling refers to the degree to which one class knows about another class. If one class uses the methods of another class, there is coupling between these classes.</li><li>there are 2 types of coupling: 1. loose coupling 2. tight coupling</li></ul><h3 id="loose-coupling" tabindex="-1"><a class="header-anchor" href="#loose-coupling" aria-hidden="true">#</a> loose coupling</h3><ul><li>in loose coupling, classes are indepdent of each other. This means changing something major in one class doesn&#39;t affect the other.</li><li>loose coupling is a desirable characteristic for maintable coude because it allows you to change parts of your code withouting affecting unrelated parts.</li></ul><h3 id="tight-coupling" tabindex="-1"><a class="header-anchor" href="#tight-coupling" aria-hidden="true">#</a> tight coupling</h3><ul><li>in tight coupling, classes are highly dependent on each other. This means changing something major in one class may affect the other.</li></ul><h4 id="example-of-tight-coupling" tabindex="-1"><a class="header-anchor" href="#example-of-tight-coupling" aria-hidden="true">#</a> example of tight coupling</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tightcoupling</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edureka</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           a<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
      <span class="token class-name">B</span> b<span class="token punctuation">;</span>
      <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
       <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-of-loose-coupling" tabindex="-1"><a class="header-anchor" href="#example-of-loose-coupling" aria-hidden="true">#</a> example of loose coupling</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">loosecoupling</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edureka</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
           <span class="token class-name">Show</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">Show</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
           a<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">A</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
           a1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Show</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
      <span class="token class-name">Show</span> s<span class="token punctuation">;</span>
      <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">Show</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Show</span> <span class="token punctuation">{</span>
       <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">Show</span> <span class="token punctuation">{</span>
       <span class="token keyword">public</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In object-oriented design, the goal is to make the system loosely coupled, and the interfaces are a good way to achieve this. When classes communicate through interfaces, we can change the concrete implementation without affecting the classes that use the interface.</p><h2 id="_15-what-is-cohesion" tabindex="-1"><a class="header-anchor" href="#_15-what-is-cohesion" aria-hidden="true">#</a> 15. What is cohesion?</h2><ul><li>Refers to how closely all the routines in a class or all the code in a routine support a central purpose.</li><li>High cohesion is associated with several desirable traits of software including robustness, reliability, reusability, and understandability.</li><li>Low cohesion is associated with undesirable traits such as being difficult to maintain, test, reuse, or even understand.</li><li>Highly cohesive classes are often easier to maintain and less error-prone, because they have a single, well-defined role.</li></ul><p>Example of high cohesion in Java:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> newEmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Validate the new email</span>
        <span class="token comment">// Update the email</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-what-is-encapsulation" tabindex="-1"><a class="header-anchor" href="#_16-what-is-encapsulation" aria-hidden="true">#</a> 16. What is encapsulation?</h2><p>Encapsulation refers to the bundling of data(fields) and methods that act on that data into a single unit, which is typically a class in Java.</p><h3 id="encapsulation-provides-the-following-benefits" tabindex="-1"><a class="header-anchor" href="#encapsulation-provides-the-following-benefits" aria-hidden="true">#</a> Encapsulation provides the following benefits</h3><ul><li><code>Control over data</code>: By encapsulating the datam we can control what parts of the data can be accessed and how it can be manipulated. This is done by using access modifiers (<code>public</code>, <code>private</code>, <code>protected</code>) to restrict access to the fields of a class.</li><li><code>Data Hiding</code>: encapsulation hides the internal states of the objects and only exposes the methods and properties that users need to interact with.</li><li><code>Code Maintainability</code>: encapsulation makes the code more maintainable because we can change one part of the code without affecting other parts.</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// Private field, can&#39;t be accessed directly from outside the class</span>

    <span class="token comment">// Public getter method to access the private field</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Public setter method to modify the private field</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>name</code> field is encapsulated in the <code>User</code> class. It&#39;s marked as <code>private</code>, so it can&#39;t be accessed directly from outside the class.</p><h2 id="_17-inner-class-and-static-inner-class" tabindex="-1"><a class="header-anchor" href="#_17-inner-class-and-static-inner-class" aria-hidden="true">#</a> 17. Inner class and Static Inner class?</h2><ul><li>In Java, a class can be defined within another class, such classes are known as nested classes.</li><li>There are two types of nested classes: non-static (inner class) and static</li></ul><h3 id="inner-class" tabindex="-1"><a class="header-anchor" href="#inner-class" aria-hidden="true">#</a> Inner class:</h3><ul><li>non-static nested class</li><li>it has access to all of the variables and methods of its outer class and can refer to them directly in the same way that other non-static members of the outer class do.</li></ul><h2 id="static-nested-class" tabindex="-1"><a class="header-anchor" href="#static-nested-class" aria-hidden="true">#</a> Static Nested Class:</h2><ul><li>static class at the member level</li><li>it can be instantiated without an object of the outer class, so it can&#39;t access non-static variables and methods of the outer class.</li></ul><p>Example of an inner class and a static nested class in Java:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;Outer&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// Inner class</span>
    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Can access outer class&#39;s instance variable</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Static nested class</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticNestedClass</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// System.out.println(msg); // Can&#39;t access outer class&#39;s instance variable</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-what-is-an-anonymous-class" tabindex="-1"><a class="header-anchor" href="#_18-what-is-an-anonymous-class" aria-hidden="true">#</a> 18. What is an anonymous class?</h2><ul><li>A class without a name that is declared and instantiated in a single statement.</li><li>Typically used when you need to use a local class only once, while creating an instance of an interface or a class.</li><li>Often used in graphical programming and working with event listeners, as well as in implementations of functional interfaces in Java 8.</li></ul><p>Example of an anonymous class in Java:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Create an anonymous class that implements HelloWorld</span>
        <span class="token class-name">HelloWorld</span> helloWorld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        helloWorld<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs &quot;Hello, world!&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-access-modifiers-public-private-protected-and-default" tabindex="-1"><a class="header-anchor" href="#_19-access-modifiers-public-private-protected-and-default" aria-hidden="true">#</a> 19. Access Modifiers - public, private, protected, and default</h2><ul><li><strong>Public:</strong> Visible to all classes everywhere, whether they are in the same package or have a different package.</li><li><strong>Private:</strong> Only accessible within the declared class.</li><li><strong>Protected:</strong> Accessible in the same package and also in the subclass of different packages.</li><li><strong>Default (Package-Private):</strong> Accessible only within the same package.</li></ul><table><thead><tr><th>Modifier</th><th>Class</th><th>Package</th><th>Subclass</th><th>World</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>no modifier</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>private</td><td>Y</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><p>(Y = accessible, N = not accessible)</p><h2 id="_20-final-method-variable-and-class" tabindex="-1"><a class="header-anchor" href="#_20-final-method-variable-and-class" aria-hidden="true">#</a> 20. Final Method, Variable, and Class</h2><ul><li><strong>Final Variable:</strong> Once assigned, it always contains the same value.</li><li><strong>Final Method:</strong> Can&#39;t be overridden in a subclass.</li><li><strong>Final Class:</strong> Can&#39;t be extended by other classes.</li></ul><p>Example of a final variable, method, and class in Java:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FinalClass</span> <span class="token punctuation">{</span> <span class="token comment">// Final class</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> finalVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// Final variable</span>

    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">finalMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Final method</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a final method.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-static-variables-and-methods" tabindex="-1"><a class="header-anchor" href="#_21-static-variables-and-methods" aria-hidden="true">#</a> 21. Static variables and methods</h2><p>In Java, the <code>static</code> keyword is used to create variables and methods that belong to the class, rather than to the instance of the class.</p><h3 id="static-variable" tabindex="-1"><a class="header-anchor" href="#static-variable" aria-hidden="true">#</a> Static Variable:</h3><ul><li>A static variable is common to all the instances (or objects) of the class because it is a class-level variable.</li><li>It is not tied to a specific object instance of the class.</li><li>we can access the static variable without creating an instance of the class</li></ul><h3 id="static-method" tabindex="-1"><a class="header-anchor" href="#static-method" aria-hidden="true">#</a> Static Method:</h3><ul><li>It belongs to the class rather than the object of a class.</li><li>A static method can be invoked without the need for creating an instance of a class.</li><li>Static methods can access static variables and can change the value of it.</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> staticVariable<span class="token punctuation">;</span>

    <span class="token comment">// Static method</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        staticVariable <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a static method.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Static variable is &quot;</span> <span class="token operator">+</span> staticVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Access static variable without creating an instance</span>
        <span class="token class-name">App</span><span class="token punctuation">.</span>staticVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token comment">// Call static method without creating an instance</span>
        <span class="token class-name">App</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-more-will-be-coming-today" tabindex="-1"><a class="header-anchor" href="#_22-more-will-be-coming-today" aria-hidden="true">#</a> 22. more will be coming today:)</h2>`,127),c=[i];function o(l,p){return a(),s("div",null,c)}const d=n(t,[["render",o],["__file","java.html.vue"]]);export{d as default};
