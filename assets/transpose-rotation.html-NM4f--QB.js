import{_ as n,o as a,c as s,e as t}from"./app-ksEXqoGk.js";const e={},o=t(`<h1 id="matrix-rotation-transposing" tabindex="-1"><a class="header-anchor" href="#matrix-rotation-transposing" aria-hidden="true">#</a> Matrix Rotation &amp; transposing</h1><h2 id="what-is-transpose" tabindex="-1"><a class="header-anchor" href="#what-is-transpose" aria-hidden="true">#</a> what is transpose</h2><p>transposing refers to flipping the matrix over its diagonal, which switches the row and column indices of each element. For example, if we have a matrix:</p><p>For example, if we have a matrix:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 2 3
4 5 6
7 8 9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After transposing, it becomes:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 4 7
2 5 8
3 6 9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the transposed matrix, the first row of the original matrix becomes the first column, the second row becomes the second column, and so on.</p><p>In terms of indices, if an element was at position <code>(i, j)</code> in the original matrix, it will be at position <code>(j, i)</code> in the transposed matrix.</p><h2 id="code-template-for-transposing-a-2d-matrix-in-java-is-as-follows" tabindex="-1"><a class="header-anchor" href="#code-template-for-transposing-a-2d-matrix-in-java-is-as-follows" aria-hidden="true">#</a> Code template for transposing a 2D matrix in Java is as follows:</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transpose</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),p=[o];function i(c,l){return a(),s("div",null,p)}const u=n(e,[["render",i],["__file","transpose-rotation.html.vue"]]);export{u as default};
