const e=JSON.parse('{"key":"v-5904af2a","path":"/backend/cpp.html","title":"C++","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-12-13T00:00:00.000Z","category":["backend"],"tag":["C++"],"description":"C++ typedef &amp; using In C++, typedef is a keyword used to create an alias for an existing data type. This can help improve ode readability, make complex types easier to manage, or adapt to platform-specific changes without modifying multiple parts of the code. Starting with C++11, the using keyword can be used as an alternative to typedef. It is often preferred for its clarity, especially when defining complex types.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend/cpp.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"C++"}],["meta",{"property":"og:description","content":"C++ typedef &amp; using In C++, typedef is a keyword used to create an alias for an existing data type. This can help improve ode readability, make complex types easier to manage, or adapt to platform-specific changes without modifying multiple parts of the code. Starting with C++11, the using keyword can be used as an alternative to typedef. It is often preferred for its clarity, especially when defining complex types."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-25T17:14:20.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2024-12-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-25T17:14:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-25T17:14:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"typedef & using","slug":"typedef-using","link":"#typedef-using","children":[{"level":3,"title":"Examples:","slug":"examples","link":"#examples","children":[]}]},{"level":2,"title":"Hello","slug":"hello","link":"#hello","children":[]}],"git":{"createdTime":1734687273000,"updatedTime":1737825260000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":1},{"name":"jeremy.chen@enuit.com","email":"jeremy.chen@enuit.com","commits":1}]},"readingTime":{"minutes":0.74,"words":221},"filePathRelative":"backend/cpp.md","localizedDate":"December 13, 2024","excerpt":"<h1> C++</h1>\\n<h2> <code>typedef</code> &amp; <code>using</code></h2>\\n<p>In C++, <code>typedef</code> is a keyword used to create an alias for an existing data type. This can help improve ode readability, make complex types easier to manage, or adapt to platform-specific changes without modifying multiple parts of the code. Starting with C++11, the <code>using</code> keyword can be used as an alternative to <code>typedef</code>. It is often preferred for its clarity, especially when defining complex types.</p>","autoDesc":true}');export{e as data};
