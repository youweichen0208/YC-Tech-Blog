import{_ as a,o as e,c as n,e as s}from"./app-T54hVois.js";const t={},i=s(`<h1 id="java-interview-questions" tabindex="-1"><a class="header-anchor" href="#java-interview-questions" aria-hidden="true">#</a> Java Interview Questions</h1><h2 id="_1-compare-jdk-vs-jvm-vs-jre" tabindex="-1"><a class="header-anchor" href="#_1-compare-jdk-vs-jvm-vs-jre" aria-hidden="true">#</a> 1. Compare JDK vs. JVM vs. JRE</h2><h3 id="jvm-java-virtual-machine" tabindex="-1"><a class="header-anchor" href="#jvm-java-virtual-machine" aria-hidden="true">#</a> JVM (Java Virtual Machine)</h3><p>This is the heart of the Java Platform. It is a virtual machine that interprets Java bytecode and executes it as native code on the host machine. JVM is a part of the Java Runtime Environment.</p><h3 id="jre-java-runtime-environment" tabindex="-1"><a class="header-anchor" href="#jre-java-runtime-environment" aria-hidden="true">#</a> JRE (Java Runtime Environment)</h3><p>JRE is the environment where Java programs run. This is the system that takes our Java code, and combines it with the necessary libraries, and starts the JVM to execute it. JRE is a part of the Java Development Kit</p><h3 id="jdk-java-development-kit" tabindex="-1"><a class="header-anchor" href="#jdk-java-development-kit" aria-hidden="true">#</a> JDK (Java Development Kit)</h3><p>This is the tool necessary to compile, document, and package Java programs. It includes JRE.</p><h2 id="_2-differences-between-c-vs-java" tabindex="-1"><a class="header-anchor" href="#_2-differences-between-c-vs-java" aria-hidden="true">#</a> 2. Differences between C++ vs. Java</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C++</h3><ul><li>Memory management is manual, developers are responsible for creating and destroying objects.</li><li>Supports multiple inheritance.</li><li>Supports pointers.</li><li>Generates platform-dependent code (code that is written for a specific operating system. For example, a C++ program compiled on a Windows system cannot run on a Linux or Mac system without being recompiled on those systems).</li></ul><h2 id="_3-wrapper-class" tabindex="-1"><a class="header-anchor" href="#_3-wrapper-class" aria-hidden="true">#</a> 3. Wrapper class</h2><ul><li>Used to convert primitive data types into objects.</li><li>Eight primitive types and their corresponding wrapper classes: <ul><li><code>byte</code> - <code>Byte</code></li><li><code>short</code> - <code>Short</code></li><li><code>int</code> - <code>Integer</code></li><li><code>long</code> - <code>Long</code></li><li><code>float</code> - <code>Float</code></li><li><code>double</code> - <code>Double</code></li><li><code>char</code> - <code>Character</code></li><li><code>boolean</code> - <code>Boolean</code></li></ul></li><li>Useful when you want to use a primitive type in a data structure that requires objects.</li></ul><h2 id="_4-string-stringbuffer-and-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_4-string-stringbuffer-and-stringbuilder" aria-hidden="true">#</a> 4. String, StringBuffer, and StringBuilder</h2><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><ul><li>Immutable class, once a <code>String</code> object is created, it cannot be changed.</li><li>If you try to alter their values, another object gets created.</li></ul><h3 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer" aria-hidden="true">#</a> StringBuffer</h3><ul><li>Mutable class, <code>StringBuffer</code> objects can be modified.</li><li>It is thread-safe, meaning it is synchronized.</li></ul><h3 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder" aria-hidden="true">#</a> StringBuilder</h3><ul><li>Mutable class, <code>StringBuilder</code> objects can be modified.</li><li>It is not thread-safe.</li><li>Faster than <code>StringBuffer</code> because it is not synchronized.</li></ul><h2 id="_5-thread-safety-and-synchronization" tabindex="-1"><a class="header-anchor" href="#_5-thread-safety-and-synchronization" aria-hidden="true">#</a> 5. Thread Safety and Synchronization</h2><h3 id="thread-safety" tabindex="-1"><a class="header-anchor" href="#thread-safety" aria-hidden="true">#</a> Thread Safety:</h3><ul><li>The property of an object that guarantees safe execution by multiple threads at the same time.</li></ul><h3 id="synchronization" tabindex="-1"><a class="header-anchor" href="#synchronization" aria-hidden="true">#</a> Synchronization:</h3><ul><li>A method to achieve thread safety in Java.</li><li>Controls access by multiple threads to shared resources.</li><li>Ensures that only one thread can access the resource at a time, preventing race conditions.</li></ul><p>Example of a synchronized method in Java:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-object-basics" tabindex="-1"><a class="header-anchor" href="#_6-object-basics" aria-hidden="true">#</a> 6. Object Basics</h2><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><ul><li>A blueprint or template for creating objects.</li><li>Contains fields (variables) and methods to describe the behavior of an object.</li></ul><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><ul><li>An instance of a class.</li><li>Has state and behavior.</li><li>The state is stored in fields, while methods display the object&#39;s behavior.</li></ul><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h3><ul><li>Created by the values assigned to the variables of an object.</li><li>Example: A <code>Dog</code> class might have state variables like <code>color</code>, <code>name</code>, <code>breed</code>.</li></ul><h3 id="behavior" tabindex="-1"><a class="header-anchor" href="#behavior" aria-hidden="true">#</a> Behavior</h3><ul><li>Exposed through methods.</li><li>Example: A <code>Dog</code> class might have methods like <code>bark()</code>, <code>eat()</code>, and <code>sleep()</code>.</li></ul><h2 id="_7-tostring-method" tabindex="-1"><a class="header-anchor" href="#_7-tostring-method" aria-hidden="true">#</a> 7. toString method</h2><ul><li>Used to get a string representation of an object.</li><li>Defined in the <code>Object</code> class, can be overridden in any class.</li><li>By default, returns a string that includes the name of the object&#39;s class and its hash code.</li><li>Common to override <code>toString()</code> to provide a more meaningful string representation of your objects.</li></ul><p>Example of overriding the <code>toString()</code> method:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> breed<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Dog{&quot;</span> <span class="token operator">+</span>
               <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
               <span class="token string">&quot;, breed=&#39;&quot;</span> <span class="token operator">+</span> breed <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
               <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-equals-and-hashcode-methods-in-java" tabindex="-1"><a class="header-anchor" href="#_8-equals-and-hashcode-methods-in-java" aria-hidden="true">#</a> 8. equals() and hashCode() methods in Java</h2><h3 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals()</h3><ul><li>Checks if two objects are equal.</li><li>By default, checks for reference equality (it returns true if two references point to the same object).</li><li>Can be overridden to check for logical equality based on the state of the objects.</li></ul><h3 id="hashcode" tabindex="-1"><a class="header-anchor" href="#hashcode" aria-hidden="true">#</a> hashCode()</h3><ul><li>Returns an integer value, generated by a hashing algorithm.</li><li>Objects that are equal (according to their <code>equals()</code> method) should return the same hash code.</li><li>Used in collections like <code>HashSet</code>, <code>HashMap</code>, etc., to find objects more efficiently.</li></ul><p><strong>while equal objects must have equal hash codes, unequal objects can also have equal hash codes. It&#39;s a one-way relationship.</strong></p><p>Example of overriding these methods:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> breed<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
               <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>breed<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>breed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> breed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-inheritance-method-overloading-and-method-overriding" tabindex="-1"><a class="header-anchor" href="#_9-inheritance-method-overloading-and-method-overriding" aria-hidden="true">#</a> 9. Inheritance, Method Overloading, and Method Overriding</h2><h3 id="inheritance" tabindex="-1"><a class="header-anchor" href="#inheritance" aria-hidden="true">#</a> Inheritance</h3><ul><li>a mechanism in which one class acquires the property of another class.</li><li>in Java, classes can be derived from other classes, thereby inheriting fields and methods from those clases.</li></ul><h3 id="method-overloading" tabindex="-1"><a class="header-anchor" href="#method-overloading" aria-hidden="true">#</a> Method Overloading</h3><ul><li>a feature in Java that allows a class to have more than one method having the same name, if their argument lists are different.</li><li>polymorphism</li><li>the arugment list could differ in number of parameters, types of parameters, or both.</li></ul><h3 id="method-overriding" tabindex="-1"><a class="header-anchor" href="#method-overriding" aria-hidden="true">#</a> Method Overriding</h3><ul><li>a feature that allows a subclass to provide a specific implementation of a method that is already provided by its superclass.</li></ul><h2 id="_10-interface" tabindex="-1"><a class="header-anchor" href="#_10-interface" aria-hidden="true">#</a> 10. Interface:</h2><ul><li>interfaces</li></ul>`,57),o=[i];function r(c,l){return e(),n("div",null,o)}const p=a(t,[["render",r],["__file","java.html.vue"]]);export{p as default};
