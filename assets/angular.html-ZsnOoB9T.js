import{_ as n,o as s,c as a,e}from"./app-OdkMsW_s.js";const t={},o=e(`<h1 id="angular" tabindex="-1"><a class="header-anchor" href="#angular" aria-hidden="true">#</a> Angular</h1><p>Angular is a popular open-source web application framework developed by Google. It&#39;s used for building single-page applications (SPAs), which are web applications or websites that interact with user by dynamically rewriting the current web page with new data from the web server, instead of the default method of the browser loading entire new pages.</p><p>Angular uses TypeScript, a statically typed superset of JavaScript, as its primary language. It provides a way to organize code using components and modules, making it a good choice for large-scale applications.</p><h2 id="install-angular-cli" tabindex="-1"><a class="header-anchor" href="#install-angular-cli" aria-hidden="true">#</a> Install Angular CLI</h2><p>We can install Angular CLI globally on our machine using npm:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g @angular/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We can verify the installation by checking the version of Angular CLI:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ng --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we are ready to create a new Angular application using the <code>ng new</code> command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ng new my-angular-app --no-standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To run our Angular application, we can use the <code>ng serve</code> command in our terminal.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ng serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="root-module-app-module-ts" tabindex="-1"><a class="header-anchor" href="#root-module-app-module-ts" aria-hidden="true">#</a> Root module - app.module.ts</h2><p>The <code>app.module.ts</code> file is the root module of an Angular application. It&#39;s where we declare which components, directives, and pipes belong to the application. It&#39;s also where we specify and register which other modules to use, such as modules from the Angular library or our own custom modules.</p><h2 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> Component</h2><h3 id="create-a-new-component-in-angular-using-cli" tabindex="-1"><a class="header-anchor" href="#create-a-new-component-in-angular-using-cli" aria-hidden="true">#</a> Create a new component in Angular using CLI</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ng g c component_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="xxx-component-ts" tabindex="-1"><a class="header-anchor" href="#xxx-component-ts" aria-hidden="true">#</a> xxx.component.ts</h3><p>The TypeScript class file <code>xxx.component.ts</code> for an Angular component serve as the initialization and configuration for the component. It&#39;s where we define the component&#39;s data(properties) and behavior (methods), and it&#39;s also where we specify metadata for the component, such as its selector and the paths to its template and style files.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-servers&quot;</span><span class="token punctuation">,</span>
  styleUrl<span class="token operator">:</span> <span class="token string">&quot;./servers.component.css&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServersComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@Component({})</code> a decorator that marks the class as an Angular component and provides meta data about the component.</li><li><code>selector: &#39;app-servers&#39;</code>: This is the CSS selector that Angular will use to identify this component in the templates. We can use <code>&lt;app-servers&gt;&lt;/app-servers&gt;</code> in our HTML to include this component.</li><li><code>styleUrl: &#39;./servers.component.css&#39;</code>: Thisis the path to the CSS file that contains styles for this component.</li></ul><h3 id="register-the-custom-components" tabindex="-1"><a class="header-anchor" href="#register-the-custom-components" aria-hidden="true">#</a> Register the custom components:</h3><p>We should first register components before using it in other components.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  declarations<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">,</span> ServerComponent<span class="token punctuation">,</span> ServersComponent<span class="token punctuation">]</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>BrowserModule<span class="token punctuation">,</span> AppRoutingModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>The component must be declared in an NgModule using the <code>declarations</code> array, and if we want to use it in another module, it must also be added to the <code>exports</code> array.</strong> we register <code>ServerComponent</code> here in <code>app.module.ts</code> file.</p><h3 id="using-the-component" tabindex="-1"><a class="header-anchor" href="#using-the-component" aria-hidden="true">#</a> Using the Component</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hi <span class="token constant">I</span> am <span class="token keyword">in</span> the App component<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>app<span class="token operator">-</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>server<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After registering it, we can call Server component <code>&lt;app-server&gt; &lt;/app-server&gt;</code> anywhere in the different components html file in the same module.</p><h2 id="data-binding" tabindex="-1"><a class="header-anchor" href="#data-binding" aria-hidden="true">#</a> Data binding:</h2><h3 id="string-interpolation" tabindex="-1"><a class="header-anchor" href="#string-interpolation" aria-hidden="true">#</a> String Interpolation</h3><p>String interpolation in Angular is a one-way data binding technique used to output data from our TypeScript code into the HTML view. We can display the data properties of a class in an Angular component&#39;s template. Angular uses double curly braces <code>{{}}</code> to bind data in one direction, from our TypeScript code to the HTML template.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  title <span class="token operator">=</span> <span class="token string">&quot;Hello Angular&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, <code>{{title}}</code> in the HTML is replaced by the value of the <code>title</code> property from the TypeScript code.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-server&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./server.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServerComponent</span> <span class="token punctuation">{</span>
  serverId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  serverStatus<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;offline&quot;</span><span class="token punctuation">;</span>

  <span class="token function">getServerStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverStatus<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Server id {{ serverId }} is {{ getServerStatus() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="property-binding" tabindex="-1"><a class="header-anchor" href="#property-binding" aria-hidden="true">#</a> Property Binding</h3><p>Property binding in Angular is a one-way data binding technique from the component to the view. It binds a DOM property (like <code>value</code>, <code>disabled</code>, <code>src</code>) to a property defined in the component&#39;s TypeScript code.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  isDisabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isDisabled<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>disabled</code> attribute of the button is bound to the <code>isDisabled</code> property in the component. The button will be disabled because <code>isDisabled</code> is <code>true</code>.</p><p>The syntax for property binding is square brackets <code>[ ]</code> around the property name on the left-hand side of an assignment. The right-hand side of the assignment is the name of the property in the component.</p><h3 id="event-binding" tabindex="-1"><a class="header-anchor" href="#event-binding" aria-hidden="true">#</a> Event binding</h3><p>Event binding in Angular is a one-way data binding from the view to the component. It&#39;s used to respond to user actions like clicks, key presses, mouse movements, etc.</p><p>We bind a DOM event to a method defined in our component&#39;s TypeScript code. When the event is triggered, the associated method is executed.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  clickMessage <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

  <span class="token function">onClickMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clickMessage <span class="token operator">=</span> <span class="token string">&quot;You clicked the button!&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClickMe()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ clickMessage }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In Angular, the <code>(click)</code> syntax is used specifically for click events. In this example, the <code>(click)</code> event on the button is bound to the <code>onClickMe()</code> method in the component. When the button is clicked, <code>onClickedMe()</code> is executed, updating <code>clickMessgae</code> which is then displayed in the view.</p><h4 id="passing-and-using-data-with-event-binding" tabindex="-1"><a class="header-anchor" href="#passing-and-using-data-with-event-binding" aria-hidden="true">#</a> Passing and using data with event binding</h4><p>In Angular, we can pass data from our view to our component when an event is triggered. This is often done by passing the event object, but we can also pass other data.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Item 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item 3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">onClick</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>let item of items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick(item)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, when an item is clicked, the <code>onClick</code> method is called with the clicked item.</p><h2 id="two-way-binding-in-angular" tabindex="-1"><a class="header-anchor" href="#two-way-binding-in-angular" aria-hidden="true">#</a> Two way binding in Angular</h2><p>Two-way data binding in Angular is a mechanism to synchronize the model and the view. Changes in the model update the view, and changes in the view update the model. Angular provides the <code>[(ngModel)]</code> directive for two-way data binding. To use <code>[(ngModel)]</code>, we need to import <code>FormsModule</code> from <code>@angular/forms</code> in our module.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>input field</code> and the <code>p</code> tag are bound to the <code>name</code> property of the component. When we type in the <code>input</code> field, the <code>name</code> property is updated, and the updated <code>name</code> is displayed in the <code>p</code> tag.</p><h2 id="directives" tabindex="-1"><a class="header-anchor" href="#directives" aria-hidden="true">#</a> Directives</h2><p>Directives are a core feature of Angular. They are classes that can manipulate the DOM by changing its layout or behavior. Directives allow us to create highly dynamic and responsive views.</p><ul><li><p><strong>Component Directives</strong>: These are the most common type of directives and are essentially classes that are declared with the <code>@Component</code> decorator. Each component we create in Angular is a directive and can encapsulate its own view and logic.</p></li><li><p><strong>Attribute Directives</strong>: These directives change the appearance or behavior of a DOM element, component, or another directive.</p></li><li><p><strong>Structural Directives</strong>: These directives change the DOM layout by adding and removing DOM elements. These are responsible for HTML layout. Examples are the built-in <code>*ngFor</code> and <code>*ngIf</code> directives.</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showDiv<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Only show if showDiv is true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>let item of items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ngif-directive" tabindex="-1"><a class="header-anchor" href="#ngif-directive" aria-hidden="true">#</a> ngIf directive</h3><p>The <code>*ngIf</code> directive in Angular is used to conditionally include or exclude a block of HTML from the DOM. The <code>*ngIf</code> directive is commonly used to output data conditionally based on the state of the component.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  showDiv <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showDiv; else elseBlock<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  This div is visible because showDiv is true
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-template</span> <span class="token attr-name">#elseBlock</span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This div is visible because showDiv is false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-template</span>
<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, if <code>showDiv</code> is <code>true</code>, the first <code>div</code> is displayed. If <code>showDiv</code> is <code>false</code>, the <code>div</code> inside the <code>ng-template</code> with the <code>#elseBlock</code> reference is displayed.</p><h3 id="ngstyle-directive" tabindex="-1"><a class="header-anchor" href="#ngstyle-directive" aria-hidden="true">#</a> ngStyle directive</h3><p>The <code>ngStyle</code> directive in Angular is used to set CSS styles conditionally. It allows us to set CSS styles dynamically, based on the conditions defined in our component.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  isSpecial <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngStyle]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{&#39;color&#39;: isSpecial ? &#39;red&#39; : &#39;black&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  This text is red if isSpecial is true, otherwise it&#39;s black
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example the color of the text in the <code>div</code> is red if <code>isSpecial</code> is <code>true</code>, and black if <code>isSpecial</code> is <code>false</code>.</p><h3 id="ngclass-directive" tabindex="-1"><a class="header-anchor" href="#ngclass-directive" aria-hidden="true">#</a> ngClass directive</h3><p>The <code>ngClass</code> directive in Angular is used to dynamically add or remove CSS classes on an HTML element. It&#39;s a powerful way to apply styles conditionally.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  isSpecial <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngClass]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{&#39;special&#39;: isSpecial}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  This div has the &#39;special&#39; class if isSpecial is true
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>div</code> will have the <code>special</code> class if <code>isSpecial</code> is <code>true</code>. If <code>isSpecial</code> is <code>false</code>, the <code>special</code> class will be removed. The <code>ngClass</code> directive is a good way to set classes dynamically, but for static classes, it&#39;s usually better to use the standard <code>class</code> attribute.</p><h3 id="ngfor-directive" tabindex="-1"><a class="header-anchor" href="#ngfor-directive" aria-hidden="true">#</a> ngFor directive</h3><p>The <code>*ngFor</code> directive in Angular is a structural directive that is used for rendering a list of items. It&#39;s similar to a <code>for</code> loop in JavaScript.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Item 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item 3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>let item of items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>*ngFor</code> directive iterates over the <code>items</code> array from the component. For each item in the array, it creates a new <code>div</code> and sets the content of the <code>div</code> to the item.</p>`,82),p=[o];function c(i,l){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","angular.html.vue"]]);export{u as default};
