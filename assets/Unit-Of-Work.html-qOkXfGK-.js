import{_ as n,o as s,c as a,e}from"./app-PpvFiBQl.js";const t={},p=e(`<h1 id="unit-of-work-pattern" tabindex="-1"><a class="header-anchor" href="#unit-of-work-pattern" aria-hidden="true">#</a> Unit-of-Work Pattern</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>The Unit-of-Work pattenr is a behavioral design pattern that faciliates the efficient tracking and management of changes to multiple entities within a transactional boundary. It serves as an essential mechanism in maintaining data consistency and integrity while optimizing database interactions.</p><h2 id="the-need-for-unit-of-work" tabindex="-1"><a class="header-anchor" href="#the-need-for-unit-of-work" aria-hidden="true">#</a> The Need for Unit-of-Work</h2><p>When dealing with complex business operations that span multiple entities and database interactions, maintaining data integrity become a challenge. In such scenarios, the Unit-of-Work pattern comes to the rescue by encapsulating these interactions and managing them as a single logical unit. This ensures that all changes are committed together or rolled back entirely in case of an error, preserving data consistency.</p><h2 id="achieving-the-objectives" tabindex="-1"><a class="header-anchor" href="#achieving-the-objectives" aria-hidden="true">#</a> Achieving the Objectives:</h2><ol><li><code>Atomic Transactions</code>: By treating multiple operations as a single unit, the UoW ensures that either all changes succeed or none of them take effect. This guarantees atomicity, preventing partial updates that could lead to data inconsistencies.</li><li><code>Performance Optimization</code>: Rather than committing each individual change separately, the Unit-Of-Work pattern consolidates the changes and performs bulk updates. This reduces the number of database round-trips, leading to significant performance improvements, especially in scenarios involving numerous data manipulations.</li><li><code>Simplified Business Logic</code>: With the Unit-of-Work pattern, developers can focus on writing business logic without worrying about managing transactional behavior.</li></ol><h2 id="impleting-the-unit-of-work-in-ef-core" tabindex="-1"><a class="header-anchor" href="#impleting-the-unit-of-work-in-ef-core" aria-hidden="true">#</a> Impleting the Unit of Work in EF Core</h2><p>Let&#39;s implement Unit of Work pattern for the example application <code>Shipping Application</code> that is responsible for creating and updating customers, orders, and shipments for ordered products. This application has the following entities:</p><ul><li>Customers</li><li>Orders, OrderItems</li><li>Shipments, ShipmentItems</li></ul><h3 id="entity-classes" tabindex="-1"><a class="header-anchor" href="#entity-classes" aria-hidden="true">#</a> Entity classes</h3><p><strong>Customer class:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PhoneNumber <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> Orders <span class="token operator">=&gt;</span> _orders<span class="token punctuation">.</span><span class="token function">AsReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> _orders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Customer</span> <span class="token function">Create</span><span class="token punctuation">(</span>
        <span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">string</span></span> phoneNumber<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span>
        <span class="token punctuation">{</span>
            Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            FirstName <span class="token operator">=</span> firstName<span class="token punctuation">,</span>
            LastName <span class="token operator">=</span> lastName<span class="token punctuation">,</span>
            Email <span class="token operator">=</span> email<span class="token punctuation">,</span>
            PhoneNumber <span class="token operator">=</span> phoneNumber
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _orders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Order Class</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OrderNumber <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> CustomerId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Customer</span> Customer <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> Date <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&lt;</span>OrderItem<span class="token punctuation">&gt;</span></span> Items <span class="token operator">=&gt;</span> _items<span class="token punctuation">.</span><span class="token function">AsReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>OrderItem<span class="token punctuation">&gt;</span></span> _items <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Order</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> orderNumber<span class="token punctuation">,</span> <span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>OrderItem<span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
        <span class="token punctuation">{</span>
            Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            OrderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">,</span>
            Customer <span class="token operator">=</span> customer<span class="token punctuation">,</span>
            CustomerId <span class="token operator">=</span> customer<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
            Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">AddItems</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name">Order</span> <span class="token function">AddItems</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>OrderItem<span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _items<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>Controlled Object Creation</code>: By setting the constructor to <code>private</code>, we prevent external code from instantiating the <code>Order</code> object directly. This means that the only way to create an <code>Order</code> object is through the static <code>Create</code> method, which ensures that the object is always created in a valid state.</p></li><li><p>The <code>Create</code> method acts as a factory that enforces domain rules when constructing the <code>Order</code>. For example, it ensures that the <code>Customer</code> is provided, and the <code>OrderNumber</code> is valid when creating the object. This guarantees that an <code>Order</code> cannot be created in an incomplete or inconsistent state, which could happen if a public constructor where used.</p></li></ul><p><strong>OrderItem class</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderItem</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Product <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Quantity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Order</span> Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">OrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">OrderItem</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> productName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> quantity<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Product <span class="token operator">=</span> productName<span class="token punctuation">;</span>
        Quantity <span class="token operator">=</span> quantity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interfaces" tabindex="-1"><a class="header-anchor" href="#interfaces" aria-hidden="true">#</a> interfaces</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICustomerRepository</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task</span> <span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task</span> <span class="token function">UpdateAsync</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetByIdAsync</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> customerId<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">ExistsByEmailAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrderRepository</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task</span> <span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task</span> <span class="token function">UpdateAsync</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Order<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetByNumberAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> orderNumber<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">ExistsByNumberAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> orderNumber<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IShipmentRepository</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">ExistsByOrderIdAsync</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> orderId<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task</span> <span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token class-name">Shipment</span> shipment<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Shipment<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetByNumberAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> shipmentNumber<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scenario" tabindex="-1"><a class="header-anchor" href="#scenario" aria-hidden="true">#</a> Scenario</h2><p>When creating an order, we also need to create a respective shipment, we need to have both operations atomic. If we implement two database calls, we can end up with inconsistent data if an order is created in the database and shipment is not:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> shipmentRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>shipment<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In such a case, we can use <code>IUnitOfWork</code> to solve our consistency problem. Let&#39;s implement it. First, we need to define <code>IUnitOfWork</code> interface:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUnitOfWork</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="build-the-unit-of-work" tabindex="-1"><a class="header-anchor" href="#build-the-unit-of-work" aria-hidden="true">#</a> Build the Unit of Work</h2><p>Use EF Core DbContext as it already implements the <code>IUnitOfWork</code> pattern out of the box.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShippingDbContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions<span class="token punctuation">&lt;</span>ShippingDbContext<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span>
    <span class="token punctuation">:</span> <span class="token function">DbContext</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">,</span> IUnitOfWork
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Shipment<span class="token punctuation">&gt;</span></span> Shipments <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>ShipmentItem<span class="token punctuation">&gt;</span></span> ShipmentItems <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> Orders <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span> Customers <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnModelCreating</span><span class="token punctuation">(</span>modelBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        modelBuilder<span class="token punctuation">.</span><span class="token function">HasDefaultSchema</span><span class="token punctuation">(</span><span class="token string">&quot;shipping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        modelBuilder<span class="token punctuation">.</span><span class="token function">ApplyConfigurationsFromAssembly</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ShippingDbContext</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We need to register the <code>IUnitOfWork</code> interface and resolve the <code>ShippingDbContext</code> from the current scope:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUnitOfWork<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ShippingDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now let&#39;s rework the <code>AddAsync</code> methods of all our repositories and remove the <code>SaveChangesAsync</code> call to the DbContext:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The saving changes is delegated to our <code>Unit of Work</code>, we can update our code as follows:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> shipmentRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>shipment<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The main idea is that all repositories make corresponding changes in the EF Core&#39;s <strong>Change Tracker</strong> and UnitOfWork saves them all in a single atomic transaction.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ErrorOr<span class="token punctuation">&lt;</span>OrderResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span>
    <span class="token class-name">CreateOrderCommand</span> request<span class="token punctuation">,</span>
    <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">await</span> customerRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>CustomerId<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>customer <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token string">&quot;Customer with ID &#39;{CustomerId}&#39; does not exist&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>CustomerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Error<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Customer with ID &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>CustomerId</span><span class="token punctuation">}</span></span><span class="token string">&#39; does not exist&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> Order<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>
        <span class="token named-parameter punctuation">orderNumber</span><span class="token punctuation">:</span> <span class="token function">GenerateNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        customer<span class="token punctuation">,</span>
        request<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderItem</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>ProductName<span class="token punctuation">,</span> x<span class="token punctuation">.</span>Quantity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> shipment <span class="token operator">=</span> Shipment<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>
        <span class="token named-parameter punctuation">number</span><span class="token punctuation">:</span> <span class="token function">GenerateNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">orderId</span><span class="token punctuation">:</span> order<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">address</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>ShippingAddress<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">carrier</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>Carrier<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">receiverEmail</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>ReceiverEmail<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">items</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> shipmentItems <span class="token operator">=</span> <span class="token function">CreateShipmentItems</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">,</span> shipment<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shipment<span class="token punctuation">.</span><span class="token function">AddItems</span><span class="token punctuation">(</span>shipmentItems<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> shipmentRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>shipment<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Created order: {@Order} with shipment: {@Shipment}&quot;</span><span class="token punctuation">,</span> order<span class="token punctuation">,</span> shipment<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">MapToResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In our application, we could have a use case when a new customer makes on order on the website, and we need to:</p><ul><li>Create customer</li><li>Create an order with order items</li><li>Create shipment with ship items</li></ul><p>in a single operation.</p><p>With a UnitOfWork pattern it will be as easy as the following:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> customerRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> orderRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> shipmentRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>shipment<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><p>In simple terms, the <code>SaveChangesAsync()</code> method is typically moved into the <code>Unit of Work</code> in the Unit of Work pattern to manage the final <code>commit</code> of changes made to entities. This means that instead of calling <code>SaveChangesAsync()</code> directly on the repository or entity, we call it through the Unit of Work to ensure all changes are tracked and persisted together in a single transaction.</p>`,43),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Unit-Of-Work.html.vue"]]);export{r as default};
