const e=JSON.parse('{"key":"v-02ac8e5d","path":"/backend/oop.html","title":"OOP","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-02-25T00:00:00.000Z","category":["backend"],"tag":["C#","OOP"],"description":"OOP Object Oriented Programming in C#: Classes: A class defines the structure using methods(behavior) and properties(data) that is like the blueprint for creating objects. Methods: a method performs a specific task and represents a particular behavior.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/YC-Tech-Blog/backend/oop.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"OOP"}],["meta",{"property":"og:description","content":"OOP Object Oriented Programming in C#: Classes: A class defines the structure using methods(behavior) and properties(data) that is like the blueprint for creating objects. Methods: a method performs a specific task and represents a particular behavior."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-28T08:28:49.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"OOP"}],["meta",{"property":"article:published_time","content":"2024-02-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-28T08:28:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OOP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-28T08:28:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Object Oriented Programming in C#:","slug":"object-oriented-programming-in-c","link":"#object-oriented-programming-in-c","children":[]},{"level":2,"title":"Abstraction:","slug":"abstraction","link":"#abstraction","children":[{"level":3,"title":"What is the difference between abstract class and interface in C#?","slug":"what-is-the-difference-between-abstract-class-and-interface-in-c","link":"#what-is-the-difference-between-abstract-class-and-interface-in-c","children":[]}]},{"level":2,"title":"Encapsulation","slug":"encapsulation","link":"#encapsulation","children":[{"level":3,"title":"key concepts related to encapsulation:","slug":"key-concepts-related-to-encapsulation","link":"#key-concepts-related-to-encapsulation","children":[]}]},{"level":2,"title":"What is the difference between abstraction and encapsulation?","slug":"what-is-the-difference-between-abstraction-and-encapsulation","link":"#what-is-the-difference-between-abstraction-and-encapsulation","children":[]},{"level":2,"title":"Inheritance:","slug":"inheritance","link":"#inheritance","children":[{"level":3,"title":"Roles of Access Modifiers in Inheritance","slug":"roles-of-access-modifiers-in-inheritance","link":"#roles-of-access-modifiers-in-inheritance","children":[]},{"level":3,"title":"Important Points:","slug":"important-points","link":"#important-points","children":[]}]},{"level":2,"title":"Polymorphism:","slug":"polymorphism","link":"#polymorphism","children":[{"level":3,"title":"Compile-time Polymorphism (Method Overloading):","slug":"compile-time-polymorphism-method-overloading","link":"#compile-time-polymorphism-method-overloading","children":[]},{"level":3,"title":"Runtime Polymorphism: Method Overriding:","slug":"runtime-polymorphism-method-overriding","link":"#runtime-polymorphism-method-overriding","children":[]}]},{"level":2,"title":"Solid Principles","slug":"solid-principles","link":"#solid-principles","children":[{"level":3,"title":"Single Responsilbity Principle:","slug":"single-responsilbity-principle","link":"#single-responsilbity-principle","children":[]},{"level":3,"title":"Open-Closed Principle","slug":"open-closed-principle","link":"#open-closed-principle","children":[]},{"level":3,"title":"Liskov Subsitition Principle","slug":"liskov-subsitition-principle","link":"#liskov-subsitition-principle","children":[]},{"level":3,"title":"Interface Segregation Principle","slug":"interface-segregation-principle","link":"#interface-segregation-principle","children":[]},{"level":3,"title":"Dependency Inversion Principle:","slug":"dependency-inversion-principle","link":"#dependency-inversion-principle","children":[]}]}],"git":{"createdTime":1708847341000,"updatedTime":1709108929000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":2}]},"readingTime":{"minutes":3.5,"words":1050},"filePathRelative":"backend/oop.md","localizedDate":"February 25, 2024","excerpt":"<h1> OOP</h1>\\n<h2> Object Oriented Programming in C#:</h2>\\n<ul>\\n<li>\\n<p><strong>Classes</strong>: A class defines the structure using methods(behavior) and properties(data) that is like the blueprint for creating objects.</p>\\n</li>\\n<li>\\n<p><strong>Methods</strong>: a method performs a specific task and represents a particular behavior.</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
