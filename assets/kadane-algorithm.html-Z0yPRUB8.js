import{_ as a,o as n,c as s,e}from"./app-UPe_jAkp.js";const t={},o=e(`<h1 id="kadane-s-algorithm" tabindex="-1"><a class="header-anchor" href="#kadane-s-algorithm" aria-hidden="true">#</a> Kadane&#39;s Algorithm</h1><h2 id="what-is-kadane-s-algorithm" tabindex="-1"><a class="header-anchor" href="#what-is-kadane-s-algorithm" aria-hidden="true">#</a> What is Kadane&#39;s algorithm</h2><p>Kadane&#39;s algorithm is a greedy/dynamic programming algorithm that can be used on array problems to bring time complexity down to O(n). It is used to calculate the maximum sum subarray ending at a particular position.</p><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a> How it works</h2><p>The algorithm works by maintaining a running sum of the array elements, and at each step, it decides whether to extend the current subarray or start a new one. The maximum sum of all subarrays seen so far is kept as the result.</p><h2 id="base-code-template" tabindex="-1"><a class="header-anchor" href="#base-code-template" aria-hidden="true">#</a> base code template</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> maxSoFar <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxEndingHere <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxEndingHere <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxEndingHere <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxSoFar <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSoFar<span class="token punctuation">,</span> maxEndingHere<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> maxSoFar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>In this code, <code>maxSoFar</code> is the maximum sum of a subarray seen so far, and <code>maxEndingHere</code> is the maximum sum of a subarray ending at the current position.</li><li>At each step, <code>maxEndingHere</code> is updated to be the maximum of <code>maxEndingHere + nums[i]</code> and <code>nums[i]</code>, and <code>maxSoFar</code> is updated to be the maximum of <code>maxSoFar</code> amd <code>maxEndingHere</code>.</li></ul><h2 id="time-complexity-o-n" tabindex="-1"><a class="header-anchor" href="#time-complexity-o-n" aria-hidden="true">#</a> Time Complexity: <strong>O(n)</strong></h2><p>The time complexity of Kadane&#39;s algorithm is O(n), where n is the length of the array, because it processes each element of the array exactly once.</p><h2 id="space-complexity-o-1" tabindex="-1"><a class="header-anchor" href="#space-complexity-o-1" aria-hidden="true">#</a> Space Complexity: <strong>O(1)</strong></h2><p>It only uses a constant amount of space to store variables <code>maxSoFar</code> and <code>maxEndingHere</code>.</p><h2 id="when-should-we-apply-kadane-s-algorithm" tabindex="-1"><a class="header-anchor" href="#when-should-we-apply-kadane-s-algorithm" aria-hidden="true">#</a> When should we apply Kadane&#39;s Algorithm</h2><ul><li><strong>Maximum Subarray</strong></li><li><strong>Maximum Sum Circular Subarray</strong></li><li><strong>Longest Turbulent Array</strong></li></ul>`,14),i=[o];function p(c,r){return n(),s("div",null,i)}const u=a(t,[["render",p],["__file","kadane-algorithm.html.vue"]]);export{u as default};
