const e=JSON.parse(`{"key":"v-36d583e0","path":"/interview-prep/cheatsheet.html","title":"1. StringBuilder:","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-12-10T00:00:00.000Z","category":["interview"],"tag":["Cheatsheet","Java"],"description":"1. StringBuilder: append in StringBuilder: The append() method appends the provided data to the end of StringBuilder. We can chain multiple append() calls together to build a string step by step. StringBuilder sb = new StringBuilder(); sb.append(\\"Hello, \\"); sb.append('W'); sb.append(42);","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/interview-prep/cheatsheet.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"1. StringBuilder:"}],["meta",{"property":"og:description","content":"1. StringBuilder: append in StringBuilder: The append() method appends the provided data to the end of StringBuilder. We can chain multiple append() calls together to build a string step by step. StringBuilder sb = new StringBuilder(); sb.append(\\"Hello, \\"); sb.append('W'); sb.append(42);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-12-17T05:56:36.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"Cheatsheet"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-17T05:56:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. StringBuilder:\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-17T05:56:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"append in StringBuilder:","slug":"append-in-stringbuilder","link":"#append-in-stringbuilder","children":[]},{"level":3,"title":"insert in StringBuilder:","slug":"insert-in-stringbuilder","link":"#insert-in-stringbuilder","children":[]},{"level":3,"title":"setCharAt:","slug":"setcharat","link":"#setcharat","children":[]},{"level":3,"title":"delete():","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"deleteCharAt():","slug":"deletecharat","link":"#deletecharat","children":[]},{"level":3,"title":"replace():","slug":"replace","link":"#replace","children":[]},{"level":3,"title":"substring():","slug":"substring","link":"#substring","children":[]},{"level":3,"title":"reverse():","slug":"reverse","link":"#reverse","children":[]},{"level":3,"title":"length():","slug":"length","link":"#length","children":[]},{"level":3,"title":"Using String.valueOf():","slug":"using-string-valueof","link":"#using-string-valueof","children":[]},{"level":3,"title":"Using Integer.valueOf():","slug":"using-integer-valueof","link":"#using-integer-valueof","children":[]},{"level":3,"title":"Using Double.valueOf():","slug":"using-double-valueof","link":"#using-double-valueof","children":[]},{"level":3,"title":"Sorting Arrays of Primitive Data Types:","slug":"sorting-arrays-of-primitive-data-types","link":"#sorting-arrays-of-primitive-data-types","children":[]},{"level":3,"title":"Custom Comparator for Objects:","slug":"custom-comparator-for-objects","link":"#custom-comparator-for-objects","children":[]},{"level":3,"title":"Sorting Lists of Objects:","slug":"sorting-lists-of-objects","link":"#sorting-lists-of-objects","children":[]},{"level":3,"title":"Custom Comparator for Lists of Objects:","slug":"custom-comparator-for-lists-of-objects","link":"#custom-comparator-for-lists-of-objects","children":[]},{"level":3,"title":"containsKey(key):","slug":"containskey-key","link":"#containskey-key","children":[]},{"level":3,"title":"containsValue(value):","slug":"containsvalue-value","link":"#containsvalue-value","children":[]},{"level":3,"title":"remove(key):","slug":"remove-key","link":"#remove-key","children":[]},{"level":3,"title":"size():","slug":"size","link":"#size","children":[]},{"level":3,"title":"isEmpty():","slug":"isempty","link":"#isempty","children":[]},{"level":3,"title":"iterate through hashmap:","slug":"iterate-through-hashmap","link":"#iterate-through-hashmap","children":[]},{"level":3,"title":"iterate through keys:","slug":"iterate-through-keys","link":"#iterate-through-keys","children":[]},{"level":3,"title":"get the value or the default value in HashMap:","slug":"get-the-value-or-the-default-value-in-hashmap","link":"#get-the-value-or-the-default-value-in-hashmap","children":[]},{"level":3,"title":"methods in Hashset:","slug":"methods-in-hashset","link":"#methods-in-hashset","children":[]},{"level":3,"title":"initialization:","slug":"initialization","link":"#initialization","children":[]},{"level":3,"title":"methods in stack:","slug":"methods-in-stack","link":"#methods-in-stack","children":[]},{"level":3,"title":"stack initialization:","slug":"stack-initialization","link":"#stack-initialization","children":[]},{"level":3,"title":"methods in queue:","slug":"methods-in-queue","link":"#methods-in-queue","children":[]},{"level":3,"title":"initialization in queue:","slug":"initialization-in-queue","link":"#initialization-in-queue","children":[]},{"level":3,"title":"Math.ceil():","slug":"math-ceil","link":"#math-ceil","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1702349502000,"updatedTime":1702792596000,"contributors":[{"name":"youweichen0208","email":"youweichen0208@gmail.com","commits":5}]},"readingTime":{"minutes":4.86,"words":1459},"filePathRelative":"interview-prep/cheatsheet.md","localizedDate":"December 10, 2023","excerpt":"<h1> 1. StringBuilder:</h1>\\n<h3> append in StringBuilder:</h3>\\n<p>The <code>append()</code> method appends the provided data to the end of <code>StringBuilder</code>. We can chain multiple <code>append()</code> calls together to build a string step by step.</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">StringBuilder</span> sb <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">StringBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nsb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello, \\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nsb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">'W'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nsb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
