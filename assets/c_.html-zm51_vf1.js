const e=JSON.parse('{"key":"v-13e19969","path":"/backend/c_.html","title":"C# and .NET CORE","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-02-19T00:00:00.000Z","category":["backend"],"tag":["C#",".net"],"description":"C# and .NET CORE Common Type System The common type system defines how types are declared, used, and managed in the runtime. Establishes a framework that enables cross-language integration, type safety, and high performance code. The common type system supports two types: Value Types (bool, char, enum, struct, DateTime) Reference Types (classes, arrays, delegates, interfaces)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend/c_.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"C# and .NET CORE"}],["meta",{"property":"og:description","content":"C# and .NET CORE Common Type System The common type system defines how types are declared, used, and managed in the runtime. Establishes a framework that enables cross-language integration, type safety, and high performance code. The common type system supports two types: Value Types (bool, char, enum, struct, DateTime) Reference Types (classes, arrays, delegates, interfaces)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-25T19:28:32.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".net"}],["meta",{"property":"article:published_time","content":"2024-02-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-25T19:28:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# and .NET CORE\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-25T19:28:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Common Type System","slug":"common-type-system","link":"#common-type-system","children":[{"level":3,"title":"Value types vs. Reference type","slug":"value-types-vs-reference-type","link":"#value-types-vs-reference-type","children":[]}]},{"level":2,"title":"How to differentiate value types and reference types:","slug":"how-to-differentiate-value-types-and-reference-types","link":"#how-to-differentiate-value-types-and-reference-types","children":[]},{"level":2,"title":"Primitive data types in C#:","slug":"primitive-data-types-in-c","link":"#primitive-data-types-in-c","children":[{"level":3,"title":"Notice abut decimal number: float and double:","slug":"notice-abut-decimal-number-float-and-double","link":"#notice-abut-decimal-number-float-and-double","children":[]}]},{"level":2,"title":"Identifiers:","slug":"identifiers","link":"#identifiers","children":[]},{"level":2,"title":"String:","slug":"string","link":"#string","children":[]},{"level":2,"title":"StringBuilder","slug":"stringbuilder","link":"#stringbuilder","children":[]},{"level":2,"title":"String vs. StringBuilder","slug":"string-vs-stringbuilder","link":"#string-vs-stringbuilder","children":[]},{"level":2,"title":"Garbage Collection","slug":"garbage-collection","link":"#garbage-collection","children":[]},{"level":2,"title":"Acess Modifiers:","slug":"acess-modifiers","link":"#acess-modifiers","children":[{"level":3,"title":"public: members can be accessed anywhere","slug":"public-members-can-be-accessed-anywhere","link":"#public-members-can-be-accessed-anywhere","children":[]},{"level":3,"title":"private: members can be accessed only in current class.","slug":"private-members-can-be-accessed-only-in-current-class","link":"#private-members-can-be-accessed-only-in-current-class","children":[]},{"level":3,"title":"internal: members can be accessed in current assembly.","slug":"internal-members-can-be-accessed-in-current-assembly","link":"#internal-members-can-be-accessed-in-current-assembly","children":[]},{"level":3,"title":"protected: members can be accessed in current class and children class","slug":"protected-members-can-be-accessed-in-current-class-and-children-class","link":"#protected-members-can-be-accessed-in-current-class-and-children-class","children":[]}]},{"level":2,"title":"Modes of parameter passing:","slug":"modes-of-parameter-passing","link":"#modes-of-parameter-passing","children":[{"level":3,"title":"The difference between ref and out:","slug":"the-difference-between-ref-and-out","link":"#the-difference-between-ref-and-out","children":[]}]},{"level":2,"title":"Enum in C#","slug":"enum-in-c","link":"#enum-in-c","children":[]},{"level":2,"title":"using:","slug":"using","link":"#using","children":[]},{"level":2,"title":"? symbol","slug":"symbol","link":"#symbol","children":[]},{"level":2,"title":"Namespace","slug":"namespace","link":"#namespace","children":[]},{"level":2,"title":"Boxing and Unboxing in C#","slug":"boxing-and-unboxing-in-c","link":"#boxing-and-unboxing-in-c","children":[{"level":3,"title":"Boxing process:","slug":"boxing-process","link":"#boxing-process","children":[]}]},{"level":2,"title":"What is the point of boxing and unboxing in C#?","slug":"what-is-the-point-of-boxing-and-unboxing-in-c","link":"#what-is-the-point-of-boxing-and-unboxing-in-c","children":[]},{"level":2,"title":"Default parameter in C#","slug":"default-parameter-in-c","link":"#default-parameter-in-c","children":[]},{"level":2,"title":"Obsolete in C#","slug":"obsolete-in-c","link":"#obsolete-in-c","children":[]},{"level":2,"title":"Anonymous Type:","slug":"anonymous-type","link":"#anonymous-type","children":[{"level":3,"title":"Creating an anonymous type:","slug":"creating-an-anonymous-type","link":"#creating-an-anonymous-type","children":[]},{"level":3,"title":"Points to remember:","slug":"points-to-remember","link":"#points-to-remember","children":[]}]},{"level":2,"title":"Array vs. ArrayList","slug":"array-vs-arraylist","link":"#array-vs-arraylist","children":[]},{"level":2,"title":"Non-Generic Collections vs. Generic Collections:","slug":"non-generic-collections-vs-generic-collections","link":"#non-generic-collections-vs-generic-collections","children":[{"level":3,"title":"Non-Generic Collections:","slug":"non-generic-collections","link":"#non-generic-collections","children":[]},{"level":3,"title":"Generic Collections:","slug":"generic-collections","link":"#generic-collections","children":[]}]},{"level":2,"title":"Explain the concept of \\"generics\\" in C#?","slug":"explain-the-concept-of-generics-in-c","link":"#explain-the-concept-of-generics-in-c","children":[]},{"level":2,"title":"IEnumerable vs. IQueryable","slug":"ienumerable-vs-iqueryable","link":"#ienumerable-vs-iqueryable","children":[{"level":3,"title":"IEnumerable","slug":"ienumerable","link":"#ienumerable","children":[]},{"level":3,"title":"IQueryable","slug":"iqueryable","link":"#iqueryable","children":[]},{"level":3,"title":"Key Differences:","slug":"key-differences","link":"#key-differences","children":[]}]},{"level":2,"title":"Extension Methods:","slug":"extension-methods","link":"#extension-methods","children":[{"level":3,"title":"Examples of Built-in Extention Methods:","slug":"examples-of-built-in-extention-methods","link":"#examples-of-built-in-extention-methods","children":[]}]},{"level":2,"title":"Creating Custom Extension Methods:","slug":"creating-custom-extension-methods","link":"#creating-custom-extension-methods","children":[]},{"level":2,"title":"Exception:","slug":"exception","link":"#exception","children":[{"level":3,"title":"Exception Handling in C#:","slug":"exception-handling-in-c","link":"#exception-handling-in-c","children":[]},{"level":3,"title":"Throwing Exceptions:","slug":"throwing-exceptions","link":"#throwing-exceptions","children":[]},{"level":3,"title":"Custom Exceptions:","slug":"custom-exceptions","link":"#custom-exceptions","children":[]}]}],"git":{"createdTime":1708714131000,"updatedTime":1716665312000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":5}]},"readingTime":{"minutes":10.63,"words":3188},"filePathRelative":"backend/c#.md","localizedDate":"February 19, 2024","excerpt":"<h1> C# and .NET CORE</h1>\\n<h2> Common Type System</h2>\\n<ul>\\n<li>The common type system defines how types are declared, used, and managed in the runtime.</li>\\n<li>Establishes a framework that enables cross-language integration, type safety, and high performance code.</li>\\n<li>The common type system supports two types:\\n<ul>\\n<li>\\n<ol>\\n<li>Value Types (<code>bool</code>, <code>char</code>, <code>enum</code>, <code>struct</code>, <code>DateTime</code>)</li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"2\\">\\n<li>Reference Types (classes, arrays, delegates, interfaces)</li>\\n</ol>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
