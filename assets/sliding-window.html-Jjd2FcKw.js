import{_ as e,o as i,c as a,e as n}from"./app-1lObjR9t.js";const o={},t=n(`<h1 id="sliding-window" tabindex="-1"><a class="header-anchor" href="#sliding-window" aria-hidden="true">#</a> Sliding Window</h1><h3 id="_1-when-should-we-use-sliding-window" tabindex="-1"><a class="header-anchor" href="#_1-when-should-we-use-sliding-window" aria-hidden="true">#</a> 1. When should we use sliding window?</h3><ol><li>the problem will either explicitly or implicitly define criteria that make a subarray &quot;valid&quot;: <ol><li>constraint metric: asking for attributes of a subarray. It could be the sum, the number of unique elements, the frequency of a specific element, or any other attribute.</li><li>a numeric restriction on the constraint metric. This is what the constraint metric should be for a subarray to be considered valid.</li></ol></li><li>the problem will ask you to find valid subarrays in some way. <ol><li>the most common task you will see is finding the best valid subarray. The problem will define what makes a subarray better than another. For example, a problem might ask you to find the longest valid subarray.</li><li>another common task is finding the number of valid subarrays.</li></ol></li></ol><h3 id="_2-pseudocode-for-a-general-template" tabindex="-1"><a class="header-anchor" href="#_2-pseudocode-for-a-general-template" aria-hidden="true">#</a> 2. pseudocode for a general template:</h3><div class="language-pseudocode line-numbers-mode" data-ext="pseudocode"><pre class="language-pseudocode"><code>function fn(arr):
    left = 0
    for (int right = 0; right &lt; arr.length; right++):
        Do some logic to &quot;add&quot; element at arr[right] to window

        while WINDOW_IS_INVALID:
            Do some logic to &quot;remove&quot; element at arr[left] from window
            left++
        Do some logic to update the answer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),l=[t];function r(s,d){return i(),a("div",null,l)}const u=e(o,[["render",r],["__file","sliding-window.html.vue"]]);export{u as default};
