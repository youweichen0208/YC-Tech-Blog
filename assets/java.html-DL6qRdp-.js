const e=JSON.parse(`{"key":"v-b29d5f4c","path":"/interview-prep/java.html","title":"Java Interview Questions","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-12-13T00:00:00.000Z","category":["interview"],"tag":["Java"],"star":true,"sticky":true,"description":"Java Interview Questions Core Java: Basics of Java Interview Questions What do you understand by Java virtual machine? Java Virtual Machine is a virtual machine that enables the computer to run the Java program. JVM acts like a run-time engine which calls the main method present in the Java code. JVM is a part of the JRE (Java Runtime Environment). The Java code is compiled by JVM to be a Bytecode which is machine independent.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/YC-Tech-Blog/interview-prep/java.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Java Interview Questions"}],["meta",{"property":"og:description","content":"Java Interview Questions Core Java: Basics of Java Interview Questions What do you understand by Java virtual machine? Java Virtual Machine is a virtual machine that enables the computer to run the Java program. JVM acts like a run-time engine which calls the main method present in the Java code. JVM is a part of the JRE (Java Runtime Environment). The Java code is compiled by JVM to be a Bytecode which is machine independent."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-29T20:39:53.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-12-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-29T20:39:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Interview Questions\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-29T20:39:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Core Java: Basics of Java Interview Questions","slug":"core-java-basics-of-java-interview-questions","link":"#core-java-basics-of-java-interview-questions","children":[{"level":3,"title":"What do you understand by Java virtual machine?","slug":"what-do-you-understand-by-java-virtual-machine","link":"#what-do-you-understand-by-java-virtual-machine","children":[]},{"level":3,"title":"Compare JDK vs. JVM vs. JRE","slug":"compare-jdk-vs-jvm-vs-jre","link":"#compare-jdk-vs-jvm-vs-jre","children":[]},{"level":3,"title":"How many types of memory areas are allocated by JVM?","slug":"how-many-types-of-memory-areas-are-allocated-by-jvm","link":"#how-many-types-of-memory-areas-are-allocated-by-jvm","children":[]},{"level":3,"title":"What is JIT compiler?","slug":"what-is-jit-compiler","link":"#what-is-jit-compiler","children":[]},{"level":3,"title":"What is classloader?","slug":"what-is-classloader","link":"#what-is-classloader","children":[]},{"level":3,"title":"What is the default value of the local variables?","slug":"what-is-the-default-value-of-the-local-variables","link":"#what-is-the-default-value-of-the-local-variables","children":[]},{"level":3,"title":"What are the advantages of packages in Java?","slug":"what-are-the-advantages-of-packages-in-java","link":"#what-are-the-advantages-of-packages-in-java","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts:","slug":"core-java-oops-concepts","link":"#core-java-oops-concepts","children":[{"level":3,"title":"What are the main features of OOP?","slug":"what-are-the-main-features-of-oop","link":"#what-are-the-main-features-of-oop","children":[]},{"level":3,"title":"What is an object?","slug":"what-is-an-object","link":"#what-is-an-object","children":[]},{"level":3,"title":"What is the difference between an object-oriented programming language and object-based programming language?","slug":"what-is-the-difference-between-an-object-oriented-programming-language-and-object-based-programming-language","link":"#what-is-the-difference-between-an-object-oriented-programming-language-and-object-based-programming-language","children":[]},{"level":3,"title":"What will be the initial value of an object reference which is defined as an instance variable?","slug":"what-will-be-the-initial-value-of-an-object-reference-which-is-defined-as-an-instance-variable","link":"#what-will-be-the-initial-value-of-an-object-reference-which-is-defined-as-an-instance-variable","children":[]}]},{"level":2,"title":"Core Java - OOP Concepts: Constructor Interview Questions:","slug":"core-java-oop-concepts-constructor-interview-questions","link":"#core-java-oop-concepts-constructor-interview-questions","children":[{"level":3,"title":"What is a constructor?","slug":"what-is-a-constructor","link":"#what-is-a-constructor","children":[]},{"level":3,"title":"Is constructor inherited?","slug":"is-constructor-inherited","link":"#is-constructor-inherited","children":[]},{"level":3,"title":"Can you make a constructor final?","slug":"can-you-make-a-constructor-final","link":"#can-you-make-a-constructor-final","children":[]},{"level":3,"title":"Can we overload the constructors?","slug":"can-we-overload-the-constructors","link":"#can-we-overload-the-constructors","children":[]},{"level":3,"title":"What are the differences between constructors and methods?","slug":"what-are-the-differences-between-constructors-and-methods","link":"#what-are-the-differences-between-constructors-and-methods","children":[]},{"level":3,"title":"What are the various access specifiers in Java?","slug":"what-are-the-various-access-specifiers-in-java","link":"#what-are-the-various-access-specifiers-in-java","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: static keyword Interview Questions:","slug":"core-java-oops-concepts-static-keyword-interview-questions","link":"#core-java-oops-concepts-static-keyword-interview-questions","children":[{"level":3,"title":"What is the static variable?","slug":"what-is-the-static-variable","link":"#what-is-the-static-variable","children":[]},{"level":3,"title":"What is the static method?","slug":"what-is-the-static-method","link":"#what-is-the-static-method","children":[]},{"level":3,"title":"What are the restrictions that are applied to the Java static methods?","slug":"what-are-the-restrictions-that-are-applied-to-the-java-static-methods","link":"#what-are-the-restrictions-that-are-applied-to-the-java-static-methods","children":[]},{"level":3,"title":"Why is the main method static?","slug":"why-is-the-main-method-static","link":"#why-is-the-main-method-static","children":[]},{"level":3,"title":"Can we override the static methods?","slug":"can-we-override-the-static-methods","link":"#can-we-override-the-static-methods","children":[]},{"level":3,"title":"What is the static block?","slug":"what-is-the-static-block","link":"#what-is-the-static-block","children":[]},{"level":3,"title":"Can we execute a program without main() method?","slug":"can-we-execute-a-program-without-main-method","link":"#can-we-execute-a-program-without-main-method","children":[]},{"level":3,"title":"What is the difference between static(class) method and instance method?","slug":"what-is-the-difference-between-static-class-method-and-instance-method","link":"#what-is-the-difference-between-static-class-method-and-instance-method","children":[]},{"level":3,"title":"Can we make constructors static?","slug":"can-we-make-constructors-static","link":"#can-we-make-constructors-static","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: Inheritance Interview Questions:","slug":"core-java-oops-concepts-inheritance-interview-questions","link":"#core-java-oops-concepts-inheritance-interview-questions","children":[{"level":3,"title":"Can we assign the reference to this variable?","slug":"can-we-assign-the-reference-to-this-variable","link":"#can-we-assign-the-reference-to-this-variable","children":[]},{"level":3,"title":"Can this keyword be used to refer static members?","slug":"can-this-keyword-be-used-to-refer-static-members","link":"#can-this-keyword-be-used-to-refer-static-members","children":[]},{"level":3,"title":"What is the Inheritance?","slug":"what-is-the-inheritance","link":"#what-is-the-inheritance","children":[]},{"level":3,"title":"Why is Inheritance used in Java?","slug":"why-is-inheritance-used-in-java","link":"#why-is-inheritance-used-in-java","children":[]},{"level":3,"title":"Which class is the superclass for all the classes?","slug":"which-class-is-the-superclass-for-all-the-classes","link":"#which-class-is-the-superclass-for-all-the-classes","children":[]},{"level":3,"title":"What is aggregation?","slug":"what-is-aggregation","link":"#what-is-aggregation","children":[]},{"level":3,"title":"What is composition?","slug":"what-is-composition","link":"#what-is-composition","children":[]},{"level":3,"title":"Why does Java not support pointers?","slug":"why-does-java-not-support-pointers","link":"#why-does-java-not-support-pointers","children":[]},{"level":3,"title":"Can we use this() and super() both in a constructor?","slug":"can-we-use-this-and-super-both-in-a-constructor","link":"#can-we-use-this-and-super-both-in-a-constructor","children":[]}]},{"level":2,"title":"Core Java - OOPas Concepts: Method Overloading Interview Questions:","slug":"core-java-oopas-concepts-method-overloading-interview-questions","link":"#core-java-oopas-concepts-method-overloading-interview-questions","children":[{"level":3,"title":"What is method overloading?","slug":"what-is-method-overloading","link":"#what-is-method-overloading","children":[]},{"level":3,"title":"Why is method overloading not possible by changing the return type in Java?","slug":"why-is-method-overloading-not-possible-by-changing-the-return-type-in-java","link":"#why-is-method-overloading-not-possible-by-changing-the-return-type-in-java","children":[]},{"level":3,"title":"Can we overload the methods by making them static?","slug":"can-we-overload-the-methods-by-making-them-static","link":"#can-we-overload-the-methods-by-making-them-static","children":[]},{"level":3,"title":"Can we overload the main() method?","slug":"can-we-overload-the-main-method","link":"#can-we-overload-the-main-method","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: Method Overriding Interview Questions:","slug":"core-java-oops-concepts-method-overriding-interview-questions","link":"#core-java-oops-concepts-method-overriding-interview-questions","children":[{"level":3,"title":"What is method overriding?","slug":"what-is-method-overriding","link":"#what-is-method-overriding","children":[]},{"level":3,"title":"Can we override the static method?","slug":"can-we-override-the-static-method","link":"#can-we-override-the-static-method","children":[]},{"level":3,"title":"Why can't we not override static method?","slug":"why-can-t-we-not-override-static-method","link":"#why-can-t-we-not-override-static-method","children":[]},{"level":3,"title":"Can we override the overloaded method?","slug":"can-we-override-the-overloaded-method","link":"#can-we-override-the-overloaded-method","children":[]},{"level":3,"title":"Differences between method Overloading and Overriding?","slug":"differences-between-method-overloading-and-overriding","link":"#differences-between-method-overloading-and-overriding","children":[]},{"level":3,"title":"Can we override the private methods?","slug":"can-we-override-the-private-methods","link":"#can-we-override-the-private-methods","children":[]},{"level":3,"title":"Can we change the scope of the overridden method in the subclass?","slug":"can-we-change-the-scope-of-the-overridden-method-in-the-subclass","link":"#can-we-change-the-scope-of-the-overridden-method-in-the-subclass","children":[]},{"level":3,"title":"Can we modify the throws clause of the superclass method while overriding it in the subclass?","slug":"can-we-modify-the-throws-clause-of-the-superclass-method-while-overriding-it-in-the-subclass","link":"#can-we-modify-the-throws-clause-of-the-superclass-method-while-overriding-it-in-the-subclass","children":[]},{"level":3,"title":"What is covariant return type?","slug":"what-is-covariant-return-type","link":"#what-is-covariant-return-type","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: final keyword Interview Questions:","slug":"core-java-oops-concepts-final-keyword-interview-questions","link":"#core-java-oops-concepts-final-keyword-interview-questions","children":[{"level":3,"title":"What is the final variable?","slug":"what-is-the-final-variable","link":"#what-is-the-final-variable","children":[]},{"level":3,"title":"What is the final blank variable?","slug":"what-is-the-final-blank-variable","link":"#what-is-the-final-blank-variable","children":[]},{"level":3,"title":"Can we initialize the final blank variable?","slug":"can-we-initialize-the-final-blank-variable","link":"#can-we-initialize-the-final-blank-variable","children":[]},{"level":3,"title":"Can we declare the main method as final?","slug":"can-we-declare-the-main-method-as-final","link":"#can-we-declare-the-main-method-as-final","children":[]},{"level":3,"title":"Can we declare a constructor as final?","slug":"can-we-declare-a-constructor-as-final","link":"#can-we-declare-a-constructor-as-final","children":[]},{"level":3,"title":"What is the difference between the final method and abstract method?","slug":"what-is-the-difference-between-the-final-method-and-abstract-method","link":"#what-is-the-difference-between-the-final-method-and-abstract-method","children":[]}]},{"level":2,"title":"Core Java - OOPs: Polymorphism Interview Questions:","slug":"core-java-oops-polymorphism-interview-questions","link":"#core-java-oops-polymorphism-interview-questions","children":[{"level":3,"title":"What is the difference between compile-time polymorphism and runtime polymorphism?","slug":"what-is-the-difference-between-compile-time-polymorphism-and-runtime-polymorphism","link":"#what-is-the-difference-between-compile-time-polymorphism-and-runtime-polymorphism","children":[]},{"level":3,"title":"Can we achieve Runtime Polymorphism by data members?","slug":"can-we-achieve-runtime-polymorphism-by-data-members","link":"#can-we-achieve-runtime-polymorphism-by-data-members","children":[]},{"level":3,"title":"What is the difference between static binding and dynamic binding?","slug":"what-is-the-difference-between-static-binding-and-dynamic-binding","link":"#what-is-the-difference-between-static-binding-and-dynamic-binding","children":[]},{"level":3,"title":"What is Java instanceOf operator?","slug":"what-is-java-instanceof-operator","link":"#what-is-java-instanceof-operator","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: Abstraction Interview Questions:","slug":"core-java-oops-concepts-abstraction-interview-questions","link":"#core-java-oops-concepts-abstraction-interview-questions","children":[{"level":3,"title":"What is abstraction?","slug":"what-is-abstraction","link":"#what-is-abstraction","children":[]},{"level":3,"title":"What is the difference between abstraction and encapsulation?","slug":"what-is-the-difference-between-abstraction-and-encapsulation","link":"#what-is-the-difference-between-abstraction-and-encapsulation","children":[]},{"level":3,"title":"What is the abstract class?","slug":"what-is-the-abstract-class","link":"#what-is-the-abstract-class","children":[]},{"level":3,"title":"Can there be an abstract method without an abstract class?","slug":"can-there-be-an-abstract-method-without-an-abstract-class","link":"#can-there-be-an-abstract-method-without-an-abstract-class","children":[]},{"level":3,"title":"Can we use abstract and final both with a method?","slug":"can-we-use-abstract-and-final-both-with-a-method","link":"#can-we-use-abstract-and-final-both-with-a-method","children":[]},{"level":3,"title":"What is the interface?","slug":"what-is-the-interface","link":"#what-is-the-interface","children":[]},{"level":3,"title":"Can we declare an interface method static?","slug":"can-we-declare-an-interface-method-static","link":"#can-we-declare-an-interface-method-static","children":[]},{"level":3,"title":"What is a marker interface?","slug":"what-is-a-marker-interface","link":"#what-is-a-marker-interface","children":[]},{"level":3,"title":"What are the differences between abstract class and interface?","slug":"what-are-the-differences-between-abstract-class-and-interface","link":"#what-are-the-differences-between-abstract-class-and-interface","children":[]},{"level":3,"title":"Can we define private and protected modifiers for the members in interfaces?","slug":"can-we-define-private-and-protected-modifiers-for-the-members-in-interfaces","link":"#can-we-define-private-and-protected-modifiers-for-the-members-in-interfaces","children":[]},{"level":3,"title":"When can an object reference be cast to an interface reference?","slug":"when-can-an-object-reference-be-cast-to-an-interface-reference","link":"#when-can-an-object-reference-be-cast-to-an-interface-reference","children":[]},{"level":3,"title":"How to make a read-only class in Java?","slug":"how-to-make-a-read-only-class-in-java","link":"#how-to-make-a-read-only-class-in-java","children":[]},{"level":3,"title":"How to make a write-only class in Java?","slug":"how-to-make-a-write-only-class-in-java","link":"#how-to-make-a-write-only-class-in-java","children":[]},{"level":3,"title":"What are the advantages of Encapsulation in Java?","slug":"what-are-the-advantages-of-encapsulation-in-java","link":"#what-are-the-advantages-of-encapsulation-in-java","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: Package Interview Questions","slug":"core-java-oops-concepts-package-interview-questions","link":"#core-java-oops-concepts-package-interview-questions","children":[{"level":3,"title":"What is the package?","slug":"what-is-the-package","link":"#what-is-the-package","children":[]},{"level":3,"title":"What are the advantages of defining packages in Java?","slug":"what-are-the-advantages-of-defining-packages-in-java","link":"#what-are-the-advantages-of-defining-packages-in-java","children":[]},{"level":3,"title":"Do we need to import java.lang package any time? why?","slug":"do-we-need-to-import-java-lang-package-any-time-why","link":"#do-we-need-to-import-java-lang-package-any-time-why","children":[]},{"level":3,"title":"Can I import the same package/class twice? Will the JVM load the package twice at runtime?","slug":"can-i-import-the-same-package-class-twice-will-the-jvm-load-the-package-twice-at-runtime","link":"#can-i-import-the-same-package-class-twice-will-the-jvm-load-the-package-twice-at-runtime","children":[]}]},{"level":2,"title":"Java: Exception Handling Interview Questions","slug":"java-exception-handling-interview-questions","link":"#java-exception-handling-interview-questions","children":[{"level":3,"title":"How many types of exception can occur in a Java program?","slug":"how-many-types-of-exception-can-occur-in-a-java-program","link":"#how-many-types-of-exception-can-occur-in-a-java-program","children":[]},{"level":3,"title":"What is Exception Handling?","slug":"what-is-exception-handling","link":"#what-is-exception-handling","children":[]},{"level":3,"title":"Explain the hierarchy of Java Exception classes?","slug":"explain-the-hierarchy-of-java-exception-classes","link":"#explain-the-hierarchy-of-java-exception-classes","children":[]},{"level":3,"title":"What is the difference between Checked Exception and Unchecked Exception?","slug":"what-is-the-difference-between-checked-exception-and-unchecked-exception","link":"#what-is-the-difference-between-checked-exception-and-unchecked-exception","children":[]},{"level":3,"title":"What is the base class for Error and Exception?","slug":"what-is-the-base-class-for-error-and-exception","link":"#what-is-the-base-class-for-error-and-exception","children":[]},{"level":3,"title":"Can finally block used without a catch?","slug":"can-finally-block-used-without-a-catch","link":"#can-finally-block-used-without-a-catch","children":[]},{"level":3,"title":"Is there any case when finally will not be executed?","slug":"is-there-any-case-when-finally-will-not-be-executed","link":"#is-there-any-case-when-finally-will-not-be-executed","children":[]},{"level":3,"title":"What is the difference between throw and throws?","slug":"what-is-the-difference-between-throw-and-throws","link":"#what-is-the-difference-between-throw-and-throws","children":[]},{"level":3,"title":"Can subclass overriding method declare an exception if parent class method doesn't throw an exception?","slug":"can-subclass-overriding-method-declare-an-exception-if-parent-class-method-doesn-t-throw-an-exception","link":"#can-subclass-overriding-method-declare-an-exception-if-parent-class-method-doesn-t-throw-an-exception","children":[]},{"level":3,"title":"What is exception propagation?","slug":"what-is-exception-propagation","link":"#what-is-exception-propagation","children":[]}]},{"level":2,"title":"Java: String Handling Interview Questions:","slug":"java-string-handling-interview-questions","link":"#java-string-handling-interview-questions","children":[{"level":3,"title":"What is String Pool?","slug":"what-is-string-pool","link":"#what-is-string-pool","children":[]},{"level":3,"title":"What is the meaning of immutable regarding String?","slug":"what-is-the-meaning-of-immutable-regarding-string","link":"#what-is-the-meaning-of-immutable-regarding-string","children":[]},{"level":3,"title":"Why are the objects immutable in Java?","slug":"why-are-the-objects-immutable-in-java","link":"#why-are-the-objects-immutable-in-java","children":[]},{"level":3,"title":"Why Java uses the concept of the string literal?","slug":"why-java-uses-the-concept-of-the-string-literal","link":"#why-java-uses-the-concept-of-the-string-literal","children":[]},{"level":3,"title":"How many objects will be created in the following code?","slug":"how-many-objects-will-be-created-in-the-following-code","link":"#how-many-objects-will-be-created-in-the-following-code","children":[]},{"level":3,"title":"What are the differences between String and StringBuffer?","slug":"what-are-the-differences-between-string-and-stringbuffer","link":"#what-are-the-differences-between-string-and-stringbuffer","children":[]},{"level":3,"title":"What are the differences between StringBuffer and StringBuilder?","slug":"what-are-the-differences-between-stringbuffer-and-stringbuilder","link":"#what-are-the-differences-between-stringbuffer-and-stringbuilder","children":[]},{"level":3,"title":"Why CharArray() is preferred over String to store the password?","slug":"why-chararray-is-preferred-over-string-to-store-the-password","link":"#why-chararray-is-preferred-over-string-to-store-the-password","children":[]}]},{"level":2,"title":"Core Java: Nested classes and Interfaces Interview Questions","slug":"core-java-nested-classes-and-interfaces-interview-questions","link":"#core-java-nested-classes-and-interfaces-interview-questions","children":[{"level":3,"title":"What are the advantages of Java inner classes?","slug":"what-are-the-advantages-of-java-inner-classes","link":"#what-are-the-advantages-of-java-inner-classes","children":[]},{"level":3,"title":"What are the disadvantages of using inner classes?","slug":"what-are-the-disadvantages-of-using-inner-classes","link":"#what-are-the-disadvantages-of-using-inner-classes","children":[]},{"level":3,"title":"Is there any difference between nested classes and inner classes?","slug":"is-there-any-difference-between-nested-classes-and-inner-classes","link":"#is-there-any-difference-between-nested-classes-and-inner-classes","children":[]},{"level":3,"title":"Can a class have an interface?","slug":"can-a-class-have-an-interface","link":"#can-a-class-have-an-interface","children":[]},{"level":3,"title":"Can an Interface have a class?","slug":"can-an-interface-have-a-class","link":"#can-an-interface-have-a-class","children":[]}]},{"level":2,"title":"Garbage Collection Interview Questions","slug":"garbage-collection-interview-questions","link":"#garbage-collection-interview-questions","children":[{"level":3,"title":"What is Garbage Collection?","slug":"what-is-garbage-collection","link":"#what-is-garbage-collection","children":[]},{"level":3,"title":"What is gc()?","slug":"what-is-gc","link":"#what-is-gc","children":[]},{"level":3,"title":"How is garbage collection controlled?","slug":"how-is-garbage-collection-controlled","link":"#how-is-garbage-collection-controlled","children":[]},{"level":3,"title":"How can an object be unreferenced?","slug":"how-can-an-object-be-unreferenced","link":"#how-can-an-object-be-unreferenced","children":[]},{"level":3,"title":"What is the purpose of the finalize() method?","slug":"what-is-the-purpose-of-the-finalize-method","link":"#what-is-the-purpose-of-the-finalize-method","children":[]},{"level":3,"title":"What is the purpose of the Runtime class?","slug":"what-is-the-purpose-of-the-runtime-class","link":"#what-is-the-purpose-of-the-runtime-class","children":[]},{"level":3,"title":"How will you invoke any external process in Java?","slug":"how-will-you-invoke-any-external-process-in-java","link":"#how-will-you-invoke-any-external-process-in-java","children":[]}]},{"level":2,"title":"I/O Interview Questions:","slug":"i-o-interview-questions","link":"#i-o-interview-questions","children":[{"level":3,"title":"What do you understand by an IO stream?","slug":"what-do-you-understand-by-an-io-stream","link":"#what-do-you-understand-by-an-io-stream","children":[]},{"level":3,"title":"what is the difference between the Reader/Writer class hierarchy and the InputStream/OutputStream class hierarchy?","slug":"what-is-the-difference-between-the-reader-writer-class-hierarchy-and-the-inputstream-outputstream-class-hierarchy","link":"#what-is-the-difference-between-the-reader-writer-class-hierarchy-and-the-inputstream-outputstream-class-hierarchy","children":[]},{"level":3,"title":"What are the super most classes for all the streams?","slug":"what-are-the-super-most-classes-for-all-the-streams","link":"#what-are-the-super-most-classes-for-all-the-streams","children":[]},{"level":3,"title":"What are the FileInputStream and FileOutputStream?","slug":"what-are-the-fileinputstream-and-fileoutputstream","link":"#what-are-the-fileinputstream-and-fileoutputstream","children":[]},{"level":3,"title":"What is the purpose of using BufferedInputStream and BufferedOutputStream classes?","slug":"what-is-the-purpose-of-using-bufferedinputstream-and-bufferedoutputstream-classes","link":"#what-is-the-purpose-of-using-bufferedinputstream-and-bufferedoutputstream-classes","children":[]},{"level":3,"title":"What are FilterStreams?","slug":"what-are-filterstreams","link":"#what-are-filterstreams","children":[]},{"level":3,"title":"What is an I/O filter?","slug":"what-is-an-i-o-filter","link":"#what-is-an-i-o-filter","children":[]},{"level":3,"title":"In Java, how many ways we can take input from the console?","slug":"in-java-how-many-ways-we-can-take-input-from-the-console","link":"#in-java-how-many-ways-we-can-take-input-from-the-console","children":[]}]},{"level":2,"title":"Serialization Interview Questions:","slug":"serialization-interview-questions","link":"#serialization-interview-questions","children":[{"level":3,"title":"What is serialization?","slug":"what-is-serialization","link":"#what-is-serialization","children":[]},{"level":3,"title":"How can we make a class serializable in Java?","slug":"how-can-we-make-a-class-serializable-in-java","link":"#how-can-we-make-a-class-serializable-in-java","children":[]},{"level":3,"title":"Can a Serialized object be transferred via network?","slug":"can-a-serialized-object-be-transferred-via-network","link":"#can-a-serialized-object-be-transferred-via-network","children":[]},{"level":3,"title":"What is the transient keyword?","slug":"what-is-the-transient-keyword","link":"#what-is-the-transient-keyword","children":[]},{"level":3,"title":"What is the difference between Serializable?","slug":"what-is-the-difference-between-serializable","link":"#what-is-the-difference-between-serializable","children":[]}]},{"level":2,"title":"Miscellaneous Interview Questions:","slug":"miscellaneous-interview-questions","link":"#miscellaneous-interview-questions","children":[{"level":3,"title":"What are wrapper classes?","slug":"what-are-wrapper-classes","link":"#what-are-wrapper-classes","children":[]},{"level":3,"title":"what are autoboxing and unboxing? when does it occur?","slug":"what-are-autoboxing-and-unboxing-when-does-it-occur","link":"#what-are-autoboxing-and-unboxing-when-does-it-occur","children":[]},{"level":3,"title":"What is object cloning?","slug":"what-is-object-cloning","link":"#what-is-object-cloning","children":[]},{"level":3,"title":"What are the advantages and disadvantages of object cloning?","slug":"what-are-the-advantages-and-disadvantages-of-object-cloning","link":"#what-are-the-advantages-and-disadvantages-of-object-cloning","children":[]},{"level":3,"title":"What is shallow copy and deep copy?","slug":"what-is-shallow-copy-and-deep-copy","link":"#what-is-shallow-copy-and-deep-copy","children":[]},{"level":3,"title":"What is the purpose of the strictfp keyword?","slug":"what-is-the-purpose-of-the-strictfp-keyword","link":"#what-is-the-purpose-of-the-strictfp-keyword","children":[]},{"level":3,"title":"What is the purpose of the System class?","slug":"what-is-the-purpose-of-the-system-class","link":"#what-is-the-purpose-of-the-system-class","children":[]},{"level":3,"title":"What is a singleton class?","slug":"what-is-a-singleton-class","link":"#what-is-a-singleton-class","children":[]}]},{"level":2,"title":"downcasting and upcasting in Java","slug":"downcasting-and-upcasting-in-java","link":"#downcasting-and-upcasting-in-java","children":[{"level":3,"title":"Upcasting:","slug":"upcasting","link":"#upcasting","children":[]},{"level":3,"title":"Downcasting:","slug":"downcasting","link":"#downcasting","children":[]}]}],"git":{"createdTime":1702349502000,"updatedTime":1706560793000,"contributors":[{"name":"youweichen0208","email":"youweichen0208@gmail.com","commits":7},{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":2}]},"readingTime":{"minutes":30.01,"words":9004},"filePathRelative":"interview-prep/java.md","localizedDate":"December 13, 2023","excerpt":"<h1> Java Interview Questions</h1>\\n<h2> Core Java: Basics of Java Interview Questions</h2>\\n<h3> What do you understand by Java virtual machine?</h3>\\n<p>Java Virtual Machine is a virtual machine that enables the computer to run the Java program. JVM acts like a run-time engine which calls the main method present in the Java code. JVM is a part of the JRE (Java Runtime Environment). The Java code is compiled by JVM to be a Bytecode which is machine independent.</p>","autoDesc":true}`);export{e as data};
