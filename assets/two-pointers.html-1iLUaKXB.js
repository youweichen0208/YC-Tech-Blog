import{_ as n,o as s,c as a,e}from"./app-MY4SNhEU.js";const t={},o=e(`<h1 id="two-pointers" tabindex="-1"><a class="header-anchor" href="#two-pointers" aria-hidden="true">#</a> Two Pointers</h1><h2 id="what-is-two-pointers-algorithm" tabindex="-1"><a class="header-anchor" href="#what-is-two-pointers-algorithm" aria-hidden="true">#</a> What is Two Pointers Algorithm?</h2><p>Two pointers is an extremely common technique used to solve array and string problems. It involves using two pointers that traverse through an array or a list, at different speeds or directions.</p><h2 id="common-types-of-two-pointers-techniques" tabindex="-1"><a class="header-anchor" href="#common-types-of-two-pointers-techniques" aria-hidden="true">#</a> Common Types of Two Pointers techniques:</h2><ol><li>Opposite Direction: The pointers start at opposite ends of the array and move towards each other. This is often used for problems involving sorting or searching in a sorted array, such as finding a pair of elements that sum to a target value.</li><li>Same Direction (Fast and Slow Pointers): One pointer moves faster than the other. This technique is often used for problems involving linked lists or arrays, such as detecting a cycle in a linked list or finding a peak element in an array.</li><li>Same Direction (Sliding Window): We will specifically talk about this in another file.</li></ol><h2 id="code-template" tabindex="-1"><a class="header-anchor" href="#code-template" aria-hidden="true">#</a> Code template:</h2><h3 id="two-pointers-one-input-opposite-ends" tabindex="-1"><a class="header-anchor" href="#two-pointers-one-input-opposite-ends" aria-hidden="true">#</a> Two pointers: one input, opposite ends</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do some logic here with left and right</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">CONDITION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Starting one pointer at the first index 0 and the other pointer at the last index <code>input.length - 1</code></li><li>Use a while loop until the pointers are equal to each other</li><li>At each iteration of the loop, move the pointers towards each other. This means either increment the pointer that started at the first index, decrement the pointer that started at the last index, or both. Deciding which pointers to move will depend on the problem we are trying to solve.</li></ol><h5 id="time-complexity-o-n" tabindex="-1"><a class="header-anchor" href="#time-complexity-o-n" aria-hidden="true">#</a> Time Complexity: O(n)</h5><h3 id="two-pointers-two-inputs-exhaust-both" tabindex="-1"><a class="header-anchor" href="#two-pointers-two-inputs-exhaust-both" aria-hidden="true">#</a> Two pointers: two inputs, exhaust both</h3><p>The following method is application when the problem is applicable when the problem has two iterables in the input, for example, two arrays.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do some logic here</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">CONDITION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do logic</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do logic</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Create two pointers, one for each iterable. Each pointer should start at the first index.</li><li>Use a while loop until one of the pointers reaches the end of its iterable.</li><li>At each iteration of the loop, move the pointers forward. This means incrementing either one of the pointers or both of the pointers. Deciding which pointers to move will depend on the problem we are trying to solve.</li><li>Because our while loop will stop when one of the pointers reaches the end, the other pointer will not be at the end of its respective iterable when the loop finishes. Sometimes, we need to iterate through all elements - if this is the case, we will need to write extra code here to make sure both iterables are exhausted.</li></ol><h5 id="time-complexity-if-sorted-then-o-n-if-not-then-o-n-logn" tabindex="-1"><a class="header-anchor" href="#time-complexity-if-sorted-then-o-n-if-not-then-o-n-logn" aria-hidden="true">#</a> Time Complexity: If sorted, then O(n). If not, then O(n * logn)</h5>`,15),i=[o];function p(l,r){return s(),a("div",null,i)}const u=n(t,[["render",p],["__file","two-pointers.html.vue"]]);export{u as default};
