import{_ as n,o as s,c as a,e}from"./app-Z_B6pOHV.js";const t={},o=e(`<h1 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h1><h2 id="what-is-tdd" tabindex="-1"><a class="header-anchor" href="#what-is-tdd" aria-hidden="true">#</a> What is TDD</h2><p>Test-Driven Development(TDD) is a software development methodology in which tests are written before the actual code. The process involves writing a test for a specific functionality, then writing the minimal amount of code required to pass that test, and finally refactoring the code while ensuring that all tests still pass.</p><ol><li>Creating Fixture in testing</li></ol><p>In unit testing, a fixture refers to the fixed state of a set of objects used as a test data for running tests.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> <span class="token function">GetTestUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span>
            <span class="token punctuation">{</span>
                Name <span class="token operator">=</span> <span class="token string">&quot;Test User 1&quot;</span><span class="token punctuation">,</span>
                Email <span class="token operator">=</span> <span class="token string">&quot;test.user.1@productivedev.com&quot;</span><span class="token punctuation">,</span>
                Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Address</span>
                <span class="token punctuation">{</span>
                    Street <span class="token operator">=</span> <span class="token string">&quot;123 Market St&quot;</span><span class="token punctuation">,</span>
                    City <span class="token operator">=</span> <span class="token string">&quot;Somewhere&quot;</span><span class="token punctuation">,</span>
                    ZipCode <span class="token operator">=</span> <span class="token string">&quot;213124&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span>
            <span class="token punctuation">{</span>
                Name <span class="token operator">=</span> <span class="token string">&quot;Test User 2&quot;</span><span class="token punctuation">,</span>
                Email <span class="token operator">=</span> <span class="token string">&quot;test.user.2@productivedev.com&quot;</span><span class="token punctuation">,</span>
                Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Address</span>
                <span class="token punctuation">{</span>
                    Street <span class="token operator">=</span> <span class="token string">&quot;900 Main St&quot;</span><span class="token punctuation">,</span>
                    City <span class="token operator">=</span> <span class="token string">&quot;Somewhere&quot;</span><span class="token punctuation">,</span>
                    ZipCode <span class="token operator">=</span> <span class="token string">&quot;213124&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span>
            <span class="token punctuation">{</span>
                Name <span class="token operator">=</span> <span class="token string">&quot;Test User 3&quot;</span><span class="token punctuation">,</span>
                Email <span class="token operator">=</span> <span class="token string">&quot;test.user.3@productivedev.com&quot;</span><span class="token punctuation">,</span>
                Address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Address</span>
                <span class="token punctuation">{</span>
                    Street <span class="token operator">=</span> <span class="token string">&quot;108 Maple St&quot;</span><span class="token punctuation">,</span>
                    City <span class="token operator">=</span> <span class="token string">&quot;Somewhere&quot;</span><span class="token punctuation">,</span>
                    ZipCode <span class="token operator">=</span> <span class="token string">&quot;213124&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Setup Mocked Handler In the <code>MockHttpMessageHandler.cs</code> file, we can defines a method <code>SetupBasicGetResourceList</code> that sets up a mocked <code>HttpMessageHandler</code> to simulate an Http Get request and return a predefined response.</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token return-type class-name">Mock<span class="token punctuation">&lt;</span>HttpMessageHandler<span class="token punctuation">&gt;</span></span> <span class="token function">SetupBasicGetResourceList</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> expectedResponse<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> endpoint<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> mockResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResponseMessage</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>expectedResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        mockResponse<span class="token punctuation">.</span>Content<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>MediaTypeHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> handlerMock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>HttpMessageHandler<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> httpRequestMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span>
        <span class="token punctuation">{</span>
            RequestUri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Method <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span>Get
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        handlerMock<span class="token punctuation">.</span><span class="token function">Protected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Setup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SendAsync&quot;</span><span class="token punctuation">,</span> ItExpr<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpRequestMessage<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItExpr<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CancellationToken<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span>mockResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> handlerMock<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Create HttpClient with Mocked Handler We can create an <code>HttpClient</code> instance using the mocked handler:</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>handlerMock<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>Pass HttpClient to Service We can pass this <code>HttpClient</code> instance using the mocked handler</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> sut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UsersService</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>Service Method Execution When the service method calls <code>_httpClient.GetAsync(_apiConfig.Endpoint)</code>, the mocked handler intercepts the request and returns the predefined response:</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> usersResponse <span class="token operator">=</span> <span class="token keyword">await</span> _httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>_apiConfig<span class="token punctuation">.</span>Endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>usersResponse<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> responseContent <span class="token operator">=</span> usersResponse<span class="token punctuation">.</span>Content<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> allUsers <span class="token operator">=</span> <span class="token keyword">await</span> responseContent<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReadFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> allUsers<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Mocked Handler</code>: The mocked <code>HttpMessageHandler</code> intercepts the HTTP request and returns a predefined response containing our test data.</li><li><code>Simulated Request</code>: The <code>HttpClient</code> behaves as if it received a real response from the network, but the response is generated by the mock.</li></ul><h2 id="seperation-of-concern" tabindex="-1"><a class="header-anchor" href="#seperation-of-concern" aria-hidden="true">#</a> Seperation of Concern</h2><p>In xUnit testing, separating the tests for <code>IUserService</code> and <code>IUserController</code> is important for several reasons:</p><ol><li><code>Separation of Concerns</code>:</li></ol><ul><li><code>Service Layer</code>: This layer contains the business logic and interacts with data sources(e.g., databases, external APIs). Testing this layer ensures that the business logic works correctly.</li><li><code>Controller Layer</code>: This layer handles HTTP requests, interacts with the service layer, and returns HTTP responses. Testing this layer ensures that the controller handles requests and responses.</li></ul><ol start="2"><li><code>Isolation</code>:</li></ol><ul><li><code>Unit Testing</code>: Each test should focus on a single unit of work. By isolating the tests for <code>IUserService</code> and <code>IUserController</code>, we ensure that each test only verifies the behavior of the specific component under test without interference from other components.</li><li><code>Mocking Dependencies</code>: When testing <code>IUserController</code>, we can mock <code>IUserService</code> to control its behavior and focus on testing the controller logic. Similarly, when testing <code>IUserService</code>, we can mock its dependencies(e.g., repositories, external services).</li></ul><ol start="3"><li><code>Maintainability</code>:</li></ol><ul><li><code>Clearer Tests</code>: Separate tests make it easier to understand what is being tested and why.</li><li><code>Easier Debugging</code>: when a test fails, it is easier to identify the source of the problem if the tests are well-isolated.</li></ul><ol start="4"><li><code>Reusability</code>:</li></ol><ul><li><code>Reusable Services</code>: Services can be reused across different controllers or other services.</li><li><code>Flexible Controllers</code>: Controllers can be tested with different service implementations to verify their behavior in various scenarios.</li></ul><h2 id="moq" tabindex="-1"><a class="header-anchor" href="#moq" aria-hidden="true">#</a> Moq</h2><p>Moq is a popular mocking framework for .NET that allows us to create mock objects for unit testing. It helps us isolate the code under test by simulating the behavior of dependencies, such as services or repositories, without requiring the actual implementations.</p>`,27),p=[o];function c(i,l){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","testing.html.vue"]]);export{u as default};
