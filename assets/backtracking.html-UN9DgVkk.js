const t=JSON.parse('{"key":"v-c0b06e96","path":"/data-structure/backtracking.html","title":"Backtracking","lang":"en-US","frontmatter":{"icon":"pen-to-square","author":"Youwei Chen","date":"2023-12-14T00:00:00.000Z","category":["data structure"],"tag":["Java","Algorithm","Backtracking"],"description":"Backtracking 1. What exactly is backtracking Backtracking is an optimization that involves abandoning a \\"path\\" once it is determined that the path cannot lead to a solution. The idea is similar to binary search trees - if we are looking for a value x, and the root node has a value greater than x, then we know we can ignore the entire right subtree.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/data-structure/backtracking.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Backtracking"}],["meta",{"property":"og:description","content":"Backtracking 1. What exactly is backtracking Backtracking is an optimization that involves abandoning a \\"path\\" once it is determined that the path cannot lead to a solution. The idea is similar to binary search trees - if we are looking for a value x, and the root node has a value greater than x, then we know we can ignore the entire right subtree."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-12-16T04:24:07.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"Backtracking"}],["meta",{"property":"article:published_time","content":"2023-12-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-16T04:24:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Backtracking\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-16T04:24:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\"}]}"]]},"headers":[{"level":2,"title":"1. What exactly is backtracking","slug":"_1-what-exactly-is-backtracking","link":"#_1-what-exactly-is-backtracking","children":[]},{"level":2,"title":"2. Implementation:","slug":"_2-implementation","link":"#_2-implementation","children":[]},{"level":2,"title":"3. Example: Leetcode 46","slug":"_3-example-leetcode-46","link":"#_3-example-leetcode-46","children":[]}],"git":{"createdTime":1702592512000,"updatedTime":1702700647000,"contributors":[{"name":"youweichen0208","email":"youweichen0208@gmail.com","commits":2}]},"readingTime":{"minutes":1.35,"words":405},"filePathRelative":"data-structure/backtracking.md","localizedDate":"December 14, 2023","excerpt":"<h1> Backtracking</h1>\\n<h2> 1. What exactly is backtracking</h2>\\n<p>Backtracking is an optimization that involves abandoning a \\"path\\" once it is determined that the path cannot lead to a\\nsolution. The idea is similar to binary search trees - if we are looking for a value x, and the root node has a value\\ngreater than x, then we know we can ignore the entire right subtree.</p>","autoDesc":true}');export{t as data};
