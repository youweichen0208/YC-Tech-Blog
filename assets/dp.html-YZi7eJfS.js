const e=JSON.parse('{"key":"v-297ece07","path":"/data-structure/dp.html","title":"Dynamic Programming","lang":"en-US","frontmatter":{"icon":"pen-to-square","author":"Youwei Chen","date":"2023-12-10T00:00:00.000Z","category":["data structure"],"tag":["Java","Algorithm","Dynamic Programming"],"description":"Dynamic Programming 1. What exactly is DP Dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler sub-problems. These subproblems can be solved using patterns and recursive functional relationships. The idea is to address each sub-problem once to prevent redundant calculations. A classic illustration of a dynamic programming problem is the Fibonacci sequence.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/data-structure/dp.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Dynamic Programming"}],["meta",{"property":"og:description","content":"Dynamic Programming 1. What exactly is DP Dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler sub-problems. These subproblems can be solved using patterns and recursive functional relationships. The idea is to address each sub-problem once to prevent redundant calculations. A classic illustration of a dynamic programming problem is the Fibonacci sequence."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-12-13T18:10:52.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"Dynamic Programming"}],["meta",{"property":"article:published_time","content":"2023-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-13T18:10:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dynamic Programming\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-13T18:10:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\"}]}"]]},"headers":[{"level":2,"title":"1. What exactly is DP","slug":"_1-what-exactly-is-dp","link":"#_1-what-exactly-is-dp","children":[]},{"level":2,"title":"2. Example: Climbing stairs (leetcode 70)","slug":"_2-example-climbing-stairs-leetcode-70","link":"#_2-example-climbing-stairs-leetcode-70","children":[{"level":3,"title":"solution","slug":"solution","link":"#solution","children":[]}]},{"level":2,"title":"3. Top-down vs. bottom-up","slug":"_3-top-down-vs-bottom-up","link":"#_3-top-down-vs-bottom-up","children":[]},{"level":2,"title":"4. When should I consider using DP","slug":"_4-when-should-i-consider-using-dp","link":"#_4-when-should-i-consider-using-dp","children":[]},{"level":2,"title":"5. Framework for DP","slug":"_5-framework-for-dp","link":"#_5-framework-for-dp","children":[]}],"git":{"createdTime":1702323376000,"updatedTime":1702491052000,"contributors":[{"name":"youweichen0208","email":"youweichen0208@gmail.com","commits":4}]},"readingTime":{"minutes":1.63,"words":489},"filePathRelative":"data-structure/dp.md","localizedDate":"December 10, 2023","excerpt":"<h1> Dynamic Programming</h1>\\n<h2> 1. What exactly is DP</h2>\\n<p>Dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler sub-problems. These subproblems can be solved using patterns and recursive functional relationships. The idea is to address each sub-problem once to prevent redundant calculations. A classic illustration of a dynamic programming problem is the Fibonacci sequence.</p>","autoDesc":true}');export{e as data};
