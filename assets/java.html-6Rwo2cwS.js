const e=JSON.parse('{"key":"v-b29d5f4c","path":"/interview-prep/java.html","title":"Java Interview Questions","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-12-13T00:00:00.000Z","category":["interview"],"tag":["Java"],"star":true,"sticky":true,"description":"Java Interview Questions 1. Compare JDK vs. JVM vs. JRE JVM (Java Virtual Machine) This is the heart of the Java Platform. It is a virtual machine that interprets Java bytecode and executes it as native code on the host machine. JVM is a part of the Java Runtime Environment.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/interview-prep/java.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Java Interview Questions"}],["meta",{"property":"og:description","content":"Java Interview Questions 1. Compare JDK vs. JVM vs. JRE JVM (Java Virtual Machine) This is the heart of the Java Platform. It is a virtual machine that interprets Java bytecode and executes it as native code on the host machine. JVM is a part of the Java Runtime Environment."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-12-13T18:10:52.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-12-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-13T18:10:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Interview Questions\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-13T18:10:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. Compare JDK vs. JVM vs. JRE","slug":"_1-compare-jdk-vs-jvm-vs-jre","link":"#_1-compare-jdk-vs-jvm-vs-jre","children":[{"level":3,"title":"JVM (Java Virtual Machine)","slug":"jvm-java-virtual-machine","link":"#jvm-java-virtual-machine","children":[]},{"level":3,"title":"JRE (Java Runtime Environment)","slug":"jre-java-runtime-environment","link":"#jre-java-runtime-environment","children":[]},{"level":3,"title":"JDK (Java Development Kit)","slug":"jdk-java-development-kit","link":"#jdk-java-development-kit","children":[]}]},{"level":2,"title":"2. Differences between C++ vs. Java","slug":"_2-differences-between-c-vs-java","link":"#_2-differences-between-c-vs-java","children":[{"level":3,"title":"C++","slug":"c","link":"#c","children":[]}]},{"level":2,"title":"3. Wrapper class","slug":"_3-wrapper-class","link":"#_3-wrapper-class","children":[]},{"level":2,"title":"4. String, StringBuffer, and StringBuilder","slug":"_4-string-stringbuffer-and-stringbuilder","link":"#_4-string-stringbuffer-and-stringbuilder","children":[{"level":3,"title":"String","slug":"string","link":"#string","children":[]},{"level":3,"title":"StringBuffer","slug":"stringbuffer","link":"#stringbuffer","children":[]},{"level":3,"title":"StringBuilder","slug":"stringbuilder","link":"#stringbuilder","children":[]}]},{"level":2,"title":"5. Thread Safety and Synchronization","slug":"_5-thread-safety-and-synchronization","link":"#_5-thread-safety-and-synchronization","children":[{"level":3,"title":"Thread Safety:","slug":"thread-safety","link":"#thread-safety","children":[]},{"level":3,"title":"Synchronization:","slug":"synchronization","link":"#synchronization","children":[]}]},{"level":2,"title":"6. Object Basics","slug":"_6-object-basics","link":"#_6-object-basics","children":[{"level":3,"title":"Class","slug":"class","link":"#class","children":[]},{"level":3,"title":"Object","slug":"object","link":"#object","children":[]},{"level":3,"title":"State","slug":"state","link":"#state","children":[]},{"level":3,"title":"Behavior","slug":"behavior","link":"#behavior","children":[]}]},{"level":2,"title":"7. toString method","slug":"_7-tostring-method","link":"#_7-tostring-method","children":[]},{"level":2,"title":"8. equals() and hashCode() methods in Java","slug":"_8-equals-and-hashcode-methods-in-java","link":"#_8-equals-and-hashcode-methods-in-java","children":[{"level":3,"title":"equals()","slug":"equals","link":"#equals","children":[]},{"level":3,"title":"hashCode()","slug":"hashcode","link":"#hashcode","children":[]}]},{"level":2,"title":"9. Inheritance, Method Overloading, and Method Overriding","slug":"_9-inheritance-method-overloading-and-method-overriding","link":"#_9-inheritance-method-overloading-and-method-overriding","children":[{"level":3,"title":"Inheritance","slug":"inheritance","link":"#inheritance","children":[]},{"level":3,"title":"Method Overloading","slug":"method-overloading","link":"#method-overloading","children":[]},{"level":3,"title":"Method Overriding","slug":"method-overriding","link":"#method-overriding","children":[]}]},{"level":2,"title":"10. Interface","slug":"_10-interface","link":"#_10-interface","children":[]},{"level":2,"title":"11. Abstract Class in Java","slug":"_11-abstract-class-in-java","link":"#_11-abstract-class-in-java","children":[{"level":3,"title":"Key Points","slug":"key-points","link":"#key-points","children":[]}]},{"level":2,"title":"12. Constructors - this() and super()","slug":"_12-constructors-this-and-super","link":"#_12-constructors-this-and-super","children":[{"level":3,"title":"this()","slug":"this","link":"#this","children":[]},{"level":3,"title":"super()","slug":"super","link":"#super","children":[]}]},{"level":2,"title":"13. Polymorphism and instanceof","slug":"_13-polymorphism-and-instanceof","link":"#_13-polymorphism-and-instanceof","children":[{"level":3,"title":"Polymorphism","slug":"polymorphism","link":"#polymorphism","children":[]},{"level":3,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]}]},{"level":2,"title":"14. What is Coupling","slug":"_14-what-is-coupling","link":"#_14-what-is-coupling","children":[{"level":3,"title":"loose coupling","slug":"loose-coupling","link":"#loose-coupling","children":[]},{"level":3,"title":"tight coupling","slug":"tight-coupling","link":"#tight-coupling","children":[]}]},{"level":2,"title":"15. What is cohesion?","slug":"_15-what-is-cohesion","link":"#_15-what-is-cohesion","children":[]},{"level":2,"title":"16. What is encapsulation?","slug":"_16-what-is-encapsulation","link":"#_16-what-is-encapsulation","children":[{"level":3,"title":"Encapsulation provides the following benefits","slug":"encapsulation-provides-the-following-benefits","link":"#encapsulation-provides-the-following-benefits","children":[]}]},{"level":2,"title":"17. Inner class and Static Inner class?","slug":"_17-inner-class-and-static-inner-class","link":"#_17-inner-class-and-static-inner-class","children":[{"level":3,"title":"Inner class:","slug":"inner-class","link":"#inner-class","children":[]}]},{"level":2,"title":"Static Nested Class:","slug":"static-nested-class","link":"#static-nested-class","children":[]},{"level":2,"title":"18. What is an anonymous class?","slug":"_18-what-is-an-anonymous-class","link":"#_18-what-is-an-anonymous-class","children":[]},{"level":2,"title":"19. Access Modifiers - public, private, protected, and default","slug":"_19-access-modifiers-public-private-protected-and-default","link":"#_19-access-modifiers-public-private-protected-and-default","children":[]},{"level":2,"title":"20. Final Method, Variable, and Class","slug":"_20-final-method-variable-and-class","link":"#_20-final-method-variable-and-class","children":[]},{"level":2,"title":"21. Static variables and methods","slug":"_21-static-variables-and-methods","link":"#_21-static-variables-and-methods","children":[{"level":3,"title":"Static Variable:","slug":"static-variable","link":"#static-variable","children":[]},{"level":3,"title":"Static Method:","slug":"static-method","link":"#static-method","children":[]}]},{"level":2,"title":"22. more will be coming today:)","slug":"_22-more-will-be-coming-today","link":"#_22-more-will-be-coming-today","children":[]}],"git":{"createdTime":1702349502000,"updatedTime":1702491052000,"contributors":[{"name":"youweichen0208","email":"youweichen0208@gmail.com","commits":4}]},"readingTime":{"minutes":8.62,"words":2585},"filePathRelative":"interview-prep/java.md","localizedDate":"December 13, 2023","excerpt":"<h1> Java Interview Questions</h1>\\n<h2> 1. Compare JDK vs. JVM vs. JRE</h2>\\n<h3> JVM (Java Virtual Machine)</h3>\\n<p>This is the heart of the Java Platform. It is a virtual machine that interprets Java bytecode and executes it as native code on the host machine. JVM is a part of the Java Runtime Environment.</p>","autoDesc":true}');export{e as data};
