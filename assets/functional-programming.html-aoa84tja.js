const e=JSON.parse(`{"key":"v-1e119f96","path":"/backend/functional-programming.html","title":"Functional Programming","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-01-12T00:00:00.000Z","category":["backend"],"tag":["Java","Functional Programming"],"description":"Functional Programming Streams API In Java 8, the Streams API was introduced to provide a more functional and expressive way to work with collections of data. A stream is a sequence of elements that can be processed in parallel or sequantially. Streams don't store data; they operate on the source data (e.g., a collection) and produce a result.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend/functional-programming.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Functional Programming"}],["meta",{"property":"og:description","content":"Functional Programming Streams API In Java 8, the Streams API was introduced to provide a more functional and expressive way to work with collections of data. A stream is a sequence of elements that can be processed in parallel or sequantially. Streams don't store data; they operate on the source data (e.g., a collection) and produce a result."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-13T05:22:02.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Functional Programming"}],["meta",{"property":"article:published_time","content":"2024-01-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-13T05:22:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Functional Programming\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-13T05:22:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Streams API","slug":"streams-api","link":"#streams-api","children":[{"level":3,"title":"Creating Streams:","slug":"creating-streams","link":"#creating-streams","children":[]}]},{"level":2,"title":"Method References:","slug":"method-references","link":"#method-references","children":[{"level":3,"title":"1. Reference to a Static Method","slug":"_1-reference-to-a-static-method","link":"#_1-reference-to-a-static-method","children":[]},{"level":3,"title":"2. Reference to an Instance Method of a Particular Object:","slug":"_2-reference-to-an-instance-method-of-a-particular-object","link":"#_2-reference-to-an-instance-method-of-a-particular-object","children":[]},{"level":3,"title":"3.Reference to an Instance Method of an Arbitrary Object of a Particular Type:","slug":"_3-reference-to-an-instance-method-of-an-arbitrary-object-of-a-particular-type","link":"#_3-reference-to-an-instance-method-of-an-arbitrary-object-of-a-particular-type","children":[]}]},{"level":2,"title":"Lambda Expression","slug":"lambda-expression","link":"#lambda-expression","children":[]},{"level":2,"title":"Common Examples of using functional programming:","slug":"common-examples-of-using-functional-programming","link":"#common-examples-of-using-functional-programming","children":[]}],"git":{"createdTime":1705123322000,"updatedTime":1705123322000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":1}]},"readingTime":{"minutes":1.41,"words":424},"filePathRelative":"backend/functional-programming.md","localizedDate":"January 12, 2024","excerpt":"<h1> Functional Programming</h1>\\n<h2> Streams API</h2>\\n<ul>\\n<li>In Java 8, the Streams API was introduced to provide a more functional and expressive way to work with collections of data.</li>\\n<li>A stream is a sequence of elements that can be processed in parallel or sequantially.</li>\\n<li>Streams don't store data; they operate on the source data (e.g., a collection) and produce a result.</li>\\n</ul>","autoDesc":true}`);export{e as data};
