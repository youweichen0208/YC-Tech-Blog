import{_ as e,o as a,c as n,e as s}from"./app-aY9FUwWX.js";const i={},t=s(`<h1 id="algorithm" tabindex="-1"><a class="header-anchor" href="#algorithm" aria-hidden="true">#</a> Algorithm</h1><h2 id="circular-arithmetic-for-circular-indexing" tabindex="-1"><a class="header-anchor" href="#circular-arithmetic-for-circular-indexing" aria-hidden="true">#</a> Circular Arithmetic for Circular Indexing</h2><h3 id="right-engine-next-engine" tabindex="-1"><a class="header-anchor" href="#right-engine-next-engine" aria-hidden="true">#</a> Right Engine (Next Engine)</h3><p>If we are at position <code>p</code> and we want to find the next engine to the right:</p><ul><li>The next engine is at position <code>p + 1</code></li><li>If you&#39;re at the last engine <code>N-1</code>, the next engine should be <code>0</code>.</li></ul><p>So the formula is</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token class-name">N</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="left-engine-previous-engine" tabindex="-1"><a class="header-anchor" href="#left-engine-previous-engine" aria-hidden="true">#</a> Left Engine (Previous Engine)</h3><p>If we are at position <code>P</code> and want to find the previous engine to the left:</p><ul><li>The previous engine is at position <code>p - 1</code>.</li><li>If we are at the first engine <code>0</code>, the previous engine should wrap around to <code>N - 1</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token class-name">N</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),o=[t];function r(c,l){return a(),n("div",null,o)}const d=e(i,[["render",r],["__file","huawei.html.vue"]]);export{d as default};
