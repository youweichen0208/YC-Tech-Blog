const e=JSON.parse(`{"key":"v-b29d5f4c","path":"/interview-prep/java.html","title":"Java Interview Questions","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-12-13T00:00:00.000Z","category":["interview"],"tag":["Java"],"star":true,"sticky":true,"description":"Java Interview Questions What do you understand by Java virtual machine? Java Virtual Machine is a virtual machine that enables the computer to run the Java program. JVM acts like a run-time engine which calls the main method present in the Java code. JVM is a part of the JRE (Java Runtime Environment). The Java code is compiled by JVM to be a Bytecode which is machine independent.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/interview-prep/java.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Java Interview Questions"}],["meta",{"property":"og:description","content":"Java Interview Questions What do you understand by Java virtual machine? Java Virtual Machine is a virtual machine that enables the computer to run the Java program. JVM acts like a run-time engine which calls the main method present in the Java code. JVM is a part of the JRE (Java Runtime Environment). The Java code is compiled by JVM to be a Bytecode which is machine independent."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-12-16T03:11:59.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-12-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-16T03:11:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Interview Questions\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-16T03:11:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"What do you understand by Java virtual machine?","slug":"what-do-you-understand-by-java-virtual-machine","link":"#what-do-you-understand-by-java-virtual-machine","children":[]},{"level":2,"title":"Compare JDK vs. JVM vs. JRE","slug":"compare-jdk-vs-jvm-vs-jre","link":"#compare-jdk-vs-jvm-vs-jre","children":[{"level":3,"title":"JVM (Java Virtual Machine)","slug":"jvm-java-virtual-machine","link":"#jvm-java-virtual-machine","children":[]},{"level":3,"title":"Internal architecture of JVM","slug":"internal-architecture-of-jvm","link":"#internal-architecture-of-jvm","children":[]},{"level":3,"title":"JRE (Java Runtime Environment)","slug":"jre-java-runtime-environment","link":"#jre-java-runtime-environment","children":[]},{"level":3,"title":"JDK (Java Development Kit)","slug":"jdk-java-development-kit","link":"#jdk-java-development-kit","children":[]}]},{"level":2,"title":"How many types of memory areas are allocated by JVM?","slug":"how-many-types-of-memory-areas-are-allocated-by-jvm","link":"#how-many-types-of-memory-areas-are-allocated-by-jvm","children":[]},{"level":2,"title":"What is JIT compiler?","slug":"what-is-jit-compiler","link":"#what-is-jit-compiler","children":[]},{"level":2,"title":"What is classloader?","slug":"what-is-classloader","link":"#what-is-classloader","children":[]},{"level":2,"title":"What is the default value of the local variables?","slug":"what-is-the-default-value-of-the-local-variables","link":"#what-is-the-default-value-of-the-local-variables","children":[]},{"level":2,"title":"What are the advantages of packages in Java?","slug":"what-are-the-advantages-of-packages-in-java","link":"#what-are-the-advantages-of-packages-in-java","children":[]},{"level":2,"title":"Core Java - OOPs Concepts:","slug":"core-java-oops-concepts","link":"#core-java-oops-concepts","children":[{"level":3,"title":"What are the main features of OOP?","slug":"what-are-the-main-features-of-oop","link":"#what-are-the-main-features-of-oop","children":[]},{"level":3,"title":"What is an object?","slug":"what-is-an-object","link":"#what-is-an-object","children":[]},{"level":3,"title":"What is the difference between an object-oriented programming language and object-based programming language?","slug":"what-is-the-difference-between-an-object-oriented-programming-language-and-object-based-programming-language","link":"#what-is-the-difference-between-an-object-oriented-programming-language-and-object-based-programming-language","children":[]},{"level":3,"title":"What will be the initial value of an object reference which is defined as an instance variable?","slug":"what-will-be-the-initial-value-of-an-object-reference-which-is-defined-as-an-instance-variable","link":"#what-will-be-the-initial-value-of-an-object-reference-which-is-defined-as-an-instance-variable","children":[]}]},{"level":2,"title":"Core Java - OOP Concepts: Constructor Interview Questions:","slug":"core-java-oop-concepts-constructor-interview-questions","link":"#core-java-oop-concepts-constructor-interview-questions","children":[{"level":3,"title":"What is a constructor?","slug":"what-is-a-constructor","link":"#what-is-a-constructor","children":[]},{"level":3,"title":"Is constructor inherited?","slug":"is-constructor-inherited","link":"#is-constructor-inherited","children":[]},{"level":3,"title":"Can you make a constructor final?","slug":"can-you-make-a-constructor-final","link":"#can-you-make-a-constructor-final","children":[]},{"level":3,"title":"Can we overload the constructors?","slug":"can-we-overload-the-constructors","link":"#can-we-overload-the-constructors","children":[]},{"level":3,"title":"What are the differences between constructors and methods?","slug":"what-are-the-differences-between-constructors-and-methods","link":"#what-are-the-differences-between-constructors-and-methods","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: static keyword Interview Questions:","slug":"core-java-oops-concepts-static-keyword-interview-questions","link":"#core-java-oops-concepts-static-keyword-interview-questions","children":[{"level":3,"title":"What is the static variable?","slug":"what-is-the-static-variable","link":"#what-is-the-static-variable","children":[]},{"level":3,"title":"What is the static method?","slug":"what-is-the-static-method","link":"#what-is-the-static-method","children":[]},{"level":3,"title":"What are the restrictions that are applied to the Java static methods?","slug":"what-are-the-restrictions-that-are-applied-to-the-java-static-methods","link":"#what-are-the-restrictions-that-are-applied-to-the-java-static-methods","children":[]},{"level":3,"title":"Why is the main method static?","slug":"why-is-the-main-method-static","link":"#why-is-the-main-method-static","children":[]},{"level":3,"title":"Can we override the static methods?","slug":"can-we-override-the-static-methods","link":"#can-we-override-the-static-methods","children":[]},{"level":3,"title":"What is the static block?","slug":"what-is-the-static-block","link":"#what-is-the-static-block","children":[]},{"level":3,"title":"Can we execute a program without main() method?","slug":"can-we-execute-a-program-without-main-method","link":"#can-we-execute-a-program-without-main-method","children":[]},{"level":3,"title":"What is the difference between static(class) method and instance method?","slug":"what-is-the-difference-between-static-class-method-and-instance-method","link":"#what-is-the-difference-between-static-class-method-and-instance-method","children":[]},{"level":3,"title":"Can we make constructors static?","slug":"can-we-make-constructors-static","link":"#can-we-make-constructors-static","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: Inheritance Interview Questions:","slug":"core-java-oops-concepts-inheritance-interview-questions","link":"#core-java-oops-concepts-inheritance-interview-questions","children":[{"level":3,"title":"Can we assign the reference to this variable?","slug":"can-we-assign-the-reference-to-this-variable","link":"#can-we-assign-the-reference-to-this-variable","children":[]},{"level":3,"title":"Can this keyword be used to refer static members?","slug":"can-this-keyword-be-used-to-refer-static-members","link":"#can-this-keyword-be-used-to-refer-static-members","children":[]},{"level":3,"title":"What is the Inheritance?","slug":"what-is-the-inheritance","link":"#what-is-the-inheritance","children":[]},{"level":3,"title":"Why is Inheritance used in Java?","slug":"why-is-inheritance-used-in-java","link":"#why-is-inheritance-used-in-java","children":[]},{"level":3,"title":"Which class is the superclass for all the classes?","slug":"which-class-is-the-superclass-for-all-the-classes","link":"#which-class-is-the-superclass-for-all-the-classes","children":[]},{"level":3,"title":"What is aggregation?","slug":"what-is-aggregation","link":"#what-is-aggregation","children":[]},{"level":3,"title":"What is composition?","slug":"what-is-composition","link":"#what-is-composition","children":[]},{"level":3,"title":"Why does Java not support pointers?","slug":"why-does-java-not-support-pointers","link":"#why-does-java-not-support-pointers","children":[]},{"level":3,"title":"Can we use this() and super() both in a constructor?","slug":"can-we-use-this-and-super-both-in-a-constructor","link":"#can-we-use-this-and-super-both-in-a-constructor","children":[]}]},{"level":2,"title":"Core Java - OOPas Concepts: Method Overloading Interview Questions:","slug":"core-java-oopas-concepts-method-overloading-interview-questions","link":"#core-java-oopas-concepts-method-overloading-interview-questions","children":[{"level":3,"title":"What is method overloading?","slug":"what-is-method-overloading","link":"#what-is-method-overloading","children":[]},{"level":3,"title":"Why is method overloading not possible by changing the return type in Java?","slug":"why-is-method-overloading-not-possible-by-changing-the-return-type-in-java","link":"#why-is-method-overloading-not-possible-by-changing-the-return-type-in-java","children":[]},{"level":3,"title":"Can we overload the methods by making them static?","slug":"can-we-overload-the-methods-by-making-them-static","link":"#can-we-overload-the-methods-by-making-them-static","children":[]},{"level":3,"title":"Can we overload the main() method?","slug":"can-we-overload-the-main-method","link":"#can-we-overload-the-main-method","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: Method Overriding Interview Questions:","slug":"core-java-oops-concepts-method-overriding-interview-questions","link":"#core-java-oops-concepts-method-overriding-interview-questions","children":[{"level":3,"title":"What is method overriding?","slug":"what-is-method-overriding","link":"#what-is-method-overriding","children":[]},{"level":3,"title":"Can we override the static method?","slug":"can-we-override-the-static-method","link":"#can-we-override-the-static-method","children":[]},{"level":3,"title":"Why can't we not override static method?","slug":"why-can-t-we-not-override-static-method","link":"#why-can-t-we-not-override-static-method","children":[]},{"level":3,"title":"Can we override the overloaded method?","slug":"can-we-override-the-overloaded-method","link":"#can-we-override-the-overloaded-method","children":[]},{"level":3,"title":"Differences between method Overloading and Overriding?","slug":"differences-between-method-overloading-and-overriding","link":"#differences-between-method-overloading-and-overriding","children":[]},{"level":3,"title":"Can we override the private methods?","slug":"can-we-override-the-private-methods","link":"#can-we-override-the-private-methods","children":[]},{"level":3,"title":"Can we change the scope of the overridden method in the subclass?","slug":"can-we-change-the-scope-of-the-overridden-method-in-the-subclass","link":"#can-we-change-the-scope-of-the-overridden-method-in-the-subclass","children":[]},{"level":3,"title":"Can we modify the throws calsue of the superclass method while overriding it in the subclass?","slug":"can-we-modify-the-throws-calsue-of-the-superclass-method-while-overriding-it-in-the-subclass","link":"#can-we-modify-the-throws-calsue-of-the-superclass-method-while-overriding-it-in-the-subclass","children":[]},{"level":3,"title":"What is covariant return type?","slug":"what-is-covariant-return-type","link":"#what-is-covariant-return-type","children":[]}]},{"level":2,"title":"Core Java - OOPs Concepts: final keyword Interview Questions:","slug":"core-java-oops-concepts-final-keyword-interview-questions","link":"#core-java-oops-concepts-final-keyword-interview-questions","children":[{"level":3,"title":"What is the final variable?","slug":"what-is-the-final-variable","link":"#what-is-the-final-variable","children":[]},{"level":3,"title":"What is the final blank variable?","slug":"what-is-the-final-blank-variable","link":"#what-is-the-final-blank-variable","children":[]},{"level":3,"title":"Can we initialize the final blank variable?","slug":"can-we-initialize-the-final-blank-variable","link":"#can-we-initialize-the-final-blank-variable","children":[]},{"level":3,"title":"Can we declare the main method as final?","slug":"can-we-declare-the-main-method-as-final","link":"#can-we-declare-the-main-method-as-final","children":[]},{"level":3,"title":"Can we declare a constructor as final?","slug":"can-we-declare-a-constructor-as-final","link":"#can-we-declare-a-constructor-as-final","children":[]},{"level":3,"title":"What is the difference between the final method and abstract method?","slug":"what-is-the-difference-between-the-final-method-and-abstract-method","link":"#what-is-the-difference-between-the-final-method-and-abstract-method","children":[]}]}],"git":{"createdTime":1702349502000,"updatedTime":1702696319000,"contributors":[{"name":"youweichen0208","email":"youweichen0208@gmail.com","commits":5}]},"readingTime":{"minutes":11.41,"words":3424},"filePathRelative":"interview-prep/java.md","localizedDate":"December 13, 2023","excerpt":"<h1> Java Interview Questions</h1>\\n<h2> What do you understand by Java virtual machine?</h2>\\n<p>Java Virtual Machine is a virtual machine that enables the computer to run the Java program. JVM acts like a run-time engine which calls the main method present in the Java code. JVM is a part of the JRE (Java Runtime Environment). The Java code is compiled by JVM to be a Bytecode which is machine independent.</p>","autoDesc":true}`);export{e as data};
