import{_ as n,o as s,c as a,e as t}from"./app-G_s2QJnk.js";const e={},o=t(`<h1 id="angular" tabindex="-1"><a class="header-anchor" href="#angular" aria-hidden="true">#</a> Angular</h1><p>Angular is a popular open-source web application framework developed by Google. It&#39;s used for building single-page applications (SPAs), which are web applications or websites that interact with user by dynamically rewriting the current web page with new data from the web server, instead of the default method of the browser loading entire new pages.</p><p>Angular uses TypeScript, a statically typed superset of JavaScript, as its primary language. It provides a way to organize code using components and modules, making it a good choice for large-scale applications.</p><h2 id="install-angular-cli" tabindex="-1"><a class="header-anchor" href="#install-angular-cli" aria-hidden="true">#</a> Install Angular CLI</h2><p>We can install Angular CLI globally on our machine using npm:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g @angular/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We can verify the installation by checking the version of Angular CLI:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ng --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we are ready to create a new Angular application using the <code>ng new</code> command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ng new my-angular-app --no-standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To run our Angular application, we can use the <code>ng serve</code> command in our terminal.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ng serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="root-module-app-module-ts" tabindex="-1"><a class="header-anchor" href="#root-module-app-module-ts" aria-hidden="true">#</a> Root module - app.module.ts</h2><p>The <code>app.module.ts</code> file is the root module of an Angular application. It&#39;s where we declare which components, directives, and pipes belong to the application. It&#39;s also where we specify and register which other modules to use, such as modules from the Angular library or our own custom modules.</p><h2 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> Component</h2><p>A component controls a patch of screen called a view. It consists of a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction of the HTML template and the rendered DOM structure, while the style sheet describes its appearance.</p><h3 id="component-metadata" tabindex="-1"><a class="header-anchor" href="#component-metadata" aria-hidden="true">#</a> Component metadata</h3><p>The <code>@Component</code> decorator identifies the class immediately below it as a component class, and specifies its metadata. The typescript class is not a component until we mark it as one with the <code>@Component</code> decorator. The metadata associates a template (html code) with the component. Together, the component and its template describe a view.</p><h3 id="create-a-new-component-in-angular-using-cli" tabindex="-1"><a class="header-anchor" href="#create-a-new-component-in-angular-using-cli" aria-hidden="true">#</a> Create a new component in Angular using CLI</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ng g c component_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="xxx-component-ts" tabindex="-1"><a class="header-anchor" href="#xxx-component-ts" aria-hidden="true">#</a> xxx.component.ts</h3><p>The TypeScript class file <code>xxx.component.ts</code> for an Angular component serve as the initialization and configuration for the component. It&#39;s where we define the component&#39;s data(properties) and behavior (methods), and it&#39;s also where we specify metadata for the component, such as its selector and the paths to its template and style files.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-servers&quot;</span><span class="token punctuation">,</span>
  styleUrl<span class="token operator">:</span> <span class="token string">&quot;./servers.component.css&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServersComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@Component({})</code> a decorator that marks the class as an Angular component and provides meta data about the component.</li><li><code>selector: &#39;app-servers&#39;</code>: This is the CSS selector that Angular will use to identify this component in the templates. We can use <code>&lt;app-servers&gt;&lt;/app-servers&gt;</code> in our HTML to include this component.</li><li><code>styleUrl: &#39;./servers.component.css&#39;</code>: Thisis the path to the CSS file that contains styles for this component.</li></ul><h3 id="register-the-custom-components" tabindex="-1"><a class="header-anchor" href="#register-the-custom-components" aria-hidden="true">#</a> Register the custom components:</h3><p>We should first register components before using it in other components.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  declarations<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">,</span> ServerComponent<span class="token punctuation">,</span> ServersComponent<span class="token punctuation">]</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>BrowserModule<span class="token punctuation">,</span> AppRoutingModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>The component must be declared in an NgModule using the <code>declarations</code> array, and if we want to use it in another module, it must also be added to the <code>exports</code> array.</strong> we register <code>ServerComponent</code> here in <code>app.module.ts</code> file.</p><h3 id="using-the-component" tabindex="-1"><a class="header-anchor" href="#using-the-component" aria-hidden="true">#</a> Using the Component</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hi <span class="token constant">I</span> am <span class="token keyword">in</span> the App component<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>app<span class="token operator">-</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>server<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After registering it, we can call Server component <code>&lt;app-server&gt; &lt;/app-server&gt;</code> anywhere in the different components html file in the same module.</p><h2 id="data-binding" tabindex="-1"><a class="header-anchor" href="#data-binding" aria-hidden="true">#</a> Data binding:</h2><h3 id="string-interpolation" tabindex="-1"><a class="header-anchor" href="#string-interpolation" aria-hidden="true">#</a> String Interpolation</h3><p>String interpolation in Angular is a one-way data binding technique used to output data from our TypeScript code into the HTML view. We can display the data properties of a class in an Angular component&#39;s template. Angular uses double curly braces <code>{{}}</code> to bind data in one direction, from our TypeScript code to the HTML template.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  title <span class="token operator">=</span> <span class="token string">&quot;Hello Angular&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, <code>{{title}}</code> in the HTML is replaced by the value of the <code>title</code> property from the TypeScript code.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-server&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./server.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServerComponent</span> <span class="token punctuation">{</span>
  serverId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  serverStatus<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;offline&quot;</span><span class="token punctuation">;</span>

  <span class="token function">getServerStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverStatus<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Server id {{ serverId }} is {{ getServerStatus() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="property-binding" tabindex="-1"><a class="header-anchor" href="#property-binding" aria-hidden="true">#</a> Property Binding</h3><p>Property binding in Angular is a one-way data binding technique from the component to the view. It binds a DOM property (like <code>value</code>, <code>disabled</code>, <code>src</code>) to a property defined in the component&#39;s TypeScript code.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  isDisabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isDisabled<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>disabled</code> attribute of the button is bound to the <code>isDisabled</code> property in the component. The button will be disabled because <code>isDisabled</code> is <code>true</code>.</p><p>The syntax for property binding is square brackets <code>[ ]</code> around the property name on the left-hand side of an assignment. The right-hand side of the assignment is the name of the property in the component.</p><h3 id="event-binding" tabindex="-1"><a class="header-anchor" href="#event-binding" aria-hidden="true">#</a> Event binding</h3><p>Event binding in Angular is a one-way data binding from the view to the component. It&#39;s used to respond to user actions like clicks, key presses, mouse movements, etc.</p><p>We bind a DOM event to a method defined in our component&#39;s TypeScript code. When the event is triggered, the associated method is executed.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  clickMessage <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

  <span class="token function">onClickMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clickMessage <span class="token operator">=</span> <span class="token string">&quot;You clicked the button!&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClickMe()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ clickMessage }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In Angular, the <code>(click)</code> syntax is used specifically for click events. In this example, the <code>(click)</code> event on the button is bound to the <code>onClickMe()</code> method in the component. When the button is clicked, <code>onClickedMe()</code> is executed, updating <code>clickMessgae</code> which is then displayed in the view.</p><h4 id="passing-and-using-data-with-event-binding" tabindex="-1"><a class="header-anchor" href="#passing-and-using-data-with-event-binding" aria-hidden="true">#</a> Passing and using data with event binding</h4><p>In Angular, we can pass data from our view to our component when an event is triggered. This is often done by passing the event object, but we can also pass other data.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Item 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item 3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">onClick</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>let item of items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick(item)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, when an item is clicked, the <code>onClick</code> method is called with the clicked item.</p><h2 id="directives" tabindex="-1"><a class="header-anchor" href="#directives" aria-hidden="true">#</a> Directives</h2><p>Directives are a core feature of Angular. They are classes that add additional behavior to elements in our Angular applications. Directives allow us to create highly dynamic and responsive views. Use Angular&#39;s built-in directives to manage forms, lists, styles, and what users can see.</p><h3 id="component-directives" tabindex="-1"><a class="header-anchor" href="#component-directives" aria-hidden="true">#</a> <strong>Component Directives</strong>:</h3><p>These are the most common type of directives and are essentially classes that are declared with the <code>@Component</code> decorator. Each component we create in Angular is a directive and can encapsulate its own view and logic.</p><h3 id="attribute-directives" tabindex="-1"><a class="header-anchor" href="#attribute-directives" aria-hidden="true">#</a> <strong>Attribute Directives</strong>:</h3><p>Attribute directives listen to and modify the behavior of other HTML elements, attributes, properties, and components.</p><p>The most common attribute directives are as follows:</p><ul><li><strong>NgClass</strong> Add or removes a set of CSS classes.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  isSpecial <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngClass]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{&#39;special&#39;: isSpecial}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  This div has the &#39;special&#39; class if isSpecial is true
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>div</code> will have the <code>special</code> class if <code>isSpecial</code> is <code>true</code>. If <code>isSpecial</code> is <code>false</code>, the <code>special</code> class will be removed. The <code>ngClass</code> directive is a good way to set classes dynamically, but for static classes, it&#39;s usually better to use the standard <code>class</code> attribute.</p><ul><li><strong>NgStyle</strong>: Add or removes a set of HTML styles.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  isSpecial <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">[ngStyle]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{&#39;color&#39;: isSpecial ? &#39;red&#39; : &#39;black&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  This text is red if isSpecial is true, otherwise it&#39;s black
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example the color of the text in the <code>div</code> is red if <code>isSpecial</code> is <code>true</code>, and black if <code>isSpecial</code> is <code>false</code>.</p><ul><li><strong>NgModel</strong>: Adds two-way data binding to an HTML form element</li></ul><p>Two-way data binding in Angular is a mechanism to synchronize the model and the view. Changes in the model update the view, and changes in the view update the model. Angular provides the <code>[(ngModel)]</code> directive for two-way data binding. To use <code>[(ngModel)]</code>, we need to import <code>FormsModule</code> from <code>@angular/forms</code> in our module.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>input field</code> and the <code>p</code> tag are bound to the <code>name</code> property of the component. When we type in the <code>input</code> field, the <code>name</code> property is updated, and the updated <code>name</code> is displayed in the <code>p</code> tag.</p><ul><li><strong>Structural Directives</strong>: These directives change the DOM layout by adding and removing DOM elements. These are responsible for HTML layout. Examples are the built-in <code>*ngFor</code> and <code>*ngIf</code> directives.</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showDiv<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Only show if showDiv is true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>let item of items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="structural-directives" tabindex="-1"><a class="header-anchor" href="#structural-directives" aria-hidden="true">#</a> Structural directives:</h3><p>Structural directives change the DOM layout by adding or removing DOM elements.</p><ul><li><strong>ngIf directive</strong></li></ul><p>The <code>*ngIf</code> directive in Angular is used to conditionally include or exclude a block of HTML from the DOM. The <code>*ngIf</code> directive is commonly used to output data conditionally based on the state of the component.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  showDiv <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showDiv; else elseBlock<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  This div is visible because showDiv is true
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-template</span> <span class="token attr-name">#elseBlock</span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This div is visible because showDiv is false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-template</span>
<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, if <code>showDiv</code> is <code>true</code>, the first <code>div</code> is displayed. If <code>showDiv</code> is <code>false</code>, the <code>div</code> inside the <code>ng-template</code> with the <code>#elseBlock</code> reference is displayed.</p><p>-- <strong>ngFor directive</strong></p><p>The <code>*ngFor</code> directive in Angular is a structural directive that is used for rendering a list of items. It&#39;s similar to a <code>for</code> loop in JavaScript.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Item 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item 3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- app.component.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>let item of items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>*ngFor</code> directive iterates over the <code>items</code> array from the component. For each item in the array, it creates a new <code>div</code> and sets the content of the <code>div</code> to the item.</p><h2 id="services-and-dependency-injection" tabindex="-1"><a class="header-anchor" href="#services-and-dependency-injection" aria-hidden="true">#</a> Services and Dependency Injection:</h2><p>A service is typically a class with a narrow, well-defined purpose. It should so something specific and do it well.</p><p>Ideally, a component&#39;s job is to enable only the user experience. A component should present properties and methods for data binding to mediate between the view and the application logic.</p><p>A component should use services for tasks that don&#39;t involve the view or application logic. Services are good for tasks such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an <strong>injectable service class</strong>, we make those tasks available to any component.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providedIn<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
  data <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>

  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MyService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./my.service&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./app.component.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> myService<span class="token operator">:</span> MyService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> myService<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dependency-injection" tabindex="-1"><a class="header-anchor" href="#dependency-injection" aria-hidden="true">#</a> Dependency Injection:</h2><p>Dependency injection is the part of the Angular framework that provides components with access to services and other resources. Angular provides the ability for us to inject a service into a component to give that component access to the service.</p><p>Add the <code>@Injectable()</code> decorator to a service class so that Angular can inject it into a component as a dependency.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>providedIn<span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>providedIn</code> property is part of the <code>@Injectable</code> decorator in Angular. It&#39;s used to specify where the service should be provided and instantiated.</p><h2 id="template-variables" tabindex="-1"><a class="header-anchor" href="#template-variables" aria-hidden="true">#</a> template variables</h2><p>Templates variables help us use data from one part of a template in another part of the template. In the template, we use the hash symbol, <code>#</code>, to declare a template variable.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">#phone</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>phone number<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>input #phone placeholder<span class="token operator">=</span><span class="token string">&quot;phone number&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lots <span class="token keyword">of</span> other elements <span class="token operator">--</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> phone refers to the input element<span class="token punctuation">;</span> pass its <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value</span><span class="token template-punctuation string">\`</span></span> to an event handler <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> <span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&quot;callPhone(phone.value)&quot;</span><span class="token operator">&gt;</span>Call<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The template variable, <code>#phone</code>, declares a <code>phone</code> variable with the <code>&lt;input&gt;</code> element as its value.</p><h2 id="angular-forms" tabindex="-1"><a class="header-anchor" href="#angular-forms" aria-hidden="true">#</a> Angular Forms</h2><p>Angular provides two different approaches to handling user input through forms: reactice and template-driven. Both capture user input events from the view, validate the user input, create a form model and data model to update, and provide a way to track changes.</p><h3 id="template-driven-forms" tabindex="-1"><a class="header-anchor" href="#template-driven-forms" aria-hidden="true">#</a> Template-driven Forms:</h3><p>Template-driven forms are forms where we write the logic, validations, controls etc, for the form in the template part of the code (html code). The template is responsible for setting up the form, the validation, control, group etc. These forms rely on directives in the template to create and manipulate the underlying object model. They are useful for adding a smple form to an app, such as email list signup form, where the form is going to be static and does not require any change due to interaction.</p><h3 id="reactive-forms" tabindex="-1"><a class="header-anchor" href="#reactive-forms" aria-hidden="true">#</a> Reactive Forms:</h3><p>Reactive forms on the other hand are forms where we define the structure of the form as well as logic, validation, controls, etc in the component class.</p><ol><li><strong>Import ReactiveFormsModule:</strong> First, we need to import <code>ReactiveFormsModule</code> in our module file (usually <code>app.module.ts</code>) and add it to the <code>imports</code> array:</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/platform-browser&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ReactiveFormsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/forms&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.component&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SignupComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./signup/signup.component&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  declarations<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">,</span> SignupComponent<span class="token punctuation">]</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>BrowserModule<span class="token punctuation">,</span> ReactiveFormsModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Create a <code>FormGroup</code> instance</strong>: Create a <code>FormGroup</code> property in the component class and set the property to a new form group instance. To initialize the form group, provide the constructor with an object of named keys mapped to their control.</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FormControl<span class="token punctuation">,</span> FormGroup<span class="token punctuation">,</span> Validators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/forms&quot;</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">&quot;app-signup&quot;</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">&quot;./signup.component.html&quot;</span><span class="token punctuation">,</span>
  styleUrl<span class="token operator">:</span> <span class="token string">&quot;./signup.component.css&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SignupComponent</span> <span class="token punctuation">{</span>
  form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    email<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Validators<span class="token punctuation">.</span>required<span class="token punctuation">,</span> Validators<span class="token punctuation">.</span>email<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      Validators<span class="token punctuation">.</span>required<span class="token punctuation">,</span>
      Validators<span class="token punctuation">.</span><span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      Validators<span class="token punctuation">.</span><span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      Validators<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9]*$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    firstname<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    lastname<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    phone<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">get</span> <span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Above code is the Reactive form validator example. To see the specific Angular Validator API, go to https://angular.io/api/forms/Validators</p></li><li><p>To print the error msg if the validation fails, below is the code snippet of how to handle it in HTML.</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>
        password?.errors?.[&#39;required&#39;] &amp;&amp; form.controls.password.touched
      <span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error-message<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  Password is required.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(form.controls.password.errors?.[&#39;minlength&#39;] || form.controls.password.errors?.[&#39;maxlength&#39;] || form.controls.password.errors?.[&#39;pattern&#39;])&amp;&amp; form.controls.password.touched<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error-message<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  Password needs to be 6-20 alphabet or numeric.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>In Angular, the <code>touched</code> property of a form control is a boolean that indicates whether the user has interacted with the control.</p></li><li><p>In Angular&#39;s Reactive Forms, <code>form.controls</code> is a property that returns an object containing all the <code>FormControl</code> instances in the <code>FormGroup</code>.</p></li><li><p><strong>Notice: In the <code>Validators</code> class in Angular, the methods for minimum and maximum length validation are <code>minLength</code> and <code>maxLenth</code>, respectively. However, when accessing these validation errors in the <code>errors</code> object of a form control, they are all lowercase: <code>minlength</code> and <code>maxlength</code>. When checking for these validation errors, we should use <code>form.controls.password.errors?.[&#39;minlength&#39;]</code> and <code>form.controls.password.errors?.[&#39;maxlength&#39;]</code></strong></p></li></ul><ol start="3"><li><strong>Associate the <code>FormGroup</code> model and view</strong>: A form group tracks the status and changes for each of its controls, so if one of the controls changes, the parent control also emits a new status or value change. The model for the group is maintained from its members. After we define the model, we must update the template to reflect the model in the view.</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>form <span class="token punctuation">[</span>formGroup<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;profileForm&quot;</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;first-name&quot;</span><span class="token operator">&gt;</span>First Name<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;first-name&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> formControlName<span class="token operator">=</span><span class="token string">&quot;firstName&quot;</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;last-name&quot;</span><span class="token operator">&gt;</span>Last Name<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;last-name&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> formControlName<span class="token operator">=</span><span class="token string">&quot;lastName&quot;</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just as a form group contains a group of controls, the profileForm <code>FormGroup</code> is bound to the <code>form</code> element with the <code>FormGroup</code> directive, creating a communication layer between the model and the form containing the inputs.</p><ol start="4"><li><strong>Save from data</strong>: The <code>ProfileEditor</code> component accepts input from the user, but in a real scenario we want to capture the form value and make it available for further processing outside the component. The <code>FormGroup</code> directive listens for the <code>submit</code> event emitted by the <code>form</code> element and emits an <code>ngSubmit</code> event that we can bind to a callback function. Add an <code>ngSubmit</code> event listener to the <code>form</code> tag with the <code>onSubmit()</code> callback method.</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>form <span class="token punctuation">[</span>formGroup<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;profileForm&quot;</span> <span class="token punctuation">(</span>ngSubmit<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&quot;onSubmit()&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>The \`onSubmit()\` method in the \`ProfileEditor\` component captures the current value of \`profileForm\`. The following example uses \`console.warn\` to log a message to the browser console.
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// TODO: Use EventEmitter with form value</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>profileForm<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="routing-in-angular" tabindex="-1"><a class="header-anchor" href="#routing-in-angular" aria-hidden="true">#</a> Routing in Angular</h2><p>Routing in Angular is a mechanism to navigate between different views or components based on the browser&#39;s URL or user actions.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HomeComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./home/home.component&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RouterModule<span class="token punctuation">,</span> Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/router&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./login/login.component&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SignupComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./signup/signup.component&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ProductsComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./products/products.component&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> routes<span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> HomeComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> LoginComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;signup&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> SignupComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;products/:category&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> ProductsComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  exports<span class="token operator">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppRoutingModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>First, we need to import the <code>RouterModule</code> and <code>Routes</code> from <code>@angular/router</code></li><li>Define the routes. Each route is an object with a <code>path</code> and a <code>component</code></li><li>Call <code>RouterModule.forRoot()</code> and include the result in our application module&#39;s <code>imports</code> array.</li><li>Use the <code>&lt;router-outlet&gt;</code> directive to indicate where the router should display the components for each route.</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">[routerLink]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;/first-component&#39;]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Go to First Component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">[routerLink]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;/second-component&#39;]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Go to Second Component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>To navigate to a route, use the <code>[routerLink]</code> directive</li></ol>`,132),p=[o];function c(i,l){return s(),a("div",null,p)}const u=n(e,[["render",c],["__file","angular.html.vue"]]);export{u as default};
