const e=JSON.parse(`{"key":"v-27db0406","path":"/backend/asynchronous.html","title":"Asynchronous programming in C#","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-03-13T00:00:00.000Z","category":["backend"],"tag":["C#",".net","Asynchronous programming"],"description":"Asynchronous programming in C# What is asynchronous programming in C# Asychronous programming in C# allows us to execute tasks concurrently without blocking the main thread of execution. It's particularly useful for I/O-bound operations such as reading from or writing to a file, making network requests, or querying a database, where the program would otherwise spend most of its time waiting for the operation to complete.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend/asynchronous.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Asynchronous programming in C#"}],["meta",{"property":"og:description","content":"Asynchronous programming in C# What is asynchronous programming in C# Asychronous programming in C# allows us to execute tasks concurrently without blocking the main thread of execution. It's particularly useful for I/O-bound operations such as reading from or writing to a file, making network requests, or querying a database, where the program would otherwise spend most of its time waiting for the operation to complete."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-13T17:44:33.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".net"}],["meta",{"property":"article:tag","content":"Asynchronous programming"}],["meta",{"property":"article:published_time","content":"2024-03-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-13T17:44:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Asynchronous programming in C#\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-13T17:44:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"What is asynchronous programming in C#","slug":"what-is-asynchronous-programming-in-c","link":"#what-is-asynchronous-programming-in-c","children":[]},{"level":2,"title":"Overview of the asynchronous model","slug":"overview-of-the-asynchronous-model","link":"#overview-of-the-asynchronous-model","children":[{"level":3,"title":"I/O-bound example: Download data from a web service","slug":"i-o-bound-example-download-data-from-a-web-service","link":"#i-o-bound-example-download-data-from-a-web-service","children":[]},{"level":3,"title":"CPU-bound example: Perform a calculation for a game","slug":"cpu-bound-example-perform-a-calculation-for-a-game","link":"#cpu-bound-example-perform-a-calculation-for-a-game","children":[]},{"level":3,"title":"Recognize CPU-bound and I/O-bound work","slug":"recognize-cpu-bound-and-i-o-bound-work","link":"#recognize-cpu-bound-and-i-o-bound-work","children":[]}]},{"level":2,"title":"Async return types (C#)","slug":"async-return-types-c","link":"#async-return-types-c","children":[{"level":3,"title":"Task return type:","slug":"task-return-type","link":"#task-return-type","children":[]},{"level":3,"title":"Task<TResult> return type","slug":"task-tresult-return-type","link":"#task-tresult-return-type","children":[]},{"level":3,"title":"Void return type","slug":"void-return-type","link":"#void-return-type","children":[]}]},{"level":2,"title":"What is the difference between multi-threading and asynchronous programming?","slug":"what-is-the-difference-between-multi-threading-and-asynchronous-programming","link":"#what-is-the-difference-between-multi-threading-and-asynchronous-programming","children":[]},{"level":2,"title":"Explain the scenarios where would we use Task.WhenAny() and Task.WhenAll()?","slug":"explain-the-scenarios-where-would-we-use-task-whenany-and-task-whenall","link":"#explain-the-scenarios-where-would-we-use-task-whenany-and-task-whenall","children":[{"level":3,"title":"Task.WhenAny():","slug":"task-whenany","link":"#task-whenany","children":[]},{"level":3,"title":"Task.WhenAll():","slug":"task-whenall","link":"#task-whenall","children":[]}]}],"git":{"createdTime":1710351718000,"updatedTime":1710351873000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":2}]},"readingTime":{"minutes":4.74,"words":1423},"filePathRelative":"backend/asynchronous.md","localizedDate":"March 13, 2024","excerpt":"<h1> Asynchronous programming in C#</h1>\\n<h2> What is asynchronous programming in C#</h2>\\n<p>Asychronous programming in C# allows us to execute tasks concurrently without blocking the main thread of execution. It's particularly useful for I/O-bound operations such as reading from or writing to a file, making network requests, or querying a database, where the program would otherwise spend most of its time waiting for the operation to complete.</p>","autoDesc":true}`);export{e as data};
