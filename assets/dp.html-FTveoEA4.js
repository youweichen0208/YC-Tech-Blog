import{_ as n,o as a,c as s,e}from"./app-VDP0noFx.js";const t={},o=e(`<h1 id="dynamic-programming" tabindex="-1"><a class="header-anchor" href="#dynamic-programming" aria-hidden="true">#</a> Dynamic Programming</h1><h2 id="_1-what-exactly-is-dp" tabindex="-1"><a class="header-anchor" href="#_1-what-exactly-is-dp" aria-hidden="true">#</a> 1. What exactly is DP</h2><p>Dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler sub-problems. These subproblems can be solved using patterns and recursive functional relationships. The idea is to address each sub-problem once to prevent redundant calculations. A classic illustration of a dynamic programming problem is the Fibonacci sequence.</p><h2 id="_2-example-climbing-stairs-leetcode-70" tabindex="-1"><a class="header-anchor" href="#_2-example-climbing-stairs-leetcode-70" aria-hidden="true">#</a> 2. Example: Climbing stairs (leetcode 70)</h2><p>You are climbing a staircase. It takes n steps to reach the top.Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><ul><li>If we wanna reach 10th floor, we need to either reach 8th floor and take 2 more steps or reach 9th floor and take 1 more step.</li><li>Similarily, if we wanna reach 9th floor, we need to either reach 7th floor and take 2 more steps or reach 8th floor and take 1 more step.</li></ul><p>Let dp[i] denote the number of ways to reach on ith step:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dp[i] = dp[i-1] + dp[i-2]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> solution</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="complexity-analysis" tabindex="-1"><a class="header-anchor" href="#complexity-analysis" aria-hidden="true">#</a> Complexity Analysis</h5><ul><li>Time complexity: O(n). Single loop upto n.</li><li>Space Complexity: O(n). dp array of size n is used.</li></ul><h2 id="_3-top-down-vs-bottom-up" tabindex="-1"><a class="header-anchor" href="#_3-top-down-vs-bottom-up" aria-hidden="true">#</a> 3. Top-down vs. bottom-up</h2><h5 id="top-down" tabindex="-1"><a class="header-anchor" href="#top-down" aria-hidden="true">#</a> Top-down:</h5><p>we start from the top(the original problem) and move down toward the base case. For example, we wanted the nth Fibonacci number, so we started by calling <code>fibonacci(n)</code>. We move down with recursion until we reach the base cases (<code>F(0)</code> and <code>F(1)</code>).</p><h5 id="bottom-up" tabindex="-1"><a class="header-anchor" href="#bottom-up" aria-hidden="true">#</a> Bottom-up</h5><p>In bottom-up, we start at the bottom (base cases) and work our way up to larger problems.</p><h2 id="_4-when-should-i-consider-using-dp" tabindex="-1"><a class="header-anchor" href="#_4-when-should-i-consider-using-dp" aria-hidden="true">#</a> 4. When should I consider using DP</h2><ol><li>The problem will be asking for an optimal value (max or min) of something or the number of ways to do something. <ol><li>What is the minimum cost of doing...</li><li>What is the maximum profit of ...</li><li>How many ways are there to ...</li><li>What is the longest possible ...</li></ol></li><li>At each step, you need to make a &quot;decision&quot;, and decisions affect future decisions. <ol><li>A decision could be picking two elements</li><li>Decisions affecting future decisions could be something like &quot;if you take an element x, then you can&#39;t take an element y in the future&quot;</li></ol></li></ol><h2 id="_5-framework-for-dp" tabindex="-1"><a class="header-anchor" href="#_5-framework-for-dp" aria-hidden="true">#</a> 5. Framework for DP</h2><ol><li>A function or data structure that will compute/contain the answer to the problem for any given state.</li><li>A recurrence relation to transition between states.</li><li>Base cases</li></ol>`,21),i=[o];function p(l,c){return a(),s("div",null,i)}const d=n(t,[["render",p],["__file","dp.html.vue"]]);export{d as default};
