import{_ as t,r as i,o,c as l,a,b as n,d as e,e as c}from"./app-tQXqjvHX.js";const r={},p=c(`<h1 id="kafka-教程-量化交易平台实战" tabindex="-1"><a class="header-anchor" href="#kafka-教程-量化交易平台实战" aria-hidden="true">#</a> Kafka 教程 - 量化交易平台实战</h1><h2 id="什么是-kafka" tabindex="-1"><a class="header-anchor" href="#什么是-kafka" aria-hidden="true">#</a> 什么是 Kafka？</h2><p><strong>Kafka</strong> 是一个分布式消息队列（消息中间件），可以理解为<strong>微服务之间的快递系统</strong>。</p><h3 id="形象比喻" tabindex="-1"><a class="header-anchor" href="#形象比喻" aria-hidden="true">#</a> 形象比喻</h3><ul><li><strong>没有Kafka</strong>：Python数据服务获取股票数据后，要主动通知所有需要的服务（数据分析、策略、前端），其中一个服务挂了就会丢数据</li><li><strong>有Kafka</strong>：Python把数据扔到Kafka，各个服务自己来取，谁挂了重启后继续取，不会丢失</li></ul><hr><h2 id="在你的量化交易平台中的作用" tabindex="-1"><a class="header-anchor" href="#在你的量化交易平台中的作用" aria-hidden="true">#</a> 在你的量化交易平台中的作用</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Python数据服务                     数据分析服务
    ↓                                  ↑
获取股票行情 → 发送到Kafka Topic → 订阅消费
    ↓              ↓                   ↓
          策略服务订阅            前端WebSocket订阅
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心场景" tabindex="-1"><a class="header-anchor" href="#核心场景" aria-hidden="true">#</a> 核心场景</h3><ol><li><p><strong>实时行情推送</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Python → Kafka(stock-realtime) → 数据分析服务 → 计算指标
                               → 前端WebSocket → 用户看到K线
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>交易信号传递</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>策略服务 → Kafka(trade-signal) → 交易服务 → 执行模拟交易
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>解耦服务</strong></p><ul><li>服务之间不直接调用，通过Kafka传递消息</li><li>新增服务只需订阅相应Topic，不影响现有服务</li></ul></li></ol><hr><h2 id="kafka-核心概念" tabindex="-1"><a class="header-anchor" href="#kafka-核心概念" aria-hidden="true">#</a> Kafka 核心概念</h2><h3 id="_1-topic-主题" tabindex="-1"><a class="header-anchor" href="#_1-topic-主题" aria-hidden="true">#</a> 1. Topic（主题）</h3><p><strong>类比</strong>：快递分拣中心的不同区域</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kafka集群
├── stock-realtime    (实时行情Topic)
│   ├── 平安银行 数据
│   ├── 贵州茅台 数据
│   └── ...
├── trade-signal      (交易信号Topic)
│   ├── 买入信号
│   └── 卖出信号
└── user-events       (用户事件Topic)
    ├── 登录事件
    └── 注册事件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-producer-生产者" tabindex="-1"><a class="header-anchor" href="#_2-producer-生产者" aria-hidden="true">#</a> 2. Producer（生产者）</h3><p>发送消息的服务</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Python数据服务 → Producer → Kafka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-consumer-消费者" tabindex="-1"><a class="header-anchor" href="#_3-consumer-消费者" aria-hidden="true">#</a> 3. Consumer（消费者）</h3><p>接收消息的服务</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kafka → Consumer → 数据分析服务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-partition-分区" tabindex="-1"><a class="header-anchor" href="#_4-partition-分区" aria-hidden="true">#</a> 4. Partition（分区）</h3><p>Topic的并行处理单元</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>stock-realtime Topic
├── Partition 0: 沪市股票
├── Partition 1: 深市股票
└── Partition 2: 港股
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-consumer-group-消费者组" tabindex="-1"><a class="header-anchor" href="#_5-consumer-group-消费者组" aria-hidden="true">#</a> 5. Consumer Group（消费者组）</h3><p>多个消费者协同工作</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>数据分析服务 (group: analysis)
├── Consumer-1 → 读取 Partition 0
└── Consumer-2 → 读取 Partition 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="实战-使用你的-docker-kafka" tabindex="-1"><a class="header-anchor" href="#实战-使用你的-docker-kafka" aria-hidden="true">#</a> 实战：使用你的 Docker Kafka</h2><h3 id="_1-启动-kafka-会自动启动-zookeeper" tabindex="-1"><a class="header-anchor" href="#_1-启动-kafka-会自动启动-zookeeper" aria-hidden="true">#</a> 1. 启动 Kafka（会自动启动 Zookeeper）</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> quant-trading-platform
<span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> zookeeper kafka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-验证-kafka-是否启动" tabindex="-1"><a class="header-anchor" href="#_2-验证-kafka-是否启动" aria-hidden="true">#</a> 2. 验证 Kafka 是否启动</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看容器状态</span>
<span class="token function">docker</span> compose <span class="token function">ps</span> kafka

<span class="token comment"># 查看日志</span>
<span class="token function">docker</span> compose logs kafka <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;started (kafka.server.KafkaServer)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到 &quot;started&quot; 表示成功！</p><h3 id="_3-进入-kafka-容器" tabindex="-1"><a class="header-anchor" href="#_3-进入-kafka-容器" aria-hidden="true">#</a> 3. 进入 Kafka 容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> quant-kafka <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="kafka-命令行工具实战" tabindex="-1"><a class="header-anchor" href="#kafka-命令行工具实战" aria-hidden="true">#</a> Kafka 命令行工具实战</h2><h3 id="_1-topic-管理" tabindex="-1"><a class="header-anchor" href="#_1-topic-管理" aria-hidden="true">#</a> 1. Topic 管理</h3><h4 id="创建-topic-模拟实时行情" tabindex="-1"><a class="header-anchor" href="#创建-topic-模拟实时行情" aria-hidden="true">#</a> 创建 Topic（模拟实时行情）</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-topics <span class="token parameter variable">--create</span> <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime <span class="token punctuation">\\</span>
  <span class="token parameter variable">--partitions</span> <span class="token number">3</span> <span class="token punctuation">\\</span>
  --replication-factor <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数说明</strong>：</p><ul><li><code>--topic</code>：Topic名称</li><li><code>--partitions 3</code>：3个分区（可并行处理）</li><li><code>--replication-factor 1</code>：1个副本（单机只能是1）</li></ul><h4 id="查看所有-topic" tabindex="-1"><a class="header-anchor" href="#查看所有-topic" aria-hidden="true">#</a> 查看所有 Topic</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-topics <span class="token parameter variable">--list</span> --bootstrap-server localhost:9092
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查看-topic-详细信息" tabindex="-1"><a class="header-anchor" href="#查看-topic-详细信息" aria-hidden="true">#</a> 查看 Topic 详细信息</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-topics <span class="token parameter variable">--describe</span> <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Topic: stock-realtime    PartitionCount: 3    ReplicationFactor: 1
  Partition: 0    Leader: 1    Replicas: 1    Isr: 1
  Partition: 1    Leader: 1    Replicas: 1    Isr: 1
  Partition: 2    Leader: 1    Replicas: 1    Isr: 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除-topic" tabindex="-1"><a class="header-anchor" href="#删除-topic" aria-hidden="true">#</a> 删除 Topic</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-topics <span class="token parameter variable">--delete</span> <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-生产者-发送消息" tabindex="-1"><a class="header-anchor" href="#_2-生产者-发送消息" aria-hidden="true">#</a> 2. 生产者（发送消息）</h3><h4 id="启动控制台生产者" tabindex="-1"><a class="header-anchor" href="#启动控制台生产者" aria-hidden="true">#</a> 启动控制台生产者</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-console-producer <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>开始输入消息</strong>（模拟实时行情）：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;symbol&quot;</span><span class="token operator">:</span><span class="token string">&quot;000001&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">10.52</span><span class="token punctuation">,</span><span class="token property">&quot;time&quot;</span><span class="token operator">:</span><span class="token string">&quot;2025-10-08 14:30:00&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;symbol&quot;</span><span class="token operator">:</span><span class="token string">&quot;600519&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">1680.00</span><span class="token punctuation">,</span><span class="token property">&quot;time&quot;</span><span class="token operator">:</span><span class="token string">&quot;2025-10-08 14:30:01&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;symbol&quot;</span><span class="token operator">:</span><span class="token string">&quot;600000&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">8.95</span><span class="token punctuation">,</span><span class="token property">&quot;time&quot;</span><span class="token operator">:</span><span class="token string">&quot;2025-10-08 14:30:02&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每输入一行按回车，消息就发送到Kafka！</p><p>按 <code>Ctrl+C</code> 退出生产者。</p><hr><h3 id="_3-消费者-接收消息" tabindex="-1"><a class="header-anchor" href="#_3-消费者-接收消息" aria-hidden="true">#</a> 3. 消费者（接收消息）</h3><h4 id="从最新消息开始消费" tabindex="-1"><a class="header-anchor" href="#从最新消息开始消费" aria-hidden="true">#</a> 从最新消息开始消费</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-console-consumer <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>打开另一个终端</strong>，重新启动生产者发送消息，你会在消费者终端看到实时输出！</p><h4 id="从头开始消费-查看历史消息" tabindex="-1"><a class="header-anchor" href="#从头开始消费-查看历史消息" aria-hidden="true">#</a> 从头开始消费（查看历史消息）</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-console-consumer <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime <span class="token punctuation">\\</span>
  --from-beginning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会看到之前发送的所有消息！</p><h4 id="使用消费者组" tabindex="-1"><a class="header-anchor" href="#使用消费者组" aria-hidden="true">#</a> 使用消费者组</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-console-consumer <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime <span class="token punctuation">\\</span>
  <span class="token parameter variable">--group</span> analysis-service <span class="token punctuation">\\</span>
  --from-beginning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>消费者组的特性</strong>：</p><ul><li>同一组内的消费者不会重复消费同一条消息</li><li>适合多实例部署（负载均衡）</li></ul><hr><h2 id="实战练习-模拟量化交易数据流" tabindex="-1"><a class="header-anchor" href="#实战练习-模拟量化交易数据流" aria-hidden="true">#</a> 实战练习：模拟量化交易数据流</h2><h3 id="练习1-实时行情推送" tabindex="-1"><a class="header-anchor" href="#练习1-实时行情推送" aria-hidden="true">#</a> 练习1：实时行情推送</h3><p><strong>终端1</strong>（创建Topic）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> quant-kafka <span class="token function">bash</span>

<span class="token comment"># 创建实时行情Topic</span>
kafka-topics <span class="token parameter variable">--create</span> <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime <span class="token punctuation">\\</span>
  <span class="token parameter variable">--partitions</span> <span class="token number">2</span> <span class="token punctuation">\\</span>
  --replication-factor <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>终端2</strong>（模拟Python数据服务发送行情）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> quant-kafka <span class="token function">bash</span>

kafka-console-producer <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime

<span class="token comment"># 输入以下消息</span>
<span class="token punctuation">{</span><span class="token string">&quot;symbol&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;000001&quot;</span>,<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;平安银行&quot;</span>,<span class="token string">&quot;price&quot;</span>:10.52,<span class="token string">&quot;volume&quot;</span>:15000,<span class="token string">&quot;time&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;14:30:00&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;symbol&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;600519&quot;</span>,<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;贵州茅台&quot;</span>,<span class="token string">&quot;price&quot;</span>:1680.00,<span class="token string">&quot;volume&quot;</span>:8000,<span class="token string">&quot;time&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;14:30:01&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>终端3</strong>（模拟数据分析服务消费）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> quant-kafka <span class="token function">bash</span>

kafka-console-consumer <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime <span class="token punctuation">\\</span>
  <span class="token parameter variable">--group</span> analysis-service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会看到实时消息！</p><hr><h3 id="练习2-交易信号传递" tabindex="-1"><a class="header-anchor" href="#练习2-交易信号传递" aria-hidden="true">#</a> 练习2：交易信号传递</h3><p><strong>创建交易信号Topic</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> quant-kafka <span class="token function">bash</span>

kafka-topics <span class="token parameter variable">--create</span> <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> trade-signal <span class="token punctuation">\\</span>
  <span class="token parameter variable">--partitions</span> <span class="token number">1</span> <span class="token punctuation">\\</span>
  --replication-factor <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>终端1</strong>（模拟策略服务发出买入信号）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-console-producer <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> trade-signal

<span class="token comment"># 输入交易信号</span>
<span class="token punctuation">{</span><span class="token string">&quot;signal&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BUY&quot;</span>,<span class="token string">&quot;symbol&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;000001&quot;</span>,<span class="token string">&quot;price&quot;</span>:10.50,<span class="token string">&quot;volume&quot;</span>:1000,<span class="token string">&quot;strategy&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;MA_CROSS&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;signal&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;SELL&quot;</span>,<span class="token string">&quot;symbol&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;600519&quot;</span>,<span class="token string">&quot;price&quot;</span>:1690.00,<span class="token string">&quot;volume&quot;</span>:100,<span class="token string">&quot;strategy&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;MACD&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>终端2</strong>（模拟交易服务接收信号）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-console-consumer <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> trade-signal <span class="token punctuation">\\</span>
  <span class="token parameter variable">--group</span> trading-service <span class="token punctuation">\\</span>
  --from-beginning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="练习3-查看消费者组状态" tabindex="-1"><a class="header-anchor" href="#练习3-查看消费者组状态" aria-hidden="true">#</a> 练习3：查看消费者组状态</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出所有消费者组</span>
kafka-consumer-groups <span class="token parameter variable">--list</span> --bootstrap-server localhost:9092

<span class="token comment"># 查看消费者组详情</span>
kafka-consumer-groups <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--group</span> analysis-service <span class="token punctuation">\\</span>
  <span class="token parameter variable">--describe</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GROUP            TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG
analysis-service stock-realtime  0          5               5               0
analysis-service stock-realtime  1          3               3               0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键指标</strong>：</p><ul><li><code>CURRENT-OFFSET</code>：已消费到的位置</li><li><code>LOG-END-OFFSET</code>：最新消息位置</li><li><code>LAG</code>：未消费消息数（0表示已追上）</li></ul><hr><h2 id="kafka-在项目中的实际应用" tabindex="-1"><a class="header-anchor" href="#kafka-在项目中的实际应用" aria-hidden="true">#</a> Kafka 在项目中的实际应用</h2><h3 id="应用1-python-生产者-发送股票数据" tabindex="-1"><a class="header-anchor" href="#应用1-python-生产者-发送股票数据" aria-hidden="true">#</a> 应用1：Python 生产者（发送股票数据）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># data-service/kafka_producer.py</span>
<span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaProducer
<span class="token keyword">import</span> json

producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>
    bootstrap_servers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;localhost:9093&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    value_serializer<span class="token operator">=</span><span class="token keyword">lambda</span> v<span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token comment"># 发送实时行情</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;symbol&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;000001&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span> <span class="token number">10.52</span><span class="token punctuation">,</span>
    <span class="token string">&quot;volume&quot;</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>
    <span class="token string">&quot;time&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-10-08 14:30:00&quot;</span>
<span class="token punctuation">}</span>

producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;stock-realtime&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span>data<span class="token punctuation">)</span>
producer<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用2-java-消费者-接收股票数据" tabindex="-1"><a class="header-anchor" href="#应用2-java-消费者-接收股票数据" aria-hidden="true">#</a> 应用2：Java 消费者（接收股票数据）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// analysis-service</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StockDataConsumer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;stock-realtime&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;analysis-service&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 解析JSON</span>
        <span class="token class-name">JSONObject</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> symbol <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;symbol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Double</span> price <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 计算技术指标</span>
        <span class="token function">calculateMA</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用3-多个服务消费同一消息" tabindex="-1"><a class="header-anchor" href="#应用3-多个服务消费同一消息" aria-hidden="true">#</a> 应用3：多个服务消费同一消息</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Python → Kafka(stock-realtime)
              ↓
         ┌────┴────┬─────────┐
         ↓         ↓         ↓
    数据分析服务  策略服务  WebSocket服务
   (存储K线)   (生成信号) (推送前端)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个服务用不同的<code>group-id</code>，都能收到完整数据！</p><hr><h2 id="kafka-ui-可视化管理" tabindex="-1"><a class="header-anchor" href="#kafka-ui-可视化管理" aria-hidden="true">#</a> Kafka UI 可视化管理</h2><p>你的项目已包含 Kafka UI！</p><h3 id="_1-启动-kafka-ui" tabindex="-1"><a class="header-anchor" href="#_1-启动-kafka-ui" aria-hidden="true">#</a> 1. 启动 Kafka UI</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> kafka-ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-访问-web-界面" tabindex="-1"><a class="header-anchor" href="#_2-访问-web-界面" aria-hidden="true">#</a> 2. 访问 Web 界面</h3><p>浏览器打开：http://localhost:8080</p><h3 id="_3-功能" tabindex="-1"><a class="header-anchor" href="#_3-功能" aria-hidden="true">#</a> 3. 功能</h3><ul><li>✅ 查看所有 Topic</li><li>✅ 查看消息内容</li><li>✅ 监控消费者组状态</li><li>✅ 创建/删除 Topic</li><li>✅ 查看 Broker 状态</li></ul><hr><h2 id="kafka-常用命令速查表" tabindex="-1"><a class="header-anchor" href="#kafka-常用命令速查表" aria-hidden="true">#</a> Kafka 常用命令速查表</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td><strong>Topic管理</strong></td><td></td></tr><tr><td>创建Topic</td><td><code>kafka-topics --create --bootstrap-server localhost:9092 --topic &lt;name&gt; --partitions 3 --replication-factor 1</code></td></tr><tr><td>列出所有Topic</td><td><code>kafka-topics --list --bootstrap-server localhost:9092</code></td></tr><tr><td>查看Topic详情</td><td><code>kafka-topics --describe --bootstrap-server localhost:9092 --topic &lt;name&gt;</code></td></tr><tr><td>删除Topic</td><td><code>kafka-topics --delete --bootstrap-server localhost:9092 --topic &lt;name&gt;</code></td></tr><tr><td><strong>生产者</strong></td><td></td></tr><tr><td>启动控制台生产者</td><td><code>kafka-console-producer --bootstrap-server localhost:9092 --topic &lt;name&gt;</code></td></tr><tr><td><strong>消费者</strong></td><td></td></tr><tr><td>从最新消费</td><td><code>kafka-console-consumer --bootstrap-server localhost:9092 --topic &lt;name&gt;</code></td></tr><tr><td>从头消费</td><td><code>kafka-console-consumer --bootstrap-server localhost:9092 --topic &lt;name&gt; --from-beginning</code></td></tr><tr><td>使用消费者组</td><td><code>kafka-console-consumer --bootstrap-server localhost:9092 --topic &lt;name&gt; --group &lt;group-id&gt;</code></td></tr><tr><td><strong>消费者组</strong></td><td></td></tr><tr><td>列出所有消费者组</td><td><code>kafka-consumer-groups --list --bootstrap-server localhost:9092</code></td></tr><tr><td>查看消费者组详情</td><td><code>kafka-consumer-groups --bootstrap-server localhost:9092 --group &lt;group-id&gt; --describe</code></td></tr><tr><td>重置消费位移</td><td><code>kafka-consumer-groups --bootstrap-server localhost:9092 --group &lt;group-id&gt; --topic &lt;name&gt; --reset-offsets --to-earliest --execute</code></td></tr></tbody></table><hr><h2 id="docker-配置说明" tabindex="-1"><a class="header-anchor" href="#docker-配置说明" aria-hidden="true">#</a> Docker 配置说明</h2><h3 id="docker-compose-yml-解析" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml-解析" aria-hidden="true">#</a> docker-compose.yml 解析</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">kafka</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> confluentinc/cp<span class="token punctuation">-</span>kafka<span class="token punctuation">:</span>7.5.0
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;9092:9092&quot;</span>  <span class="token comment"># 容器内部访问</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;9093:9093&quot;</span>  <span class="token comment"># 宿主机访问（你的Python/Java代码用这个）</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> KAFKA_ZOOKEEPER_CONNECT=zookeeper<span class="token punctuation">:</span><span class="token number">2181</span>
    <span class="token punctuation">-</span> KAFKA_ADVERTISED_LISTENERS=PLAINTEXT<span class="token punctuation">:</span>//kafka<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>PLAINTEXT_HOST<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9093</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接方式" tabindex="-1"><a class="header-anchor" href="#连接方式" aria-hidden="true">#</a> 连接方式</h3><table><thead><tr><th>场景</th><th>地址</th></tr></thead><tbody><tr><td>容器内访问（Java服务在Docker内）</td><td><code>kafka:9092</code></td></tr><tr><td>宿主机访问（本地Python脚本）</td><td><code>localhost:9093</code></td></tr></tbody></table><hr><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="q1-如何查看某个topic有多少消息" tabindex="-1"><a class="header-anchor" href="#q1-如何查看某个topic有多少消息" aria-hidden="true">#</a> Q1: 如何查看某个Topic有多少消息？</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-run-class kafka.tools.GetOffsetShell <span class="token punctuation">\\</span>
  --broker-list localhost:9092 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--topic</span> stock-realtime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="q2-消息会永久保存吗" tabindex="-1"><a class="header-anchor" href="#q2-消息会永久保存吗" aria-hidden="true">#</a> Q2: 消息会永久保存吗？</h3><p>默认保留7天，可修改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-configs <span class="token parameter variable">--alter</span> <span class="token punctuation">\\</span>
  --bootstrap-server localhost:9092 <span class="token punctuation">\\</span>
  --entity-type topics <span class="token punctuation">\\</span>
  --entity-name stock-realtime <span class="token punctuation">\\</span>
  --add-config <span class="token assign-left variable">retention.ms</span><span class="token operator">=</span><span class="token number">86400000</span>  <span class="token comment"># 1天</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="q3-如何清空topic数据" tabindex="-1"><a class="header-anchor" href="#q3-如何清空topic数据" aria-hidden="true">#</a> Q3: 如何清空Topic数据？</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 方法1：删除重建</span>
kafka-topics <span class="token parameter variable">--delete</span> --bootstrap-server localhost:9092 <span class="token parameter variable">--topic</span> stock-realtime
kafka-topics <span class="token parameter variable">--create</span> --bootstrap-server localhost:9092 <span class="token parameter variable">--topic</span> stock-realtime <span class="token parameter variable">--partitions</span> <span class="token number">3</span> --replication-factor <span class="token number">1</span>

<span class="token comment"># 方法2：设置保留时间为1秒，等待清空后恢复</span>
kafka-configs <span class="token parameter variable">--alter</span> --bootstrap-server localhost:9092 --entity-type topics --entity-name stock-realtime --add-config <span class="token assign-left variable">retention.ms</span><span class="token operator">=</span><span class="token number">1000</span>
<span class="token comment"># 等待10秒</span>
kafka-configs <span class="token parameter variable">--alter</span> --bootstrap-server localhost:9092 --entity-type topics --entity-name stock-realtime --delete-config retention.ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="q4-如何保证消息不丢失" tabindex="-1"><a class="header-anchor" href="#q4-如何保证消息不丢失" aria-hidden="true">#</a> Q4: 如何保证消息不丢失？</h3><p><strong>生产者端</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>
    acks<span class="token operator">=</span><span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 等待所有副本确认</span>
    retries<span class="token operator">=</span><span class="token number">3</span>    <span class="token comment"># 失败重试3次</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>消费者端</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>consumer <span class="token operator">=</span> KafkaConsumer<span class="token punctuation">(</span>
    enable_auto_commit<span class="token operator">=</span><span class="token boolean">False</span>  <span class="token comment"># 手动提交offset</span>
<span class="token punctuation">)</span>
<span class="token comment"># 处理完业务逻辑后</span>
consumer<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="性能优化建议" tabindex="-1"><a class="header-anchor" href="#性能优化建议" aria-hidden="true">#</a> 性能优化建议</h2><ol><li><p><strong>合理设置分区数</strong></p><ul><li>一般设为消费者数量的2-3倍</li><li>你的项目：<code>stock-realtime</code> 可设3个分区</li></ul></li><li><p><strong>批量发送</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 不推荐：每条消息单独发送</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> stock_list<span class="token punctuation">:</span>
    producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;stock-realtime&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>

<span class="token comment"># 推荐：批量发送</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> stock_list<span class="token punctuation">:</span>
    producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;stock-realtime&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
producer<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 一次性刷新</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>压缩消息</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>
    compression_type<span class="token operator">=</span><span class="token string">&#39;gzip&#39;</span>  <span class="token comment"># 节省网络带宽</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h2 id="下一步学习" tabindex="-1"><a class="header-anchor" href="#下一步学习" aria-hidden="true">#</a> 下一步学习</h2><ol><li>✅ 完成实战练习</li><li>📝 开发Python数据服务（集成Kafka Producer）</li><li>☕ 开发Java数据分析服务（集成Kafka Consumer）</li><li>🔄 实现完整的数据流：Python → Kafka → Java → 前端</li></ol><hr><h2 id="参考资源" tabindex="-1"><a class="header-anchor" href="#参考资源" aria-hidden="true">#</a> 参考资源</h2>`,145),d={href:"https://kafka.apache.org/documentation/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/provectus/kafka-ui",target:"_blank",rel:"noopener noreferrer"},v=a("li",null,[n("项目文档："),a("code",null,"量化交易平台架构设计.md")],-1),k=a("hr",null,null,-1),m=a("p",null,[a("strong",null,"提示"),n("：所有练习完成后，记得更新 "),a("code",null,"DEVLOG.md"),n("！")],-1);function b(h,g){const s=i("ExternalLinkIcon");return o(),l("div",null,[p,a("ul",null,[a("li",null,[a("a",d,[n("Kafka 官方文档"),e(s)])]),a("li",null,[a("a",u,[n("Kafka UI GitHub"),e(s)])]),v]),k,m])}const x=t(r,[["render",b],["__file","Kafka教程.html.vue"]]);export{x as default};
