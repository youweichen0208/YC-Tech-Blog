const e=JSON.parse('{"key":"v-37a7909c","path":"/interview-prep/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-10-14T00:00:00.000Z","category":["interview"],"tag":["设计模式"],"description":"说一说设计模式的六大原则 (SOLID Principle) 单一指责原则 (S - Single Responsibility Principle) 一个类应该只有一个指责。 开闭原则 (O - Open-Closed Principle) 开闭原则的定义是： 一个软件尸体应当对拓展开放，对修改关闭。在这个原则说的是，在设计一个模块的时候，应当使这个模块在不被修改的前提下被拓展，即应当可以在不比修改源代码的情况下改变这个模块。 里式替换原则 (L - Liskov Substitution Principle) 在面向对象的语言中，继承是必不可少的，优秀的语言机制，具有以下几个优点：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/interview-prep/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:description","content":"说一说设计模式的六大原则 (SOLID Principle) 单一指责原则 (S - Single Responsibility Principle) 一个类应该只有一个指责。 开闭原则 (O - Open-Closed Principle) 开闭原则的定义是： 一个软件尸体应当对拓展开放，对修改关闭。在这个原则说的是，在设计一个模块的时候，应当使这个模块在不被修改的前提下被拓展，即应当可以在不比修改源代码的情况下改变这个模块。 里式替换原则 (L - Liskov Substitution Principle) 在面向对象的语言中，继承是必不可少的，优秀的语言机制，具有以下几个优点："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-12T13:14:26.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2024-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-12T13:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-12T13:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"说一说设计模式的六大原则 (SOLID Principle)","slug":"说一说设计模式的六大原则-solid-principle","link":"#说一说设计模式的六大原则-solid-principle","children":[]},{"level":2,"title":"单例模式(Singleton Pattern)","slug":"单例模式-singleton-pattern","link":"#单例模式-singleton-pattern","children":[]},{"level":2,"title":"说一说你对工厂模式的理解：","slug":"说一说你对工厂模式的理解","link":"#说一说你对工厂模式的理解","children":[{"level":3,"title":"简单工厂模式","slug":"简单工厂模式","link":"#简单工厂模式","children":[]},{"level":3,"title":"工厂方法模式：","slug":"工厂方法模式","link":"#工厂方法模式","children":[]},{"level":3,"title":"抽象工厂模式：","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":3,"title":"工厂模式的应用场景：","slug":"工厂模式的应用场景","link":"#工厂模式的应用场景","children":[]}]},{"level":2,"title":"简单工厂模式和抽象工厂模式有什么区别？","slug":"简单工厂模式和抽象工厂模式有什么区别","link":"#简单工厂模式和抽象工厂模式有什么区别","children":[]},{"level":2,"title":"说一说你对策略模式的理解：","slug":"说一说你对策略模式的理解","link":"#说一说你对策略模式的理解","children":[{"level":3,"title":"核心概念：","slug":"核心概念","link":"#核心概念","children":[]},{"level":3,"title":"策略模式的结构：","slug":"策略模式的结构","link":"#策略模式的结构","children":[]}]},{"level":2,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[{"level":3,"title":"责任模式的结构：","slug":"责任模式的结构","link":"#责任模式的结构","children":[]}]}],"git":{"createdTime":1734009266000,"updatedTime":1734009266000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":1}]},"readingTime":{"minutes":9.71,"words":2914},"filePathRelative":"interview-prep/设计模式.md","localizedDate":"October 14, 2024","excerpt":"<h2> 说一说设计模式的六大原则 (SOLID Principle)</h2>\\n<ol>\\n<li>\\n<p>单一指责原则 (S - Single Responsibility Principle)\\n一个类应该只有一个指责。</p>\\n</li>\\n<li>\\n<p>开闭原则 (O - Open-Closed Principle)\\n开闭原则的定义是： 一个软件尸体应当对拓展开放，对修改关闭。在这个原则说的是，在设计一个模块的时候，应当使这个模块在不被修改的前提下被拓展，即应当可以在不比修改源代码的情况下改变这个模块。</p>\\n</li>\\n<li>\\n<p>里式替换原则 (L - Liskov Substitution Principle)\\n在面向对象的语言中，继承是必不可少的，优秀的语言机制，具有以下几个优点：</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
