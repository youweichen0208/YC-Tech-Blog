import{_ as n,o as a,c as s,e}from"./app-vxY1I1OX.js";const t={},o=e(`<h1 id="binary-search" tabindex="-1"><a class="header-anchor" href="#binary-search" aria-hidden="true">#</a> Binary Search</h1><h2 id="what-is-binary-search" tabindex="-1"><a class="header-anchor" href="#what-is-binary-search" aria-hidden="true">#</a> What is Binary search</h2><p>Binary search is a search algorithm that runs in O(log n) in the worst case, where n is the size of the search space. Normally, binary search is done on an array of sorted elements.</p><h2 id="binary-search-code-template" tabindex="-1"><a class="header-anchor" href="#binary-search-code-template" aria-hidden="true">#</a> Binary Search code template:</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// do something</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// left is the insertion point</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Declare <code>left = 0</code> and <code>right = arr.length - 1</code>. These variables represent the inclusive bounds of the current search space at any given time. Initially, we consider the entire array</li><li>While <code>left &lt;= right</code>: <ul><li>Calculate the middle of the current search space, <code>mid = left + (right - left) / 2</code></li><li>Check <code>arr[mid]</code>. There are 3 possiblities: <ul><li>If <code>arr[mid] = x</code>, then the element has been found, return.</li><li>If <code>arr[mid] &gt; x</code>, then halve the search space by doing <code>right = mid - 1</code>.</li><li>If <code>arr[mid] &lt; x</code>, then halve the search by doing <code>left = mid + 1</code>.</li></ul></li></ul></li><li>If we get to this point without <code>arr[mid] = x</code>, then the search was unsuccessful. The <code>left</code> pointer will be at the index where <code>x</code> would need to be inserted to maintain <code>arr</code> being sorted.</li></ul>`,6),i=[o];function c(p,r){return a(),s("div",null,i)}const d=n(t,[["render",c],["__file","binary-search.html.vue"]]);export{d as default};
