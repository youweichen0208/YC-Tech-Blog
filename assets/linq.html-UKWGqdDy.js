import{_ as n,o as s,c as a,e}from"./app-d3F_1F-E.js";const t={},p=e(`<h1 id="linq" tabindex="-1"><a class="header-anchor" href="#linq" aria-hidden="true">#</a> LINQ</h1><h2 id="what-is-linq" tabindex="-1"><a class="header-anchor" href="#what-is-linq" aria-hidden="true">#</a> What is LINQ?</h2><p>LINQ (Language-Integrated Query) is a set of features in the .NET framework that provides a standardized way of querying data from different types of data sources. The LINQ provides a consistent query experience to query objects (LINQ to objects), relational databases (LINQ to SQL), and XML (LINQ to XML).</p><p>LINQ is a uniform query syntax in C# and VB.NET to retrieve data from different sources and formats.</p><p>LINQ queries return results as objects. It enables us to use object-oriented approach on the result set and not to worry about transforming different formats of results into objects.</p><h2 id="why-linq" tabindex="-1"><a class="header-anchor" href="#why-linq" aria-hidden="true">#</a> Why LINQ?</h2><ol><li><p><strong>Consistency</strong>: LINQ provides a consistent way to query various types of data sources, such as collections, XML, databases, etc. We can use the same LINQ syntax and methods to query different data sources, which makes our code more consistent and easier to understand.</p></li><li><p><strong>Intellisense and Compile-time Checking</strong>: Because LINQ is integrated into C#, we get benefits like intellisense and compile-time error checking. This can help us write correct code quickly and catch errors earlier in the development process.</p></li><li><p><strong>Readability</strong>: LINQ queries can often be more readable than traditional loops and conditional statements.</p></li><li><p><strong>Producticity</strong>: LINQ can help us write complex queries and data transformations with less code.</p></li><li><p><strong>Flexibility</strong>: LINQ provides a lot of flexibility for querying and manipulating data. We can filter, sort, group, transform, and aggregate data in many ways with LINQ&#39;s standard query operators.</p></li></ol><h2 id="linq-query-syntax" tabindex="-1"><a class="header-anchor" href="#linq-query-syntax" aria-hidden="true">#</a> LINQ Query Syntax:</h2><p>Query syntax in LINQ provides a declaretive and SQL-like way of expressive queries. It allows us to query collections and other data sources using a syntax that resembles SQL queries. The query syntax is useful when dealing with complex queries involving multiple conditions, joins, and projections.</p><h3 id="basic-structure" tabindex="-1"><a class="header-anchor" href="#basic-structure" aria-hidden="true">#</a> Basic Structure:</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">from</span> variable <span class="token keyword">in</span> collection
             <span class="token punctuation">[</span><span class="token keyword">where</span> <span class="token class-name">condition</span><span class="token punctuation">]</span>
             <span class="token punctuation">[</span><span class="token keyword">orderby</span> property<span class="token punctuation">]</span>
             <span class="token keyword">select</span> projection<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>from</code> clause: specifies the range variable (often referred to as the iteration variable) and the data source.</p></li><li><p><code>where</code> clause: Optional. Specifies one or more conditions that the elements must satisfy. It filters the data source based on the specified criteria.</p></li><li><p><code>orderby</code> clause: Optional. Specifies the sorting order for the elements in the result set. We can order by one or more properties in ascending or descending order.</p></li><li><p><code>select</code> clause: Specifies the projection, i.e., what should be included in the result set. It defines the shape of the output.</p></li></ul><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example:</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> <span class="token function">GetStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Assume a list of Student objects</span>

<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> students
            <span class="token keyword">where</span> <span class="token class-name">student</span><span class="token punctuation">.</span>Marks <span class="token operator">&gt;</span> <span class="token number">80</span>
            <span class="token keyword">orderby</span> student<span class="token punctuation">.</span>LastName
            <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> student<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> student<span class="token punctuation">.</span>LastName <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token keyword">in</span> query<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result<span class="token punctuation">.</span>FirstName</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result<span class="token punctuation">.</span>LastName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>students</code> is the data source</li><li><code>from student in students</code> establishes the range variable (<code>student</code>) and the data source (<code>students</code>).</li><li><code>select new { student.FirstName, student.LastName }</code> defines the projection, creating an anonymous type with first and last names.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> students
            <span class="token keyword">join</span> course <span class="token keyword">in</span> courses <span class="token keyword">on</span> student<span class="token punctuation">.</span>CourseId equals course<span class="token punctuation">.</span>Id
            <span class="token keyword">where</span> <span class="token class-name">student</span><span class="token punctuation">.</span>Marks <span class="token operator">&gt;</span> <span class="token number">80</span>
            <span class="token keyword">orderby</span> student<span class="token punctuation">.</span>LastName
            <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> student<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> student<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> course<span class="token punctuation">.</span>CourseName <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, the <code>join</code> clause is used to combine data from two collections based on a specified key (<code>CourseId</code> and <code>Id</code> in this example).</p><h2 id="linq-method-syntax" tabindex="-1"><a class="header-anchor" href="#linq-method-syntax" aria-hidden="true">#</a> LINQ Method Syntax:</h2><p>Method syntax is more concise and may be preferable in certain situations, especially for simpler queries or when working with developers more familiar with method chaining.</p><h3 id="basic-structure-1" tabindex="-1"><a class="header-anchor" href="#basic-structure-1" aria-hidden="true">#</a> Basic structure</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> condition<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> property<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> projection<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Where</code> method: filters the elements based on a specified condition.</li><li><code>OrderBy</code> method: sorts the elements in ascending order based on a specified property. We can also use <code>OrderByDescending</code> for descending order.</li><li><code>Select</code> method: specifies the projection, defining what should be included in the result set.</li></ul><h2 id="standard-query-operators" tabindex="-1"><a class="header-anchor" href="#standard-query-operators" aria-hidden="true">#</a> Standard query operators:</h2><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> Where</h3><p>The Where operator (Linq extension method) filters the collection based on a given criteria expression and returns a new collection. The criteria can be specified as lambda expression or Func delegate type.</p><p>Example:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">IList<span class="token punctuation">&lt;</span>Student<span class="token punctuation">&gt;</span></span> studentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> StudentID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">13</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> StudentID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">&quot;Moin&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> StudentID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">&quot;Bill&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> StudentID <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">&quot;Ram&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> StudentID <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">&quot;Ron&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">15</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> teenAgeStudent <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> studentList
            <span class="token keyword">where</span> <span class="token class-name">student</span><span class="token punctuation">.</span>Age <span class="token operator">&gt;</span> <span class="token number">13</span> <span class="token operator">&amp;&amp;</span> student<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">20</span>
            <span class="token keyword">select</span> student<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Teen age Students: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> student <span class="token keyword">in</span> teenAgeStudent<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>StudentName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, we can also use a Func type delegate with an anonymous method to pass a predicate function as below.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>  <span class="token class-name">Func<span class="token punctuation">&lt;</span>Student<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> isTeenAger <span class="token operator">=</span> <span class="token keyword">delegate</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span>Age <span class="token operator">&gt;</span> <span class="token number">13</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> studentList
            <span class="token keyword">where</span> <span class="token class-name">isTeenAger</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>
            <span class="token keyword">select</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="where-extention-method-in-method-syntax" tabindex="-1"><a class="header-anchor" href="#where-extention-method-in-method-syntax" aria-hidden="true">#</a> Where extention method in Method Syntax</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In this signature, <code>TSource</code> is the type of the items in the collection, <code>source</code> is the collection to filter, and <code>predicate</code> is a <code>Func&lt;TSource, bool&gt;</code> delegate that defines the condition to filter the items.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> filteredResult <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Age <span class="token operator">&gt;</span> <span class="token number">13</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="orderby" tabindex="-1"><a class="header-anchor" href="#orderby" aria-hidden="true">#</a> OrderBy</h2><p>OrderBy sorts the values of a collection in <code>ascending</code> or <code>descending</code> order. It sorts the collection in ascending order by default because ascending order keyword is optional here. Use the <code>descending</code> keyword to sort the collection in descending order.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> resultList <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> studentList
            <span class="token keyword">orderby</span> student<span class="token punctuation">.</span>Age <span class="token keyword">descending</span>
            <span class="token keyword">select</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="orderby-in-method-syntax" tabindex="-1"><a class="header-anchor" href="#orderby-in-method-syntax" aria-hidden="true">#</a> OrderBy in Method syntax</h3><h4 id="ascending" tabindex="-1"><a class="header-anchor" href="#ascending" aria-hidden="true">#</a> ascending:</h4><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> resultList <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="descending" tabindex="-1"><a class="header-anchor" href="#descending" aria-hidden="true">#</a> descending:</h4><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> resultList <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="multiple-sorting" tabindex="-1"><a class="header-anchor" href="#multiple-sorting" aria-hidden="true">#</a> Multiple Sorting:</h3><p>We can sort the collection on multiple fields separated by comma. The given collection would be first sorted based on the first field and then if value or first field would be the same for two elements then it would use second field for sorting and so on.</p><h4 id="query-syntax" tabindex="-1"><a class="header-anchor" href="#query-syntax" aria-hidden="true">#</a> query syntax</h4><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> resultList <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> studentList
            <span class="token keyword">orderby</span> student<span class="token punctuation">.</span>StudentName<span class="token punctuation">,</span> student<span class="token punctuation">.</span>Age
            <span class="token keyword">select</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="method-syntax" tabindex="-1"><a class="header-anchor" href="#method-syntax" aria-hidden="true">#</a> method syntax:</h4><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> resultList <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>StudentName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenBy</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In the example above, <code>OrderBy</code> sorts the students by name, and then <code>ThenBy</code> sorts the students with the same name by age. The result is a sequence of students sorted first by name and then by age. We can chain as many <code>ThenBy</code> or <code>ThenByDescending</code> calls as we need to perform additional sorts. For example, if the <code>Student</code> class also had a <code>Grade</code> property, we could sort by name, then age, then grade like this.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> sortedStudents <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenBy</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenBy</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="points-to-rememeber" tabindex="-1"><a class="header-anchor" href="#points-to-rememeber" aria-hidden="true">#</a> Points to rememeber:</h3><ol><li>LINQ includes five sorting operators: OrderBy, OrderByDescending, ThenBy, ThenByDescending</li><li>LINQ query syntax does not support OrderByDescending, ThenBy, ThenByDescending. It only supports <code>orderby</code> clause with <code>ascending</code> and <code>descending</code> sorting direction.</li><li>LINQ query syntax supports multiple sorting fields separated by comma whereas we have to use <code>ThenBy</code> &amp; <code>ThenByDescending</code> for secondary sorting.</li></ol><h2 id="grouping-operators-groupby" tabindex="-1"><a class="header-anchor" href="#grouping-operators-groupby" aria-hidden="true">#</a> Grouping Operators: GroupBy</h2><p>when we use the <code>group</code> keyword in LINQ, it creates a sequence of <code>IGrouping&lt;TKey, TElement&gt;</code> objects, where <code>TKey</code> is the type of the key we are grouping by, where <code>TKey</code> is the type of the key we are grouping by, and <code>TElement</code> is the type of the elements in the group. Each <code>IGrouping&lt;TKey, TElement&gt;</code> object represents a group of elements that have the same key.</p><h3 id="groupby-in-query-syntax" tabindex="-1"><a class="header-anchor" href="#groupby-in-query-syntax" aria-hidden="true">#</a> GroupBy in query syntax:</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>     <span class="token class-name"><span class="token keyword">var</span></span> resultList <span class="token operator">=</span> <span class="token keyword">from</span> s <span class="token keyword">in</span> studentList
            <span class="token keyword">group</span> s <span class="token keyword">by</span> s<span class="token punctuation">.</span>StudentName<span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">group</span> <span class="token keyword">in</span> resultList<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> student <span class="token keyword">in</span> <span class="token keyword">group</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>StudentName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span>StudentID<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the first <code>foreach</code> loop, <code>student</code> is not a <code>Student</code> object, but an <code>IGrouping&lt;string, Student&gt;</code> object. We can access the key of the group with the <code>key</code> property, and we can enumerate the students in the group with a nested <code>foreach</code> loop.</p><h3 id="groupby-in-method-syntax" tabindex="-1"><a class="header-anchor" href="#groupby-in-method-syntax" aria-hidden="true">#</a> GroupBy in method syntax:</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> resultList <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>StudentName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="join-operator" tabindex="-1"><a class="header-anchor" href="#join-operator" aria-hidden="true">#</a> Join Operator:</h2><h3 id="join-in-method-syntax" tabindex="-1"><a class="header-anchor" href="#join-in-method-syntax" aria-hidden="true">#</a> Join in method syntax</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> joinResult <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>
    list2<span class="token punctuation">,</span>
    item1 <span class="token operator">=&gt;</span> item1<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>  <span class="token comment">// Outer key selector</span>
    item2 <span class="token operator">=&gt;</span> item2<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>  <span class="token comment">// Inner key selector</span>
    <span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Item1 <span class="token operator">=</span> item1<span class="token punctuation">,</span> Item2 <span class="token operator">=</span> item2 <span class="token punctuation">}</span>  <span class="token comment">// Result selector</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>item1 =&gt; item1.Key</code> is the outer key selector. It&#39;s a function that takes an element from the outer sequence (<code>list1</code>) and returns the key for that element.</li><li><code>item2 =&gt; item2.Key</code> is the inner key selector. It&#39;s a function that takes an element from the inner sequence (<code>list2</code>) and returns the key for that element.</li><li>We <strong>CANNOT</strong> switch the order of the outer and inner key selectors in a LINQ join operation. The outer key selector must correspond to the first (or &quot;outer&quot;) collection we are joining, and the inner key selector must correspond to the second (or &quot;inner&quot;) collection we are joining.</li></ul><p>equivalent sql:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>StudentName<span class="token punctuation">,</span> std<span class="token punctuation">.</span>StandardName
<span class="token keyword">FROM</span> studentList stu <span class="token keyword">JOIN</span> standardList std <span class="token keyword">ON</span> stu<span class="token punctuation">.</span>StandardID <span class="token operator">=</span> std<span class="token punctuation">.</span>StandardID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join-in-query-syntax" tabindex="-1"><a class="header-anchor" href="#join-in-query-syntax" aria-hidden="true">#</a> Join in Query Syntax:</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>from <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token keyword">in</span> outerSequence
      <span class="token keyword">join</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token keyword">in</span> innerSequence
      <span class="token keyword">on</span> outerKey equals innerKey
      <span class="token keyword">select</span> <span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h4><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>  <span class="token class-name"><span class="token keyword">var</span></span> innerJoinResult <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> studentList
            <span class="token keyword">join</span> standard <span class="token keyword">in</span> standardList
                <span class="token keyword">on</span> student<span class="token punctuation">.</span>StandardID equals standard<span class="token punctuation">.</span>StandardID
            <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> StudentName <span class="token operator">=</span> student<span class="token punctuation">.</span>StudentName<span class="token punctuation">,</span> StandardName <span class="token operator">=</span> standard<span class="token punctuation">.</span>StandardName <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="defaultifempty" tabindex="-1"><a class="header-anchor" href="#defaultifempty" aria-hidden="true">#</a> DefaultIfEmpty</h2><p>The DefaultIfEmpty() method returns a new collection with the default value if the given collection on which DefaultIfEmpty() is invoked is empty. Another overload method of DefaultIfEmpty() takes a value parameter that should be replaced with default value.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>        <span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> emptyList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> newList1 <span class="token operator">=</span> emptyList<span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> newlist2 <span class="token operator">=</span> emptyList<span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;newlist1 Count: {0}&quot;</span><span class="token punctuation">,</span> newList1<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;newlist1 Value: {0}&quot;</span><span class="token punctuation">,</span> newList1<span class="token punctuation">.</span><span class="token function">ElementAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;newlist2 Count: {0}&quot;</span><span class="token punctuation">,</span> newlist2<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;newlist2 Count: {0}&quot;</span><span class="token punctuation">,</span> newlist2<span class="token punctuation">.</span><span class="token function">ElementAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, <code>emptyList.DefaultIfEmpty()</code> returns a new string collection with one element value whose value is null because null is a default value of string. Another method <code>emptyList.DefaultIfEmpty(&quot;none&quot;)</code> returns a new string collection with one element whose value is &quot;None&quot; instead of null.</p><h2 id="groupjoin" tabindex="-1"><a class="header-anchor" href="#groupjoin" aria-hidden="true">#</a> GroupJoin</h2><p>In a grouped join, for each element in the outer sequence, a result element is created. This result element contains the element from the outer sequence and a collection of all matching elements from the inner sequence. If an element in the outer sequence has no matching elemeents in the inner sequence, the collection for that element will be empty.</p><h3 id="groupjoin-in-method-syntax" tabindex="-1"><a class="header-anchor" href="#groupjoin-in-method-syntax" aria-hidden="true">#</a> GroupJoin in Method Syntax</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> groupedResult <span class="token operator">=</span> standardList<span class="token punctuation">.</span><span class="token function">GroupJoin</span><span class="token punctuation">(</span> <span class="token comment">//outer sequence</span>
    studentList<span class="token punctuation">,</span>  <span class="token comment">// Inner sequence</span>
    std <span class="token operator">=&gt;</span> std<span class="token punctuation">.</span>StandardID<span class="token punctuation">,</span>  <span class="token comment">// Outer key selector</span>
    s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>StandardID<span class="token punctuation">,</span>  <span class="token comment">// Inner key selector</span>
    <span class="token punctuation">(</span>std<span class="token punctuation">,</span> studentsGroup<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span>  <span class="token comment">// Result selector</span>
    <span class="token punctuation">{</span>
        Students <span class="token operator">=</span> studentsGroup<span class="token punctuation">,</span>
        StandardName <span class="token operator">=</span> std<span class="token punctuation">.</span>StandardName
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>In the <code>GroupJoin</code> method, the third parameter is a result selector that takes two arguments: an element from the outer sequence and a collection of all matching elements from the inner sequence.</li><li>From the example above, <code>std</code> is an element from the outer sequence standardList</li><li><code>studentGroup</code> is a collection of all matching elements from the inner sequence (<code>orders</code>).</li></ul><h3 id="groupjoin-in-query-syntax" tabindex="-1"><a class="header-anchor" href="#groupjoin-in-query-syntax" aria-hidden="true">#</a> GroupJoin in Query Syntax:</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>from <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token keyword">in</span> outerSequence
<span class="token keyword">join</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token keyword">in</span> innerSequence
<span class="token keyword">on</span> outerKey equals innerKey
<span class="token keyword">into</span> groupedCollection
<span class="token keyword">select</span> <span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> standards <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Standard<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> groupedJoin <span class="token operator">=</span> <span class="token keyword">from</span> s <span class="token keyword">in</span> standards
                  <span class="token keyword">join</span> stu <span class="token keyword">in</span> students <span class="token keyword">on</span> s<span class="token punctuation">.</span>StandardID equals stu<span class="token punctuation">.</span>StandardID <span class="token keyword">into</span> standardGroup
                  <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Standard <span class="token operator">=</span> s<span class="token punctuation">,</span> Students <span class="token operator">=</span> standardGroup <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="left-join" tabindex="-1"><a class="header-anchor" href="#left-join" aria-hidden="true">#</a> Left Join:</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>        <span class="token class-name"><span class="token keyword">var</span></span> resultList <span class="token operator">=</span> <span class="token keyword">from</span> standard <span class="token keyword">in</span> standardList
            <span class="token keyword">join</span> student <span class="token keyword">in</span> studentList <span class="token keyword">on</span> standard<span class="token punctuation">.</span>StandardID equals student<span class="token punctuation">.</span>StandardID
                <span class="token keyword">into</span> tmpList
            <span class="token keyword">from</span> co <span class="token keyword">in</span> tmpList<span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Standard <span class="token operator">=</span> standard<span class="token punctuation">,</span> Student <span class="token operator">=</span> co <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>join...into</code> performs a group join of <code>standardList</code> and <code>studentList</code> based on <code>StandardID</code>. The result is a temporary collection <code>tmpList</code> that contains all matching students for each standard.</li><li><code>from co in tmpList.DefaultIfEmpty()</code> is used to ensure that all elements from outer sequence are included in the final result, even if they don&#39;t have any matching elements in the inner sequence.</li></ul><h2 id="quantifier-operators" tabindex="-1"><a class="header-anchor" href="#quantifier-operators" aria-hidden="true">#</a> Quantifier Operators</h2><p>The quantifier operators evaluate elements of the sequence on some condition and return a boolean value to indicate that some or all elements satisfy the condition.</p><h3 id="all" tabindex="-1"><a class="header-anchor" href="#all" aria-hidden="true">#</a> All</h3><p>Checks if all the elements in a sequence satisfies the specified condition.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">bool</span></span> checkAge <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>s<span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Age <span class="token operator">&gt;</span> <span class="token number">19</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> Any</h3><p>Checks if any of the elements in a sequence satisfies the specified condition.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">bool</span></span> checkAge <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>s<span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Age <span class="token operator">&gt;</span> <span class="token number">19</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="first-firstordefault" tabindex="-1"><a class="header-anchor" href="#first-firstordefault" aria-hidden="true">#</a> First &amp; FirstOrDefault:</h2><h3 id="first" tabindex="-1"><a class="header-anchor" href="#first" aria-hidden="true">#</a> First</h3><p>The First element operator returns the first record when there is one or more matching value found and if no matching record got found, it will throw an exception.</p><h3 id="firstordefault" tabindex="-1"><a class="header-anchor" href="#firstordefault" aria-hidden="true">#</a> FirstOrDefault:</h3><p>The FirstOrDefault operator returns the first record and when there is no matching values found,then assign null value.</p><h2 id="single-singleordefault" tabindex="-1"><a class="header-anchor" href="#single-singleordefault" aria-hidden="true">#</a> Single &amp; SingleOrDefault</h2><h3 id="single" tabindex="-1"><a class="header-anchor" href="#single" aria-hidden="true">#</a> Single</h3><p>It will return matched single record but if we can not find any matching record, it will throw a NoMatchException. If we have more than one record found, it will also throw MoreThanOneMatchException.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Using Single</span>
<span class="token class-name"><span class="token keyword">int</span></span> singleNumber <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// singleNumber will be 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="singleordefault" tabindex="-1"><a class="header-anchor" href="#singleordefault" aria-hidden="true">#</a> SingleOrDefault:</h3><p>It will return the matched single record, but if no matching record found, then it will assign a default value. And if there is more than one matching record got found, it will throw an exception.</p><h2 id="how-to-implement-pagination-in-linq" tabindex="-1"><a class="header-anchor" href="#how-to-implement-pagination-in-linq" aria-hidden="true">#</a> How to implement pagination in LINQ:</h2><p>In LINQ, we can implement pagination using the <code>Skip()</code> and <code>Take()</code> methods.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Sample data source (you can replace this with your actual data source)</span>
        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Represents a collection of 100 elements</span>

        <span class="token comment">// Pagination parameters</span>
        <span class="token class-name"><span class="token keyword">int</span></span> pageNumber <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// The page number you want to retrieve</span>
        <span class="token class-name"><span class="token keyword">int</span></span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// The number of items per page</span>

        <span class="token comment">// Calculate the number of items to skip based on the page number and page size</span>
        <span class="token class-name"><span class="token keyword">int</span></span> itemsToSkip <span class="token operator">=</span> <span class="token punctuation">(</span>pageNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">;</span>

        <span class="token comment">// Use Skip() and Take() for pagination</span>
        <span class="token class-name"><span class="token keyword">var</span></span> pageOfData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span>itemsToSkip<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Display the results</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Page </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">pageNumber</span><span class="token punctuation">}</span></span><span class="token string"> of data:&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> pageOfData<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Skip(itemsToSkip)</code> is used to skip the specified number of elements(items to skip), which is calculated based on the page number and page size.</li><li><code>Take(pageSize)</code> is used to take the specified number of elements(page size) from the skipped position.</li></ul><h2 id="basic-linq-operations-on-strings" tabindex="-1"><a class="header-anchor" href="#basic-linq-operations-on-strings" aria-hidden="true">#</a> Basic LINQ Operations on Strings</h2><ol><li><strong>Filtering Strings</strong> We can use the <code>Where</code> method to filter strings based on a condition</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> words <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;date&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> word <span class="token keyword">in</span> result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: apple</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Transforming Strings</strong> The <code>Select</code> method is used to project each element of a sequence into a new form.</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> words <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> word <span class="token keyword">in</span> result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: APPLE, BANANA, CHERRY</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Sorting Numbers</strong></li></ol><ul><li>Sorting in Ascending Order</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Sort in ascending order</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sortedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Numbers in ascending order:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> num <span class="token keyword">in</span> sortedNumbers<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Sorting in descending order</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Sort in descending order</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sortedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Numbers in descending order:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> num <span class="token keyword">in</span> sortedNumbers<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>Aggregating Numbers</strong></li></ol><ul><li><code>Sum</code>: it calculates the total sum of the elements in a collection.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Sum: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Sum: 19</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Average</code>: it calculates the average value of the elements in a collection.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">double</span></span> average <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Average: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">average</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Average: 3.8</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Max</code>: it finds the maximum value in a collection</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">int</span></span> max <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Max: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">max</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Max: 8</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Min</code>: it finds the minimum value in a collection</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">int</span></span> min <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Min: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">min</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Min: 1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Count</code>: it counts the number of elements in a collection.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Count: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Count: 5</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Aggregating with aggregation function</code>: applies the aggregation function</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Calculate the product of all numbers</span>
        <span class="token class-name"><span class="token keyword">int</span></span> product <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Product: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">product</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Product: 240</span>

        <span class="token comment">// Calculate a custom aggregation, e.g., sum of squares</span>
        <span class="token class-name"><span class="token keyword">int</span></span> sumOfSquares <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> n <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Sum of Squares: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sumOfSquares</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Sum of Squares: 103</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="advanced-linq-operations-on-strings" tabindex="-1"><a class="header-anchor" href="#advanced-linq-operations-on-strings" aria-hidden="true">#</a> Advanced LINQ Operations on Strings</h2><ol><li><strong>Grouping Strings</strong> We can group strings based on a key selector function using the <code>GroupBy</code> method.</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> words <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;apricot&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blueberry&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">group</span> <span class="token keyword">in</span> result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Words that start with </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">group</span><span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">:&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> word <span class="token keyword">in</span> <span class="token keyword">group</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Output:</span>
<span class="token comment">// Words that start with a:</span>
<span class="token comment">// apple</span>
<span class="token comment">// apricot</span>
<span class="token comment">// Words that start with b:</span>
<span class="token comment">// banana</span>
<span class="token comment">// blueberry</span>
<span class="token comment">// Words that start with c:</span>
<span class="token comment">// cherry</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Finding Elements</strong> We can use <code>First</code>, <code>FirstOrDefault</code>, <code>Last</code>, <code>LastOrDefault</code>, <code>Single</code>, or <code>SingleOrDefault</code> to find elements that match a condition.</li></ol><ul><li><code>First</code>: returns the first element of a sequence that satisfies a specified condition or simply and will throw exception if no condition is satisfied.</li><li><code>FirstOrDefault</code>: returns the first element of a sequence, or a default value if the sequence is empty.</li><li><code>Single</code>: returns the only element of a sequence that satisfies a specific condition and will throw exception if empty sequence or multiple matches.</li><li><code>SingleOrDefault</code>: return the only element of a sequence that satisfies a specified condition. It differs from <code>Single</code> in that it doesn&#39;t throw an exception if the sequence is empty or if no element matches the condition. However, like <code>Single</code>, it does throw an exception if more than one element satisfies the condition.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> words <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> firstWord <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>firstWord<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: banana</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Checking for Existence</strong>: The <code>Any</code> and <code>All</code> methods can be used to check for the existence of elemenets that satisfy a condition.</li></ol><ul><li><code>Any</code>: determines whether any elements in a sequence satisfy a specified condition.</li><li><code>All</code>: determines whether all elements in a sequence satisfy a specified condition.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> words <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> anyWordStartsWithB <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> allWordsContainA <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>anyWordStartsWithB<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: true</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>allWordsContainA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Output: false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,139),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","linq.html.vue"]]);export{r as default};
