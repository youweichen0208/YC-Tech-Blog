const e=JSON.parse('{"key":"v-4d58f91f","path":"/backend/delegates.html","title":"Delegates in C#","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-02-23T00:00:00.000Z","category":["backend"],"tag":["C#","Delegates"],"description":"Delegates in C# C# - Delegates: The delegate is a reference type data type that defines method signature. We can define variables of delegate, just like other data type. A delegate can point to a method that has the same return type and parameters. We can invoke (or call) the method through the delegate. Delegates are used to pass methods as arguments to other methods.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/YC-Tech-Blog/backend/delegates.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Delegates in C#"}],["meta",{"property":"og:description","content":"Delegates in C# C# - Delegates: The delegate is a reference type data type that defines method signature. We can define variables of delegate, just like other data type. A delegate can point to a method that has the same return type and parameters. We can invoke (or call) the method through the delegate. Delegates are used to pass methods as arguments to other methods."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-23T18:48:51.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"Delegates"}],["meta",{"property":"article:published_time","content":"2024-02-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-23T18:48:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Delegates in C#\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-23T18:48:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"C# - Delegates:","slug":"c-delegates","link":"#c-delegates","children":[{"level":3,"title":"Three steps involved while working with delegates:","slug":"three-steps-involved-while-working-with-delegates","link":"#three-steps-involved-while-working-with-delegates","children":[]},{"level":3,"title":"A method can have a parameter of the delegate type.","slug":"a-method-can-have-a-parameter-of-the-delegate-type","link":"#a-method-can-have-a-parameter-of-the-delegate-type","children":[]},{"level":3,"title":"Multicast Delegate","slug":"multicast-delegate","link":"#multicast-delegate","children":[]}]},{"level":2,"title":"Generic Delegate","slug":"generic-delegate","link":"#generic-delegate","children":[]},{"level":2,"title":"C# - Func Delegate","slug":"c-func-delegate","link":"#c-func-delegate","children":[{"level":3,"title":"example","slug":"example","link":"#example","children":[]},{"level":3,"title":"Points to remember about Func:","slug":"points-to-remember-about-func","link":"#points-to-remember-about-func","children":[]}]},{"level":2,"title":"Action Delegate","slug":"action-delegate","link":"#action-delegate","children":[{"level":3,"title":"Action delegate with no parameters:","slug":"action-delegate-with-no-parameters","link":"#action-delegate-with-no-parameters","children":[]},{"level":3,"title":"Advantages of Action and Func Delegates:","slug":"advantages-of-action-and-func-delegates","link":"#advantages-of-action-and-func-delegates","children":[]}]},{"level":2,"title":"Predicate Delegate","slug":"predicate-delegate","link":"#predicate-delegate","children":[{"level":3,"title":"Points to remember about Predicate<T>:","slug":"points-to-remember-about-predicate-t","link":"#points-to-remember-about-predicate-t","children":[]}]},{"level":2,"title":"Anonymous Method:","slug":"anonymous-method","link":"#anonymous-method","children":[{"level":3,"title":"Anonymous methods can be passed to a method that accepts delegate as a parameter","slug":"anonymous-methods-can-be-passed-to-a-method-that-accepts-delegate-as-a-parameter","link":"#anonymous-methods-can-be-passed-to-a-method-that-accepts-delegate-as-a-parameter","children":[]}]},{"level":2,"title":"Points to remember:","slug":"points-to-remember","link":"#points-to-remember","children":[]}],"git":{"createdTime":1708714131000,"updatedTime":1708714131000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":1}]},"readingTime":{"minutes":4.37,"words":1312},"filePathRelative":"backend/delegates.md","localizedDate":"February 23, 2024","excerpt":"<h1> Delegates in C#</h1>\\n<h2> C# - Delegates:</h2>\\n<p>The delegate is a reference type data type that defines method signature. We can define variables of delegate, just like other data type. A delegate can point to a method that has the same return type and parameters. We can invoke (or call) the method through the delegate. Delegates are used to pass methods as arguments to other methods.</p>","autoDesc":true}');export{e as data};
