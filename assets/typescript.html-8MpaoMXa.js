const t=JSON.parse('{"key":"v-09c07d70","path":"/frontend/typescript.html","title":"TypeScript","lang":"en-US","frontmatter":{"cover":"/assets/images/secondhand-project.jpg","icon":"pen-to-square","date":"2024-01-22T00:00:00.000Z","category":["frontend"],"tag":["TypeScript"],"description":"TypeScript Understanding Type Annotations in TypeScript What is typescript? TypeScript is a statically typed superset of JavaScript that compiles to plain JavaScript. It was developed by is maintained by Microsoft. Static Typing: TypeScript introducrs static typying to JavaScript, which can help catch errors at compile time rather than runtime. This is useful in large codebases. Class-Based Object-Oriented Programming: TypeScript includes full support for classes, interfaces, and inheritance, much like object-oriented languages such as Java or C#. Type Inference: TypeScript can often infer types based on variables and functions are used. ESNext Features: TypeScript supports newer JavaScript features, including async/await, decorators, and modules.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/frontend/typescript.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"TypeScript"}],["meta",{"property":"og:description","content":"TypeScript Understanding Type Annotations in TypeScript What is typescript? TypeScript is a statically typed superset of JavaScript that compiles to plain JavaScript. It was developed by is maintained by Microsoft. Static Typing: TypeScript introducrs static typying to JavaScript, which can help catch errors at compile time rather than runtime. This is useful in large codebases. Class-Based Object-Oriented Programming: TypeScript includes full support for classes, interfaces, and inheritance, much like object-oriented languages such as Java or C#. Type Inference: TypeScript can often infer types based on variables and functions are used. ESNext Features: TypeScript supports newer JavaScript features, including async/await, decorators, and modules."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/secondhand-project.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-31T05:34:14.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"TypeScript"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2024-01-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-31T05:34:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/secondhand-project.jpg\\"],\\"datePublished\\":\\"2024-01-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-31T05:34:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Understanding Type Annotations in TypeScript","slug":"understanding-type-annotations-in-typescript","link":"#understanding-type-annotations-in-typescript","children":[{"level":3,"title":"What is typescript?","slug":"what-is-typescript","link":"#what-is-typescript","children":[]},{"level":3,"title":"What is Type Annotation in TypeScript","slug":"what-is-type-annotation-in-typescript","link":"#what-is-type-annotation-in-typescript","children":[]},{"level":3,"title":"Type Annotation examples:","slug":"type-annotation-examples","link":"#type-annotation-examples","children":[]}]},{"level":2,"title":"Introduction to TypeScript object type:","slug":"introduction-to-typescript-object-type","link":"#introduction-to-typescript-object-type","children":[]},{"level":2,"title":"TypeScript functions:","slug":"typescript-functions","link":"#typescript-functions","children":[{"level":3,"title":"Introduction to TypeScript functions:","slug":"introduction-to-typescript-functions","link":"#introduction-to-typescript-functions","children":[]},{"level":3,"title":"Function Overloadings:","slug":"function-overloadings","link":"#function-overloadings","children":[]}]},{"level":2,"title":"Introduction to the TypeScript Class","slug":"introduction-to-the-typescript-class","link":"#introduction-to-the-typescript-class","children":[]},{"level":2,"title":"Woring with Union Types:","slug":"woring-with-union-types","link":"#woring-with-union-types","children":[]},{"level":2,"title":"Assigning Type Aliases:","slug":"assigning-type-aliases","link":"#assigning-type-aliases","children":[]},{"level":2,"title":"Function & Function Types","slug":"function-function-types","link":"#function-function-types","children":[]},{"level":2,"title":"Understanding Generics:","slug":"understanding-generics","link":"#understanding-generics","children":[]},{"level":2,"title":"Classes in TypeScript","slug":"classes-in-typescript","link":"#classes-in-typescript","children":[]},{"level":2,"title":"Interfaces in typescript","slug":"interfaces-in-typescript","link":"#interfaces-in-typescript","children":[]}],"git":{"createdTime":1705958573000,"updatedTime":1711863254000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":2}]},"readingTime":{"minutes":3.55,"words":1065},"filePathRelative":"frontend/typescript.md","localizedDate":"January 22, 2024","excerpt":"<h1> TypeScript</h1>\\n<h2> Understanding Type Annotations in TypeScript</h2>\\n<h3> What is typescript?</h3>\\n<p>TypeScript is a statically typed superset of JavaScript that compiles to plain JavaScript. It was developed by is maintained by Microsoft.</p>\\n<ul>\\n<li>\\n<p><strong>Static Typing</strong>: TypeScript introducrs static typying to JavaScript, which can help catch errors at compile time rather than runtime. This is useful in large codebases.</p>\\n</li>\\n<li>\\n<p><strong>Class-Based Object-Oriented Programming:</strong> TypeScript includes full support for classes, interfaces, and inheritance, much like object-oriented languages such as Java or C#.</p>\\n</li>\\n<li>\\n<p><strong>Type Inference</strong>: TypeScript can often infer types based on variables and functions are used.</p>\\n</li>\\n<li>\\n<p><strong>ESNext Features</strong>: TypeScript supports newer JavaScript features, including async/await, decorators, and modules.</p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
