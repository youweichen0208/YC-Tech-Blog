const e=JSON.parse(`{"key":"v-98d81750","path":"/backend/spring.html","title":"Spring framework","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-01-11T00:00:00.000Z","category":["interview"],"tag":["Java","Spring"],"star":true,"sticky":true,"description":"Spring framework What is Spring Framework? Spring is a powerful open-source, loosely coupled, lightweight, Java framework meant for reducing the complexity of developing enterprise-level applications. What is Spring Container? Spring Container","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend/spring.html"}],["meta",{"property":"og:site_name","content":"YC Tech Blog"}],["meta",{"property":"og:title","content":"Spring framework"}],["meta",{"property":"og:description","content":"Spring framework What is Spring Framework? Spring is a powerful open-source, loosely coupled, lightweight, Java framework meant for reducing the complexity of developing enterprise-level applications. What is Spring Container? Spring Container"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-13T03:25:10.000Z"}],["meta",{"property":"article:author","content":"Youwei Chen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-13T03:25:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring framework\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-13T03:25:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Youwei Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"What is Spring Framework?","slug":"what-is-spring-framework","link":"#what-is-spring-framework","children":[]},{"level":2,"title":"What is Spring Container?","slug":"what-is-spring-container","link":"#what-is-spring-container","children":[]},{"level":2,"title":"How to create the Spring container in Java?","slug":"how-to-create-the-spring-container-in-java","link":"#how-to-create-the-spring-container-in-java","children":[]},{"level":2,"title":"define Spring Configuration class","slug":"define-spring-configuration-class","link":"#define-spring-configuration-class","children":[]},{"level":2,"title":"Annotations we used in the Configuration class:","slug":"annotations-we-used-in-the-configuration-class","link":"#annotations-we-used-in-the-configuration-class","children":[{"level":3,"title":"@Bean: The @Bean annotation is a method-level annotation within a class that is annotated with @Configuration. The @Bean annotation tells Spring that the return value of the method should be registered as a bean within the Spring's ApplicationContext. The method name itself is default used as the bean ID. However, we can override this by providing a name attribute to the @Bean annotation. The value we provide for name will be used as the bean's ID in the Spring ApplicationContext.","slug":"bean-the-bean-annotation-is-a-method-level-annotation-within-a-class-that-is-annotated-with-configuration-the-bean-annotation-tells-spring-that-the-return-value-of-the-method-should-be-registered-as-a-bean-within-the-spring-s-applicationcontext-the-method-name-itself-is-default-used-as-the-bean-id-however-we-can-override-this-by-providing-a-name-attribute-to-the-bean-annotation-the-value-we-provide-for-name-will-be-used-as-the-bean-s-id-in-the-spring-applicationcontext","link":"#bean-the-bean-annotation-is-a-method-level-annotation-within-a-class-that-is-annotated-with-configuration-the-bean-annotation-tells-spring-that-the-return-value-of-the-method-should-be-registered-as-a-bean-within-the-spring-s-applicationcontext-the-method-name-itself-is-default-used-as-the-bean-id-however-we-can-override-this-by-providing-a-name-attribute-to-the-bean-annotation-the-value-we-provide-for-name-will-be-used-as-the-bean-s-id-in-the-spring-applicationcontext","children":[]},{"level":3,"title":"@Primary: The @Primary annotation in Spring is used to give higher preference to a bean where they are multiple beans of the same type. This is particularly useful when we are autowiring beans by type, and there are multiple beans of that type to choose from.","slug":"primary-the-primary-annotation-in-spring-is-used-to-give-higher-preference-to-a-bean-where-they-are-multiple-beans-of-the-same-type-this-is-particularly-useful-when-we-are-autowiring-beans-by-type-and-there-are-multiple-beans-of-that-type-to-choose-from","link":"#primary-the-primary-annotation-in-spring-is-used-to-give-higher-preference-to-a-bean-where-they-are-multiple-beans-of-the-same-type-this-is-particularly-useful-when-we-are-autowiring-beans-by-type-and-there-are-multiple-beans-of-that-type-to-choose-from","children":[]},{"level":3,"title":"@Qualifier: The @Qualifier annotation in Spring is used tp resolve ambiguity where they are multiple beans of the same type and we want to wire only one of them with a property.","slug":"qualifier-the-qualifier-annotation-in-spring-is-used-tp-resolve-ambiguity-where-they-are-multiple-beans-of-the-same-type-and-we-want-to-wire-only-one-of-them-with-a-property","link":"#qualifier-the-qualifier-annotation-in-spring-is-used-tp-resolve-ambiguity-where-they-are-multiple-beans-of-the-same-type-and-we-want-to-wire-only-one-of-them-with-a-property","children":[]},{"level":3,"title":"@Qualifier has higher priority than @Primary","slug":"qualifier-has-higher-priority-than-primary","link":"#qualifier-has-higher-priority-than-primary","children":[]}]},{"level":2,"title":"How to retrieve beans from the Spring Application Context by its name or ID?","slug":"how-to-retrieve-beans-from-the-spring-application-context-by-its-name-or-id","link":"#how-to-retrieve-beans-from-the-spring-application-context-by-its-name-or-id","children":[]},{"level":2,"title":"Exploring Java Bean vs POJO vs Spring Bean","slug":"exploring-java-bean-vs-pojo-vs-spring-bean","link":"#exploring-java-bean-vs-pojo-vs-spring-bean","children":[]},{"level":2,"title":"Dependency Injection","slug":"dependency-injection","link":"#dependency-injection","children":[{"level":3,"title":"1. Constructor-Based Dependency Injection:","slug":"_1-constructor-based-dependency-injection","link":"#_1-constructor-based-dependency-injection","children":[]}]},{"level":2,"title":"2. Setter-Based Dependency Injection:","slug":"_2-setter-based-dependency-injection","link":"#_2-setter-based-dependency-injection","children":[]},{"level":2,"title":"3. Field-Based Dependency Injection:","slug":"_3-field-based-dependency-injection","link":"#_3-field-based-dependency-injection","children":[]},{"level":2,"title":"@Component:","slug":"component","link":"#component","children":[]},{"level":2,"title":"@ComponentScan:","slug":"componentscan","link":"#componentscan","children":[]},{"level":2,"title":"Autowiring:","slug":"autowiring","link":"#autowiring","children":[]}],"git":{"createdTime":1705039246000,"updatedTime":1705116310000,"contributors":[{"name":"Youwei Chen","email":"youweichen0208@gmail.com","commits":2}]},"readingTime":{"minutes":4.8,"words":1441},"filePathRelative":"backend/spring.md","localizedDate":"January 11, 2024","excerpt":"<h1> Spring framework</h1>\\n<h2> What is Spring Framework?</h2>\\n<p>Spring is a powerful open-source, loosely coupled, lightweight, Java framework meant for reducing the complexity of developing enterprise-level applications.</p>\\n<h2> What is Spring Container?</h2>\\n<figure><img src=\\"/assets/images/spring-container.png\\" alt=\\"Spring Container\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Spring Container</figcaption></figure>","autoDesc":true}`);export{e as data};
